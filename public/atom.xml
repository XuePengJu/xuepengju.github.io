<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夏见°の博客</title>
  
  <subtitle>欢迎加入</subtitle>
  <link href="http://mypeng.site/atom.xml" rel="self"/>
  
  <link href="http://mypeng.site/"/>
  <updated>2022-02-16T14:47:59.000Z</updated>
  <id>http://mypeng.site/</id>
  
  <author>
    <name>夏见°</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>〖接口测试〗postman做接口测试15-快速查询与替换</title>
    <link href="http://mypeng.site/posts/f5e730b6/"/>
    <id>http://mypeng.site/posts/f5e730b6/</id>
    <published>2022-02-16T14:47:59.000Z</published>
    <updated>2022-02-16T14:47:59.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>有时候我们常会遇到这样一种问题，系统中有太多的用例，环境变量和系统变量的值也太多，查找其中的某个值太不方便；或者有的值想要修改，但苦于修改的地方太多，修改起来太费劲。那么，针对这样的困扰，是否有办法解决呢 ？ 答案是有的 ，那就是快速查询与批量替换。</p><p>接下来我们先来了解这个功能的入口和简单介绍。</p><p> <img src= "/img/loading1.gif" data-lazy-src="/img/blog/postman/15/015-01.png" alt="img"></p><h3 id="功能介绍："><a href="#功能介绍：" class="headerlink" title="功能介绍："></a>功能介绍：</h3><p>FIND:搜索输入框，在搜索框中输入你想要搜索的值，postman会自动到已打开的请求，集合，环境变量，全局变量中去搜索，如果搜索到，就会在右侧展示出搜素的结果 。其下方有俩个复选框，分别是Regex(正则匹配)和Ignore Case(忽略大小写)。</p><p>WHERE:带条件查询，默认会选择everything（查询所有），如果想要选择某一个tab搜索，从下面选择即可，可以支持从集合、环境变量、全局变量以及以打开的请求中搜索 。</p><p>REPLACE WITH: 替换文本框，在此文本框中输入替换的值，点击Replace in … 按钮，会将搜索出的值全部替换 。</p><p>右侧的搜索结果：搜索出对应的结果后，右侧每个tab中都会显示具体的数字，代表当前tab中匹配值的数量。你可以选择一个值点击Open，就会直接进入到对应的功能选项卡中 。</p><h3 id="案例说明："><a href="#案例说明：" class="headerlink" title="案例说明："></a>案例说明：</h3><h5 id="案例1：按照正则表达式搜索11位数字。"><a href="#案例1：按照正则表达式搜索11位数字。" class="headerlink" title="案例1：按照正则表达式搜索11位数字。"></a>案例1：按照正则表达式搜索11位数字。</h5><p>操作步骤：在搜索框中输入\d{11}，勾选Regex,点击Find，右侧就会展示出还有11位数字的所有信息。</p><p><img src= "/img/loading1.gif" data-lazy-src="/img/blog/postman/15/015-02.png" alt="img"></p><h5 id="案例2：从集合中搜索"><a href="#案例2：从集合中搜索" class="headerlink" title="案例2：从集合中搜索"></a>案例2：从集合中搜索</h5><p>在搜索框中输入搜索关键字，</p><p>在WHERE中选择Choose entities to find in，选中Collections 。</p><p>找到你想要的结果，点击Open in builder。就会直接打开对应请求tab.</p><p><img src= "/img/loading1.gif" data-lazy-src="/img/blog/postman/15/015-03.png" alt="img"></p><h5 id="案例3：替换某个字符串"><a href="#案例3：替换某个字符串" class="headerlink" title="案例3：替换某个字符串"></a>案例3：替换某个字符串</h5><p>在查找搜索框中输入关键字，</p><p>在REPLACE WITH框中输入想要替换的值，可以选择select All ,点击后面的按钮。</p><p>再次搜索替换后的结果，发现所有值都已被替换 。</p><p><img src= "/img/loading1.gif" data-lazy-src="/img/blog/postman/15/015-04.png" alt="img"></p><blockquote><p> 总之，通过这个功能，我们可以快速找到我们想要的集合，环境变量，全局变量，请求或者代码块。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="postman" scheme="http://mypeng.site/categories/postman/"/>
    
    
    <category term="postman" scheme="http://mypeng.site/tags/postman/"/>
    
  </entry>
  
  <entry>
    <title>〖接口测试〗postman做接口测试14-导入导出</title>
    <link href="http://mypeng.site/posts/6172e27e/"/>
    <id>http://mypeng.site/posts/6172e27e/</id>
    <published>2022-02-15T14:59:55.000Z</published>
    <updated>2022-02-15T14:59:55.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>这又是一个非常实用的功能。可以将postman中的集合脚本，环境变量、全局变量导出，然后分享到团队成员，也可以通过导出后的脚本通过newman生成测试报告。更牛的是可以把浏览器，抓包工具，接口文档(swagger)中的数据包导入到postman中，并且会自动生成一个请求 。非常非常的方便 。</p><h2 id="1-导出"><a href="#1-导出" class="headerlink" title="1.导出"></a>1.导出</h2><h3 id="导出集合脚本"><a href="#导出集合脚本" class="headerlink" title="导出集合脚本"></a>导出集合脚本</h3><p>选择其中一个集合，点击右边的三个点（…）,选择‘export’.</p><p>在弹出的对话框Collection v2.1(recommended),点击‘Export’ .</p><p>选择本地路径保存即可，默认导入的文件格式是json且文件名中含有Collection,这样能区分出是集合文件 。</p><h3 id="导出环境-全局变量"><a href="#导出环境-全局变量" class="headerlink" title="导出环境/全局变量"></a>导出环境/全局变量</h3><p>选择右上角的小齿轮(MANAGE ENVIRONMENT)，</p><p>如果是选择环境变量导出，只需要在点击对应环境的下载图标</p><p>如果是选择全局变量导出，点击Globals,再点击Download as JSON .</p><p>选择本地路径保存即可，默认导出的文件格式是json文件名找那个含有environemnt或globals，可以区分出这是环境变量文件或全局变量文件</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/014-01.png" alt="img"> </p><p>简单来说，导出后的文件主要就是以下几个目的：</p><p>​    分享给团队成员</p><p>​    生成测试报告</p><p>​    数据备份</p><h2 id="2-导入"><a href="#2-导入" class="headerlink" title="2.导入"></a>2.导入</h2><p>导入有四个选项，支持从文件导入，文件夹导入，从链接导入，粘贴文本导入。导入的入口：</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/014-02.png" alt="img"> </p><h3 id="Import-File：从文件导入"><a href="#Import-File：从文件导入" class="headerlink" title="Import File：从文件导入"></a>Import File：从文件导入</h3><p>可以支持集合文件导入，环境/全局变量文件导入(json)，通过抓包工具保存的请求文件导入 。</p><p>无论是导入集合文件还是变量文件，都需要提前把对应的文件导出 。 当然此功能的使用场景就是团队成员相互分享脚本 。</p><p>  <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/014-03.png" alt="img"> </p><h3 id="导入fiddler数据："><a href="#导入fiddler数据：" class="headerlink" title="导入fiddler数据："></a>导入fiddler数据：</h3><p>可以将fiddler的抓取到的数据包导出，然后在postman中导入，就会在postman自动生成请求，无需任何修改 。具体实现步骤如下：</p><p>从fiddler中选择一个请求，然后导出脚本文件 。</p><p>在postman中的import File 中导入即可</p><p>会自动将请求转变成postman脚本。</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/014-04.png" alt="img"> </p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/014-05.png" alt="img"> </p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/014-06.png" alt="img"> </p><h3 id="Import-Folder：选择从文件夹导入。"><a href="#Import-Folder：选择从文件夹导入。" class="headerlink" title="Import Folder：选择从文件夹导入。"></a>Import Folder：选择从文件夹导入。</h3><p>有时候我们导出的集合需要用到环境变量，所以，需要把集合文件和环境变量文件都要导出，把它们放在一个文件夹下，如团队成员需要时，可以选择Import Folder直接一次性都导入即可。</p><h3 id="Import-From-Link：通过链接导入也可以将集合分享给团队成员。"><a href="#Import-From-Link：通过链接导入也可以将集合分享给团队成员。" class="headerlink" title="Import From Link：通过链接导入也可以将集合分享给团队成员。"></a>Import From Link：通过链接导入也可以将集合分享给团队成员。</h3><p>但 使用这个功能需要先注册账号且登录才可以 。具体实现步骤如下 ：</p><p>选择一个集合，点击分享</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/014-07.png" alt="img"> </p><p>在弹出的界面点击Get public link</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/014-08.png" alt="img"></p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/014-09.png" alt="img">  </p><p> 选择Import-Import From Link 进行导入</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/014-10.png" alt="img"> </p><p>Paste Raw Text：这个功能可以将浏览器的数据包或接口文档（swagger）的数据粘贴进来自动生成请求 ，无需任何修改，就可以直接发送请求 。非常的赞 。</p><p>实现步骤：</p><p>在浏览器中抓取到想要的包，然后右键copy出Curl的数据包</p><p>在postman的import中将数据粘贴进来，就会自动生成了对应的请求 。</p><p>  <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/014-11.png" alt="img"> </p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/014-13.png" alt="img"> </p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/014-13.png" alt="img"> </p><p>下面的这个截图是从接口文档swagger，将这个数据包拷贝粘贴到上面的文本中(Paste Raw Text) 也可以自动生成请求 。</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/014-14.png" alt="img"> </p><p>总之，这个功能非常实用，尤其是可以把浏览器或抓包工具中的数据包导入进来直接使用，大大的减少了我们的接口实现时间 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="postman" scheme="http://mypeng.site/categories/postman/"/>
    
    
    <category term="postman" scheme="http://mypeng.site/tags/postman/"/>
    
  </entry>
  
  <entry>
    <title>〖接口测试〗postman做接口测试13-认证(Authorization)</title>
    <link href="http://mypeng.site/posts/dcc42dc3/"/>
    <id>http://mypeng.site/posts/dcc42dc3/</id>
    <published>2022-02-11T14:13:55.000Z</published>
    <updated>2022-02-11T14:13:55.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Authorization是什么？"><a href="#Authorization是什么？" class="headerlink" title="Authorization是什么？"></a>Authorization是什么？</h1><p>这又是一个非常实用的功能，对我们做接口测试来说，经常要处理登录认证的情况 。如果不用这个Authorization其实也能解决认证的问题，无非就是把要认证的数据按照要求在指定位置传入参数即可。比如我们之前测试的系统，登录后返回的token要在每个请求接口的headers中传入 。这时就需要在每个headers中都填写一个认证参数传入 ，但是这样做的话太过繁琐，如果使用认证(Authorization)功能的话，就会大大简化了我们的认证过程。</p><p>我们先来看下这个功能的具体位置及主要作用 。<br> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/013-01.png" alt="img"></p><p>Inherit auto from parent:从父级继承身份验证，是每个请求的默认选择 。这是一个很有用的功能，当我们对一个集合(collection)进行测试的时候，集合中的每个请求都需要获取token，那么如果我们在集合中把token处理好的话，那么该集合下的所有请求都会自动获取到这个token，也就省略了我们对每个token进行处理了。</p><h3 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h3><p><img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/013-02.png" alt="img"></p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/013-03.png" alt="img"><br> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/013-04.png" alt="img"></p><h3 id="No-Auth-无需身份认证的可以选择这个-。"><a href="#No-Auth-无需身份认证的可以选择这个-。" class="headerlink" title="No Auth: 无需身份认证的可以选择这个 。"></a>No Auth: 无需身份认证的可以选择这个 。</h3><p>选中一个集合进行编辑，切换到Pre-Request Script.在这里请求登录接口 ，将返回的token值拿到，然后保存成全局变量 。</p><p>切换到Authorization选项卡，在这里直接获取token 。这里的获取token需要根据具体的项目 。比如我们所测试的项目正好是Bearer token这种形式 。直接在列表中使用这种方式输入{undefined{token}}即可。</p><p>向集合添加请求，无需进行token处理，所有接口都能请求成功 。</p><h3 id="API-Key-也有很多系统是通过这种认证方式，比如在请求头添加-model-data-xxx-xxx-xxx-xxxx"><a href="#API-Key-也有很多系统是通过这种认证方式，比如在请求头添加-model-data-xxx-xxx-xxx-xxxx" class="headerlink" title="API Key: 也有很多系统是通过这种认证方式，比如在请求头添加 model: data xxx-xxx-xxx-xxxx"></a>API Key: 也有很多系统是通过这种认证方式，比如在请求头添加 model: data xxx-xxx-xxx-xxxx</h3><p><img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/013-05.png" alt="img"></p><h3 id="Bearer-Token-很多系统都是以这种认证方式，就是在请求头中添加Authorization：Bearer-Token-。那么使用这种认证就非常方便-。"><a href="#Bearer-Token-很多系统都是以这种认证方式，就是在请求头中添加Authorization：Bearer-Token-。那么使用这种认证就非常方便-。" class="headerlink" title="Bearer Token:很多系统都是以这种认证方式，就是在请求头中添加Authorization：Bearer Token 。那么使用这种认证就非常方便 。"></a>Bearer Token:很多系统都是以这种认证方式，就是在请求头中添加Authorization：Bearer Token 。那么使用这种认证就非常方便 。</h3><p><img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/013-06.png" alt="img"></p><blockquote><p>总之，需要认证方式要根据所测试的系统而定，通过Authorization来处理认证后，能大大节省我们的工作量。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="postman" scheme="http://mypeng.site/categories/postman/"/>
    
    
    <category term="postman" scheme="http://mypeng.site/tags/postman/"/>
    
  </entry>
  
  <entry>
    <title>〖接口测试〗postman做接口测试12-请求前置脚本</title>
    <link href="http://mypeng.site/posts/99817e93/"/>
    <id>http://mypeng.site/posts/99817e93/</id>
    <published>2022-02-08T14:24:22.000Z</published>
    <updated>2022-02-08T14:24:22.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是前置脚本"><a href="#什么是前置脚本" class="headerlink" title="什么是前置脚本"></a>什么是前置脚本</h1><p>前置脚本其实就是在Pre-requests Script中编写的JavaScript脚本，想要了解这个功能，需要先了解它的执行顺序。那么下面就来看下它的执行顺序 。</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/012-01.png" alt="img"> </p><p>可以看出，一个请求在发送之前，会先去执行Pre Request Script（前置脚本）中的代码 。那么这个功能在实际工作中有什么作用呢 ？</p><p>主要场景：一般情况下，在发送请求前需要对接口的数据做进一步处理，就都可以使用这个功能，比如说，登录接口的密码，在发送前需要做加密处理，那么就可以在前置脚本中做加密处理，再比如说，有的接口的输入参数有一些随机数，每请求一次接口参数值都会发送变化，就可以在前置脚本中编写生成随机数的代码 。</p><p>总结来说，就是在请求接口之前对我们的请求数据进行进一步加工处理的都可以使用前置脚本这个功能。</p><h1 id="接下来通过一个案例来看下该功能是如何使用-？"><a href="#接下来通过一个案例来看下该功能是如何使用-？" class="headerlink" title="接下来通过一个案例来看下该功能是如何使用 ？"></a>接下来通过一个案例来看下该功能是如何使用 ？</h1><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><p>请求的充值接口，要做个抽奖的活动，随机到谁，就充值给谁，那么这个ID就是一个随机数</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/012-02.png" alt="img"> </p><h3 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h3><p>​    1、在前置脚本中编写生成随机数</p><p>​    2、将这个值保存成环境变量</p><p>​    3、将ID的值替换成环境变量的值 。</p><blockquote><p>总之，这个前置脚本对我们做接口测试也非常有用，对一些复杂的场景，都可以使用前置脚本进行处理后再请求接口 。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="postman" scheme="http://mypeng.site/categories/postman/"/>
    
    
    <category term="postman" scheme="http://mypeng.site/tags/postman/"/>
    
  </entry>
  
  <entry>
    <title>〖接口测试〗postman做接口测试11-接口关联</title>
    <link href="http://mypeng.site/posts/adb093cd/"/>
    <id>http://mypeng.site/posts/adb093cd/</id>
    <published>2022-02-07T16:13:08.000Z</published>
    <updated>2022-02-07T16:13:08.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是关联接口"><a href="#什么是关联接口" class="headerlink" title="什么是关联接口"></a>什么是关联接口</h1><p>在我们测试的接口中，经常出现这种情况 。 上一个接口的返回数据是下一个接口的输入参数 ，那么这俩个接口就产生了关联关系 。 这种关联在做接口测试时非常常见，那么在postman中，如何实现这种关联关系呢 ？我们通过一个案例来实现。</p><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><p>用户充值，需要用户先登录，然后在进行充值操作：</p><p>调用登录接口成功后会返回如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  &quot;code&quot;: 0,</span><br><span class="line"></span><br><span class="line">  &quot;msg&quot;: &quot;OK&quot;,</span><br><span class="line"></span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line"></span><br><span class="line">    &quot;id&quot;: 4,</span><br><span class="line"></span><br><span class="line">    &quot;leave_amount&quot;: 6300.0,</span><br><span class="line"></span><br><span class="line">    &quot;mobile_phone&quot;: &quot;15943873886&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;reg_name&quot;: &quot;Auto_Test&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;reg_time&quot;: &quot;2022-02-03 07:38:06.0&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;type&quot;: 0,</span><br><span class="line"></span><br><span class="line">    &quot;token_info&quot;: &#123;</span><br><span class="line"></span><br><span class="line">      &quot;token_type&quot;: &quot;Bearer&quot;,</span><br><span class="line"></span><br><span class="line">      &quot;expires_in&quot;: &quot;2022-02-07 16:24:08&quot;,</span><br><span class="line"></span><br><span class="line">      &quot;token&quot;: &quot;eyJhbGciOiJIUzUxMiJ9.eyJtZW1iZXJfaWQiOjQsImV4cCI6MTY0NDI1MTA0OH0.yXw4-_vnTJs3c1wPTwd8saMae8OP1jQ7Vlizvv0wygoD0ZCwX9Ahe6AHUEKsPJeOKkxfcXDXBcW4JNJ8mDkuvw&quot;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而充值接口需要传入token，登录接口正好返回了token。那么这俩个接口就产生了关联 。那么在postman 可以通过以下三步完成这俩个接口的关联实现 。</p><h3 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h3><ol><li><p>登录获取后获取token</p></li><li><p>将token保存到环境变量</p></li><li><p>充值接口调用环境变量中的token就可以实现业务操作</p><p><img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/011-01.png" alt="登录"><br><img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/011-01.png" alt="充值"> </p></li></ol><blockquote><p> 可以看出，接口的关联的解决方案都是用的是变量中的知识，也就是说只要你明确了要提取的值，后面就是保存该值，然后在其他接口使用该值就可以了。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="postman" scheme="http://mypeng.site/categories/postman/"/>
    
    
    <category term="postman" scheme="http://mypeng.site/tags/postman/"/>
    
  </entry>
  
  <entry>
    <title>〖接口测试〗postman做接口测试10-全局变量/集合变量/环境变量</title>
    <link href="http://mypeng.site/posts/c98d9940/"/>
    <id>http://mypeng.site/posts/c98d9940/</id>
    <published>2022-01-23T13:13:56.000Z</published>
    <updated>2022-01-23T13:13:56.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>变量可以使我们在请求或脚本中存储和重复使用其值，通过将值保存在变量中，可以在集合，环境或请求中引用。</p></blockquote><p>对我们做接口测试来说，又是一个非常重要的功能 。</p><h2 id="在postman常用的三种变量分别是全局变量，环境变量，集合变量-。"><a href="#在postman常用的三种变量分别是全局变量，环境变量，集合变量-。" class="headerlink" title="在postman常用的三种变量分别是全局变量，环境变量，集合变量 。"></a>在postman常用的三种变量分别是全局变量，环境变量，集合变量 。</h2><blockquote><p>全局变量：一旦申明了全局变量，全局有效，也就是说postman中的任何集合，任何请求中都可以使用这个变量。它的作用域是最大的 。</p></blockquote><blockquote><p>环境变量：要申明环境变量，首先的创建环境，然后在环境中才能创建变量 。如果要想使用环境变量，必须先选择(导入)这个环境，这样就可以使用这个环境下的变量了 。需要说明的是环境也可以创建多个 。每个环境下又可以有多个变量 。</p></blockquote><blockquote><p>集合变量：集合变量是针对集合的，也就是说申明的变量必须基于某个集合，它的使用范围也只是针对这个集合有效 。</p></blockquote><p>其中，他们的作用域范围依次从大到小：全局变量&gt;集合变量&gt;环境变量 。 当在几个不同的范围内都申明了相同的变量时，则会优先使用范围最小的变量使。</p><h2 id="想要使用变量中的值只需俩个步骤，分别是定义变量和获取变量-。"><a href="#想要使用变量中的值只需俩个步骤，分别是定义变量和获取变量-。" class="headerlink" title="想要使用变量中的值只需俩个步骤，分别是定义变量和获取变量 。"></a>想要使用变量中的值只需俩个步骤，分别是定义变量和获取变量 。</h2><pre><code>1.定义变量（设置变量）2.获取变量（访问变量）</code></pre><h3 id="1-定义变量"><a href="#1-定义变量" class="headerlink" title="1. 定义变量"></a>1. 定义变量</h3><p>定义全局变量和环境变量，点击右上角的小齿轮，弹出如下界面，就可以根据需求定义全局变量或者环境变量了。</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/010-01.png" alt="img"> </p><p>已经定义的全局变量和环境变量，可以进行快速查看</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/010-02.png" alt="img"> </p><h3 id="2-定义集合变量"><a href="#2-定义集合变量" class="headerlink" title="2.定义集合变量"></a>2.定义集合变量</h3><h4 id="2-1-选择一个集合，打开查看更多动作-…-菜单，然后点击编辑-。选择“变量”选项卡以编辑或添加到集合变量。"><a href="#2-1-选择一个集合，打开查看更多动作-…-菜单，然后点击编辑-。选择“变量”选项卡以编辑或添加到集合变量。" class="headerlink" title="2.1 选择一个集合，打开查看更多动作(…)菜单，然后点击编辑 。选择“变量”选项卡以编辑或添加到集合变量。"></a>2.1 选择一个集合，打开查看更多动作(…)菜单，然后点击编辑 。选择“变量”选项卡以编辑或添加到集合变量。</h4><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/010-03.png" alt="img"> </p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/010-04.png" alt="img"> </p><h4 id="2-2-定义变量除了以上方式，还有另外一种方式-。但是这种方式在不同的位置定义，编写不一样。"><a href="#2-2-定义变量除了以上方式，还有另外一种方式-。但是这种方式在不同的位置定义，编写不一样。" class="headerlink" title="2.2 定义变量除了以上方式，还有另外一种方式 。但是这种方式在不同的位置定义，编写不一样。"></a>2.2 定义变量除了以上方式，还有另外一种方式 。但是这种方式在不同的位置定义，编写不一样。</h4><p>在URL，Params , Authorization , Headers , Body中定义：</p><p>手工方式创建一个空的变量名</p><p>在以上的位置把想要的值选中右击，选中Set：环境|全局 ，选中一个变量名，点击后就会保存到这个变量中</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/010-05.png" alt="img"> </p><p>在Tests，Pre-requests Script：</p><p>定义全局变量：pm.collectionVariables.set(“变量名”,变量值)</p><p>定义环境变量：pm.environment.set(“变量名”，变量值)</p><p>定义集合变量：pm.variables.set(“变量名”,变量值)</p><h3 id="3-获取变量"><a href="#3-获取变量" class="headerlink" title="3.获取变量"></a>3.获取变量</h3><p>定义好变量，接下来就可以使用变量了 。需要注意的是，在不同的位置获取变量，编写的规则也是不一样的 。</p><p>如果在请求参数中获取变量，无论是获取全局变量，还是环境变量，还是集合变量，获取的方式都是一样的编写规则：{undefined{变量名}} 。</p><p>请求参数指的是：URL，Params , Authorization , Headers , Body</p><p>如果是在编写代码的位置(Tests,Pre-requests Script)获取变量，获取不同类型的变量，编写的代码都不相同，具体如下：</p><p>获取环境变量：pm.environment.get(‘变量名’)</p><p>获取全局变量：pm.globals.get(‘变量名’)</p><p>获取集合变量：pm.pm.collectionVariables.get.get(‘变量名’)</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/010-06.png" alt="img"> </p><p>变量的使用场景非常广泛，比如我们后面要提到的接口关联，请求前置脚本都会使用到变量 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="postman" scheme="http://mypeng.site/categories/postman/"/>
    
    
    <category term="postman" scheme="http://mypeng.site/tags/postman/"/>
    
  </entry>
  
  <entry>
    <title>学习笔记-Python之生成器和列表推导式的区别</title>
    <link href="http://mypeng.site/posts/30fa304c/"/>
    <id>http://mypeng.site/posts/30fa304c/</id>
    <published>2022-01-17T15:32:48.000Z</published>
    <updated>2022-01-17T15:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="生成器表达式和列表推导式的区别"><a href="#生成器表达式和列表推导式的区别" class="headerlink" title="生成器表达式和列表推导式的区别:"></a>生成器表达式和列表推导式的区别:</h2><ul><li>列表推导式比较耗内存. 一次性加载. 生成器表达式几乎不占用内存. 使用的时候才分<br>配和使用内存</li><li>得到的值不一样. 列表推导式得到的是一个列表. 生成器表达式获取的是一个生成器.<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2></li><li>同样一篮子鸡蛋. 列表推导式: 直接拿到一篮子鸡蛋. 生成器表达式: 拿到⼀个老母鸡. 需要<br>鸡蛋就给你下鸡蛋.</li><li>生成器的惰性机制: 生成器只有在访问的时候才取值. 说白了了. 你找他要他才给你值. 不找他<br>要. 他是不会执行的.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python基础篇02-list和tuple常用操作</title>
    <link href="http://mypeng.site/posts/d2331223/"/>
    <id>http://mypeng.site/posts/d2331223/</id>
    <published>2022-01-16T07:48:20.000Z</published>
    <updated>2022-01-16T07:48:20.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><ul><li>列表用[]定义</li><li>如果列表有多个元素,元素和元素用逗号隔开</li><li>用[下标]方式访问列表中具体的元素</li><li>下标从0开始<ul><li>列表中第一个元素下标为0</li></ul></li><li>如果下标超过列表中元素的范围,程序出错</li></ul><h2 id="list常用方法"><a href="#list常用方法" class="headerlink" title="list常用方法"></a>list常用方法</h2><ul><li><p>insert(索引, 值)</p><ul><li>往列表指定的索引位置插入指定的值</li></ul></li><li><p>append(值)</p><ul><li>在列表的最后追加指定的值</li></ul></li><li><p>extend(列表)</p><ul><li>把指定列表追加到后面,相当于两个列表合并</li></ul></li><li><p>列表名[索引] = 值</p><ul><li>修改列表元素的值</li></ul></li></ul><h3 id="代码举例："><a href="#代码举例：" class="headerlink" title="代码举例："></a>代码举例：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_add_method</span><span class="params">()</span>:</span></span><br><span class="line">    list_date = []</span><br><span class="line">    <span class="keyword">return</span> list_date</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历输出列表所以内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_data</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> data:</span><br><span class="line">        print(<span class="string">"list_data第"</span>, data.index(n), end=<span class="string">""</span>)</span><br><span class="line">        print(<span class="string">"个数据为："</span>, n)</span><br><span class="line">    print(<span class="string">"_"</span> * <span class="number">100</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    data = list_add_method()</span><br><span class="line">    data.append(<span class="string">"append在末尾添加数据"</span>)</span><br><span class="line">    get_all_data(data)</span><br><span class="line"></span><br><span class="line">    data.insert(<span class="number">0</span>, <span class="string">"insert在指定索引位置增加数据"</span>)</span><br><span class="line">    get_all_data(data)</span><br><span class="line"></span><br><span class="line">    list_extend_date = [<span class="string">"飞花"</span>, <span class="string">"血月"</span>]</span><br><span class="line">    <span class="comment"># extend方法 追加另一个列表的值到这个列表</span></span><br><span class="line">    data.extend(list_extend_date)</span><br><span class="line">    get_all_data(data)</span><br><span class="line">    </span><br><span class="line">    data[<span class="number">1</span>] = <span class="string">"修改index为1的数据为NONE"</span></span><br><span class="line">    get_all_data(data)</span><br></pre></td></tr></table></figure><h2 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h2><ul><li>del(列表名[索引])<ul><li>删除列表指定索引位置的元素</li></ul></li><li>列表名.remove(值)<ul><li>删除列表中指定值</li></ul></li><li>列表名.pop()<ul><li>删除最后一个元素</li></ul></li><li>列表名.pop(索引)<ul><li>删除指定索引位置元素</li><li>类似于del</li></ul></li><li>列表名.clear()<ul><li>删除列表所有元素</li></ul></li></ul><h3 id="代码举例：-1"><a href="#代码举例：-1" class="headerlink" title="代码举例："></a>代码举例：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_del_method</span><span class="params">()</span>:</span></span><br><span class="line">    list_date = [<span class="string">"采薇采薇，薇亦作止"</span>, <span class="string">"曰归曰归，岁亦莫止"</span>, <span class="string">"靡室靡家，猃狁之故"</span>, <span class="string">"不遑启居，猃狁之故"</span>]</span><br><span class="line">    <span class="keyword">return</span> list_date</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历输出列表所以内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_data</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> data:</span><br><span class="line">        print(<span class="string">"list_data第"</span>, data.index(n), end=<span class="string">""</span>)</span><br><span class="line">        print(<span class="string">"个数据为："</span>, n)</span><br><span class="line">    print(<span class="string">"_"</span> * <span class="number">100</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    data = list_del_method()</span><br><span class="line">    get_all_data(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">del</span> (data[<span class="number">0</span>])  <span class="comment"># 删除指定索引的数据</span></span><br><span class="line">    get_all_data(data)</span><br><span class="line"></span><br><span class="line">    data.pop(<span class="number">1</span>)  <span class="comment"># 删除指定索引数据</span></span><br><span class="line">    get_all_data(data)</span><br><span class="line"></span><br><span class="line">    data.pop()  <span class="comment"># 删除末尾数据</span></span><br><span class="line">    get_all_data(data)</span><br><span class="line"></span><br><span class="line">    data.clear()  <span class="comment"># 清空列表</span></span><br><span class="line">    get_all_data(data)</span><br></pre></td></tr></table></figure><h2 id="统计列表元素"><a href="#统计列表元素" class="headerlink" title="统计列表元素"></a>统计列表元素</h2><ul><li><p>列表名.count(值)</p><ul><li>统计指定值在列表中出现的次数</li></ul></li><li><p>列表名.index(值)</p><ul><li>计算指定值的下标</li><li>如果有多个相同的值,返回第一个值的下标</li><li>如果值不存在,程序出错</li></ul></li></ul><h3 id="代码举例：-2"><a href="#代码举例：-2" class="headerlink" title="代码举例："></a>代码举例：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_del_method</span><span class="params">()</span>:</span></span><br><span class="line">    list_date = [<span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">6</span>]</span><br><span class="line">    <span class="keyword">return</span> list_date</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历输出列表所以内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_data</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> data:</span><br><span class="line">        <span class="comment"># 列表index函数，获取当前下标的值</span></span><br><span class="line">        print(<span class="string">"list_data第"</span>, data.index(n), end=<span class="string">""</span>)</span><br><span class="line">        print(<span class="string">"个数据为："</span>, n)</span><br><span class="line">    print(<span class="string">"_"</span> * <span class="number">100</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    data = list_del_method()</span><br><span class="line">    print(<span class="string">"_"</span> * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印6在列表中出现了几次</span></span><br><span class="line">    print(<span class="string">"6在列表中出现了"</span>, data.count(<span class="number">6</span>), <span class="string">"次"</span>)</span><br><span class="line">    print(<span class="string">"_"</span> * <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h2><ul><li>列表名.sort()<ul><li>升序排序</li></ul></li><li>列表名.sort(reverse=True)<ul><li>降序排序</li></ul></li><li>列表名.reverse()<ul><li>逆置,把列表中所有的元素颠倒过来</li></ul></li></ul><h3 id="代码举例：-3"><a href="#代码举例：-3" class="headerlink" title="代码举例："></a>代码举例：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_del_method</span><span class="params">()</span>:</span></span><br><span class="line">    list_date = [<span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">6</span>]</span><br><span class="line">    <span class="keyword">return</span> list_date</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历输出列表所以内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_data</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> data:</span><br><span class="line">        <span class="comment"># 列表index函数，获取当前下标的值</span></span><br><span class="line">        print(<span class="string">"list_data第"</span>, data.index(n), end=<span class="string">""</span>)</span><br><span class="line">        print(<span class="string">"个数据为："</span>, n)</span><br><span class="line">    print(<span class="string">"_"</span> * <span class="number">100</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    data = list_del_method()</span><br><span class="line">    print(<span class="string">"_"</span> * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"升序排序"</span>)</span><br><span class="line">    data.sort()  <span class="comment"># 升序排序</span></span><br><span class="line">    get_all_data(data)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"降序排序"</span>)</span><br><span class="line">    data.sort(reverse=<span class="literal">True</span>)  <span class="comment"># 降序排序</span></span><br><span class="line">    get_all_data(data)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"逆置，反转"</span>)</span><br><span class="line">    data.reverse()</span><br><span class="line">    get_all_data(data)</span><br></pre></td></tr></table></figure><h1 id="拆包"><a href="#拆包" class="headerlink" title="拆包"></a>拆包</h1><ul><li>拆包就是把列表或者元组或者集合以及字典中的每个元素拆分出来</li><li>变量1, 变量2, 变量n = 列表名<ul><li>等号左边变量的数量要和等号右边列表中元素的数量一致</li></ul></li></ul><h1 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h1><ul><li>可以快速的生成一个比较大的列表</li><li>[x for x in range(10)]<ul><li>从1到9,9个数字</li></ul></li><li>[x for x in range(3, 100)]<ul><li>从3到99</li></ul></li><li>带条件的推导式</li><li>[x for x in range(1, 100) if x % 3 == 0]<ul><li>从1到99所有能被3整除的数字</li></ul></li></ul><h3 id="代码举例：-4"><a href="#代码举例：-4" class="headerlink" title="代码举例："></a>代码举例：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 列表推导式 定义一个长列表</span></span><br><span class="line">    <span class="comment"># 从1到99步长为2的所以数字</span></span><br><span class="line">    data = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>, <span class="number">2</span>)]</span><br><span class="line">    <span class="comment"># 从1到99所以能被3整除的数字</span></span><br><span class="line">    data1 = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>, <span class="number">2</span>) <span class="keyword">if</span> x % <span class="number">3</span> == <span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 解包list</span></span><br><span class="line">    print(*data)</span><br><span class="line">    print(*data1)</span><br></pre></td></tr></table></figure><h1 id="公共方法"><a href="#公共方法" class="headerlink" title="公共方法"></a>公共方法</h1><ul><li>dir查看对象所有的方法<ul><li>dir(变量名)</li></ul></li><li>len返回非数字类型的元素数量<ul><li>包括列表,字符串,元组等</li></ul></li><li>len(变量名)</li><li>max(列表)<ul><li>返回列表中最大的元素</li></ul></li><li>min(列表)<ul><li>返回列表中最小的元素</li></ul></li><li>值 in 列表<ul><li>判断指定的值是否在列表里面,如果在返回True,否则返回False</li><li>可以是列表,也可以是字符串和其他非数字类型</li></ul></li><li>值 not in 列表<ul><li>判断指定的值是否不在列表里面,如果不在,返回True,在返回False</li></ul></li></ul><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><ul><li>元组和列表类似,区别是元组的元素不能修改</li><li>通过()定义元组</li><li>a = ()<ul><li>定义一个空元组</li></ul></li><li>a = (1, )<ul><li>定义一个只有一个元素的元组</li></ul></li><li>a = (1, 2, 3)<ul><li>定义有三个元素的元组</li></ul></li><li>定义元组的时候可以省略()</li><li>a = 1, 2, 3</li></ul><h3 id="代码举例：-5"><a href="#代码举例：-5" class="headerlink" title="代码举例："></a>代码举例：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 元祖和列表区别式，元祖定义后不可修改</span></span><br><span class="line">    <span class="comment"># 定义一个空元祖</span></span><br><span class="line">    tuple01 = ()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义1个值得元祖，需要在值后面加，</span></span><br><span class="line">    str = (<span class="string">"Test"</span>)</span><br><span class="line">    tuple02 = (<span class="string">"Test"</span>,)</span><br><span class="line">    print(<span class="string">"str的类型为："</span>, type(str))</span><br><span class="line">    print(<span class="string">"tuple02的类型为："</span>, type(tuple02))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义元祖可省略括号</span></span><br><span class="line">    tuple03 = <span class="string">"Test"</span>, <span class="string">"我是元祖"</span>, <span class="string">"Test"</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"tuple03的类型为："</span>, type(tuple03))</span><br><span class="line">    print(*tuple03)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> tuple03:</span><br><span class="line">        print(tuple03.index(n))</span><br><span class="line">        print(tuple03.count(n))</span><br></pre></td></tr></table></figure><h2 id="元组和列表的区别"><a href="#元组和列表的区别" class="headerlink" title="元组和列表的区别"></a>元组和列表的区别</h2><ul><li>元组可以理解为一个只读的列表,除了修改元素方法不同,其他方法和列表相同</li></ul><h2 id="元组和列表的转换"><a href="#元组和列表的转换" class="headerlink" title="元组和列表的转换"></a>元组和列表的转换</h2><ul><li>列表变量 = list(元组变量)<ul><li>把元组转换为列表</li></ul></li><li>元组变量 = tuple(列表变量)<ul><li>把列表转换为元组</li></ul></li><li>在python中转化数据类型就是用, 数据类型的关键字(要转化的内容)<ul><li>要转化内容一定是可转化的</li></ul></li></ul><h3 id="代码举例：-6"><a href="#代码举例：-6" class="headerlink" title="代码举例："></a>代码举例：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 元祖和列表区别式，元祖定义后不可修改</span></span><br><span class="line">    <span class="comment"># 定义一个空元祖</span></span><br><span class="line">    tuple01 = (<span class="string">"Test"</span>, <span class="string">"我是元祖"</span>, <span class="string">"Test"</span>)</span><br><span class="line"></span><br><span class="line">    print(type(tuple01))</span><br><span class="line">    list01 = list(tuple01)</span><br><span class="line">    print(type(list01))</span><br><span class="line">    list01.append(<span class="string">"转list后可修改数据"</span>)</span><br><span class="line">    <span class="comment"># 在转回tuple</span></span><br><span class="line">    tuple02 = tuple(list01)</span><br><span class="line">    print(type(tuple02))</span><br><span class="line">    print(*tuple02)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python自动化" scheme="http://mypeng.site/categories/Python%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    
    <category term="Python自动化" scheme="http://mypeng.site/tags/Python%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>〖接口测试〗postman做接口测试09-日志调试</title>
    <link href="http://mypeng.site/posts/344e3c5b/"/>
    <id>http://mypeng.site/posts/344e3c5b/</id>
    <published>2022-01-14T16:39:30.000Z</published>
    <updated>2022-01-14T16:39:30.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>在做接口测试时，经常会因为代码写的有问题导致报错，这时通过查看日志就显得非常重要了，postman也提供了这样的功能，它允许我们在脚本中编写打印语句，查看打印的结果 ; 同时也可以查看每个请求的日志信息 。</p></blockquote><h2 id="postman日志用的是什么编程语言？"><a href="#postman日志用的是什么编程语言？" class="headerlink" title="postman日志用的是什么编程语言？"></a>postman日志用的是什么编程语言？</h2><p>在postman中编写日志打印语句使用的是JavaScript，编写的位置可以是Pre-request Script 或Tests标签中。编写打印语句如：console.log(“hello,postman”)</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/09-001.png" alt="img"> </p><h2 id="那么打印的日如何看呢-？"><a href="#那么打印的日如何看呢-？" class="headerlink" title="那么打印的日如何看呢 ？"></a>那么打印的日如何看呢 ？</h2><p>在postman中有俩个入口，第一个入口就是：view-show postman console 。</p><p>第二个入口就是左下角第三个图标 。</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/09-002.png" alt="img"> </p><h3 id="打开的日志界面"><a href="#打开的日志界面" class="headerlink" title="打开的日志界面"></a>打开的日志界面</h3><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/09-003.png" alt="img"> </p><p>这里面有几个比较实用的功能：</p><p>搜索日志：输入URL或者打印的日志就能直接搜索出我们想要的请求和日志，这对我们在众多日志中查找某一条日志是非常方便的 。</p><ul><li>按级别搜索：可以查询log,info,warning,error级别的日志 ，有助于我们更快定位到错误 。</li></ul><ul><li>查看原始报文(Show raw log)：如果习惯看原始请求报文的话，这个功能可能更方便些 。</li></ul><ul><li>隐藏请求(Hide network)：把请求都隐藏掉，只查看输出日志 。</li></ul><p>总之，通过这个功能，我们在请求接口报错时，通过打印响应的日志，就能很轻松的找到问题原因了 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="postman" scheme="http://mypeng.site/categories/postman/"/>
    
    
    <category term="postman" scheme="http://mypeng.site/tags/postman/"/>
    
  </entry>
  
  <entry>
    <title>【公开api接口】字符串加密/解密API接口</title>
    <link href="http://mypeng.site/posts/689fc75c/"/>
    <id>http://mypeng.site/posts/689fc75c/</id>
    <published>2022-01-13T15:48:20.000Z</published>
    <updated>2022-01-13T15:48:20.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="接口地址"><a href="#接口地址" class="headerlink" title="接口地址"></a>接口地址</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;api.vvhan.com&#x2F;api&#x2F;jm</span><br></pre></td></tr></table></figure><h2 id="返回格式"><a href="#返回格式" class="headerlink" title="返回格式"></a>返回格式</h2><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><h2 id="请求方式："><a href="#请求方式：" class="headerlink" title="请求方式："></a>请求方式：</h2><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><h2 id="请求示例-加密-："><a href="#请求示例-加密-：" class="headerlink" title="请求示例(加密)："></a>请求示例(加密)：</h2><blockquote><p><a href="https://api.vvhan.com/api/jm?key=自定义密码&amp;string=需要加密的内容&amp;type=en" target="_blank" rel="noopener">https://api.vvhan.com/api/jm?key=自定义密码&amp;string=需要加密的内容&amp;type=en</a></p></blockquote><h2 id="请求示例-解密-："><a href="#请求示例-解密-：" class="headerlink" title="请求示例(解密)："></a>请求示例(解密)：</h2><blockquote><p><a href="https://api.vvhan.com/api/jm?key=自定义密码&amp;string=需要解密的内容&amp;type=de" target="_blank" rel="noopener">https://api.vvhan.com/api/jm?key=自定义密码&amp;string=需要解密的内容&amp;type=de</a></p></blockquote><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><table><thead><tr><th align="left">名称</th><th align="left">必填</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">key</td><td align="left">否</td><td align="left">string</td><td align="left">自定义密匙</td></tr><tr><td align="left">string</td><td align="left">是</td><td align="left">string</td><td align="left">加/解密内容</td></tr><tr><td align="left">type</td><td align="left">否</td><td align="left">string</td><td align="left">en表示加密,de表示解密(默认)</td></tr></tbody></table><h2 id="返回数据"><a href="#返回数据" class="headerlink" title="返回数据"></a>返回数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">加密：&#123;&quot;enmissString&quot;:&quot;InFYZ0VPKzVzTkdxUWlxV1VXVnA5cmtCenRxYkNTY3JUeVwvVWtxTm16VHNjPSI&#x3D;&quot;&#125;</span><br><span class="line">解密：&#123;&quot;demissString&quot;:小韩网络&#125;</span><br></pre></td></tr></table></figure><h2 id="调用实例"><a href="#调用实例" class="headerlink" title="调用实例"></a>调用实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自行调用</span><br></pre></td></tr></table></figure><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phpheader(&#39;Content-type:text&#x2F;json;charset&#x3D;utf-8;&#39;);</span><br><span class="line">$key&#x3D;$_GET[&#39;key&#39;];</span><br><span class="line">$string&#x3D;$_GET[&#39;string&#39;];</span><br><span class="line">$type&#x3D;$_GET[&#39;type&#39;];</span><br><span class="line">$result &#x3D; file_get_contents(&#39;https:&#x2F;&#x2F;api.vvhan.com&#x2F;api&#x2F;jm?key&#x3D;&#39;.$key.&#39;&amp;string&#x3D;&#39;.$string.&#39;&amp;type&#x3D;&#39;.$type);</span><br><span class="line">echo $result;?&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="API" scheme="http://mypeng.site/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>〖接口测试〗postman做接口测试08-测试断言</title>
    <link href="http://mypeng.site/posts/2ab40ef8/"/>
    <id>http://mypeng.site/posts/2ab40ef8/</id>
    <published>2022-01-13T14:28:02.000Z</published>
    <updated>2022-01-13T14:28:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>如果没有断言这个功能，那我们的测试就只能是通过我们人工比较预期结果和实际结果是否一致。有了这个功能就为我们做自动化提供了条件，postman中的断言也是非常方便的 。</p></blockquote><h1 id="我们先来了解下postman断言的一些特点-，具体如下"><a href="#我们先来了解下postman断言的一些特点-，具体如下" class="headerlink" title="我们先来了解下postman断言的一些特点 ，具体如下"></a>我们先来了解下postman断言的一些特点 ，具体如下</h1><h3 id="断言编写位置：Tests标签"><a href="#断言编写位置：Tests标签" class="headerlink" title="断言编写位置：Tests标签"></a>断言编写位置：Tests标签</h3><h3 id="断言所用语言：JavaScript"><a href="#断言所用语言：JavaScript" class="headerlink" title="断言所用语言：JavaScript"></a>断言所用语言：JavaScript</h3><h3 id="断言执行顺序：在响应体数据返回后执行-。"><a href="#断言执行顺序：在响应体数据返回后执行-。" class="headerlink" title="断言执行顺序：在响应体数据返回后执行 。"></a>断言执行顺序：在响应体数据返回后执行 。</h3><h3 id="断言执行结果查看：Test-Results"><a href="#断言执行结果查看：Test-Results" class="headerlink" title="断言执行结果查看：Test Results"></a>断言执行结果查看：Test Results</h3><p>在上面我们介绍到，编写的断言代码是JavaScript，那如果不会写怎么办 ？ 不用担心，因为postman已经给我们内置了一些常用的断言 。用的时候，只需从右侧点击其中一个断言，就会在文本框中自动生成对应断言代码块 。</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/08-001.png" alt="img"> </p><h1 id="接下来就让我们了解一些常用断言，还是按响应的组成来划分，分别是状态行，响应头，响应体。"><a href="#接下来就让我们了解一些常用断言，还是按响应的组成来划分，分别是状态行，响应头，响应体。" class="headerlink" title="接下来就让我们了解一些常用断言，还是按响应的组成来划分，分别是状态行，响应头，响应体。"></a>接下来就让我们了解一些常用断言，还是按响应的组成来划分，分别是状态行，响应头，响应体。</h1><p>本次使用公开天气api接口演示「<a href="http://doc.tianqiapi.com/」" target="_blank" rel="noopener">http://doc.tianqiapi.com/」</a></p><p>状态行中又包括状态码，状态消息 。在postman也可以对这俩个进行断言</p><h2 id="状态行中的断言："><a href="#状态行中的断言：" class="headerlink" title="状态行中的断言："></a>状态行中的断言：</h2><h3 id="断言状态码：Status-code-code-is-200"><a href="#断言状态码：Status-code-code-is-200" class="headerlink" title="断言状态码：Status code: code is 200"></a>断言状态码：Status code: code is 200</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pm.test(<span class="string">"断言相应状态码为200"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    pm.response.to.have.status(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="断言状态消息：Status-code：code-name-has-string"><a href="#断言状态消息：Status-code：code-name-has-string" class="headerlink" title="断言状态消息：Status code：code name has string"></a>断言状态消息：Status code：code name has string</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pm.test(<span class="string">"断言响应状态消息包含OK"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    pm.response.to.have.status(<span class="string">"OK"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="响应头中的断言"><a href="#响应头中的断言" class="headerlink" title="响应头中的断言"></a>响应头中的断言</h2><h3 id="断言响应头中包含：Response-headers-Content-Type-header-check"><a href="#断言响应头中包含：Response-headers-Content-Type-header-check" class="headerlink" title="断言响应头中包含：Response headers:Content-Type header check"></a>断言响应头中包含：Response headers:Content-Type header check</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pm.test(<span class="string">"断言响应头存在'Content-Type'"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    pm.response.to.have.header(<span class="string">"Content-Type"</span>); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="断言响应体-重点"><a href="#断言响应体-重点" class="headerlink" title="断言响应体(重点)"></a>断言响应体(重点)</h2><h3 id="断言响应体中包含XXX字符串：Response-body-Contains-string"><a href="#断言响应体中包含XXX字符串：Response-body-Contains-string" class="headerlink" title="断言响应体中包含XXX字符串：Response body:Contains string"></a>断言响应体中包含XXX字符串：Response body:Contains string</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pm.test(<span class="string">"断言返回内容包含该文本"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="literal">undefined</span></span><br><span class="line">    pm.expect(pm.response.text()).to.include(<span class="string">"101010100"</span>);</span><br><span class="line">&#125;);   </span><br><span class="line"><span class="comment">//注解</span></span><br><span class="line"><span class="comment">//pm.expect(pm.response.text()).to.include("string")      获取响应文本中包含string</span></span><br></pre></td></tr></table></figure><h3 id="断言响应体等于XXX字符串：Response-body-is-equal-to-a-string"><a href="#断言响应体等于XXX字符串：Response-body-is-equal-to-a-string" class="headerlink" title="断言响应体等于XXX字符串：Response body : is equal to a string"></a>断言响应体等于XXX字符串：Response body : is equal to a string</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pm.test(<span class="string">"Body is correct"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    pm.response.to.have.body(<span class="string">"response_body_string"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//注解</span></span><br><span class="line"><span class="comment">//pm.response.to.have.body("response_body_string");   获取响应体等于response_body_string</span></span><br></pre></td></tr></table></figure><h3 id="断言响应体-json-中某个键名对应的值：Response-body-JSON-value-check"><a href="#断言响应体-json-中某个键名对应的值：Response-body-JSON-value-check" class="headerlink" title="断言响应体(json)中某个键名对应的值：Response body : JSON value check"></a>断言响应体(json)中某个键名对应的值：Response body : JSON value check</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pm.test(<span class="string">"断言相应城市为北京"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> jsonData = pm.response.json();</span><br><span class="line">    pm.expect(jsonData.city).to.eql(<span class="string">"北京"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//注解</span></span><br><span class="line"><span class="comment">//var jsonData = pm.response.json()   获取响应体，以json显示，赋值给jsonData .注意：该响应体必须返会是的json，否则会报错</span></span><br><span class="line"><span class="comment">//pm.expect(jsonData.value).to.eql("北京")  获取jsonData中键名为value的值，然后和"北京"进行比较</span></span><br></pre></td></tr></table></figure><h3 id="响应时间-一般用于性能测试"><a href="#响应时间-一般用于性能测试" class="headerlink" title="响应时间(一般用于性能测试)"></a>响应时间(一般用于性能测试)</h3><p>断言响应时间：Response time is less than 200ms</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pm.test(<span class="string">"Response time is less than 200ms"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    pm.expect(pm.response.responseTime).to.be.below(<span class="number">200</span>);   <span class="comment">//断言响应时间&lt;200ms</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="案例说明："><a href="#案例说明：" class="headerlink" title="案例说明："></a>案例说明：</h3><p>针对以下接口返回的数据进行断言：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"cityid"</span>: <span class="string">"101010100"</span>,</span><br><span class="line">    <span class="attr">"city"</span>: <span class="string">"北京"</span>,</span><br><span class="line">    <span class="attr">"update_time"</span>: <span class="string">"22:34"</span>,</span><br><span class="line">    <span class="attr">"wea"</span>: <span class="string">"晴"</span>,</span><br><span class="line">    <span class="attr">"wea_img"</span>: <span class="string">"qing"</span>,</span><br><span class="line">    <span class="attr">"tem"</span>: <span class="string">"-2"</span>,</span><br><span class="line">    <span class="attr">"tem_day"</span>: <span class="string">"3"</span>,</span><br><span class="line">    <span class="attr">"tem_night"</span>: <span class="string">"-7"</span>,</span><br><span class="line">    <span class="attr">"win"</span>: <span class="string">"南风"</span>,</span><br><span class="line">    <span class="attr">"win_speed"</span>: <span class="string">"2级"</span>,</span><br><span class="line">    <span class="attr">"win_meter"</span>: <span class="string">"5km/h"</span>,</span><br><span class="line">    <span class="attr">"air"</span>: <span class="string">"43"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="断言响应状态码为200"><a href="#断言响应状态码为200" class="headerlink" title="断言响应状态码为200"></a>断言响应状态码为200</h4><h4 id="断言city等于北京"><a href="#断言city等于北京" class="headerlink" title="断言city等于北京"></a>断言city等于北京</h4><h4 id="断言cityid包含”101010100”"><a href="#断言cityid包含”101010100”" class="headerlink" title="断言cityid包含”101010100”"></a>断言cityid包含”101010100”</h4><p>  <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/08-002.png" alt="img"> </p><blockquote><p> 总结，整体来说，如果用postman做接口测试，这个断言功能必不可少，其中我们常断言的响应体包含和JSON这俩个断言又是重重之重。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="postman" scheme="http://mypeng.site/categories/postman/"/>
    
    
    <category term="postman" scheme="http://mypeng.site/tags/postman/"/>
    
  </entry>
  
  <entry>
    <title>〖接口测试〗postman做接口测试07-批量执行用例</title>
    <link href="http://mypeng.site/posts/c4b6dbb9/"/>
    <id>http://mypeng.site/posts/c4b6dbb9/</id>
    <published>2022-01-12T15:05:36.000Z</published>
    <updated>2022-01-12T15:05:36.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p> 当我们在一个Collection中编写了很多的接口测试用例，想一起执行这批用例，在postman中是如何操作呢 ？</p></blockquote><h1 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h1><h2 id="1-选中一个Collection，点击右三角，在弹出的界面点击RUN"><a href="#1-选中一个Collection，点击右三角，在弹出的界面点击RUN" class="headerlink" title="1. 选中一个Collection，点击右三角，在弹出的界面点击RUN"></a>1. 选中一个Collection，点击右三角，在弹出的界面点击RUN</h2><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/07-001.png" alt="img"> </p><h2 id="2-这是会弹出一个叫Collection-Runner的界面，默认会把Collection中的所有用例选上"><a href="#2-这是会弹出一个叫Collection-Runner的界面，默认会把Collection中的所有用例选上" class="headerlink" title="2. 这是会弹出一个叫Collection Runner的界面，默认会把Collection中的所有用例选上."></a>2. 这是会弹出一个叫Collection Runner的界面，默认会把Collection中的所有用例选上.</h2><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/07-002.png" alt="img"> </p><h2 id="3-点击界面下方的RUN-Collection，就会对Collection选中的所有测试用例运行-。"><a href="#3-点击界面下方的RUN-Collection，就会对Collection选中的所有测试用例运行-。" class="headerlink" title="3. 点击界面下方的RUN Collection，就会对Collection选中的所有测试用例运行 。"></a>3. 点击界面下方的RUN Collection，就会对Collection选中的所有测试用例运行 。</h2><p> <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/07-003.png" alt="img"> </p><h3 id="对上面的几个红框内的功能进行简单说明："><a href="#对上面的几个红框内的功能进行简单说明：" class="headerlink" title="对上面的几个红框内的功能进行简单说明："></a>对上面的几个红框内的功能进行简单说明：</h3><p>断言统计：左上角的俩个0是统计当前Collection中断言成功的执行数和失败的执行数，如果没有编写断言默认都为0 。</p><ul><li><p>Run Summary: 运行结果总览，点击它可以看到每个请求中具体的测试断言详细信息 。</p></li><li><p>Export Result：导出运行结果，默认导出的结果json文件 。</p></li><li><p>Retry: 重新运行，点击它会把该Collection重新运行一遍</p></li><li><p>New：返回到Runner，可以重新选择用例的组合 。</p></li></ul><p>总体来说，这个功能主要是用于对一个Collection中的所有用例或部分用例进行批量运行，已达到手工回归测试的目的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="postman" scheme="http://mypeng.site/categories/postman/"/>
    
    
    <category term="postman" scheme="http://mypeng.site/tags/postman/"/>
    
  </entry>
  
  <entry>
    <title>〖接口测试〗postman做接口测试06-用例管理（Collection）</title>
    <link href="http://mypeng.site/posts/b8685e49/"/>
    <id>http://mypeng.site/posts/b8685e49/</id>
    <published>2022-01-11T15:39:50.000Z</published>
    <updated>2022-01-11T15:39:50.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="怎么解决用例满天飞的局面？"><a href="#怎么解决用例满天飞的局面？" class="headerlink" title="怎么解决用例满天飞的局面？"></a>怎么解决用例满天飞的局面？</h2><p>当我们对一个或多个系统中的很多用例进行维护时，首先想到的就是对用例进行分类管理，同时我们还要对这些做回归测试 。那么postman也提供了这样一个功能，就是Collection 。通过这个Collection就可以满足我们的上面说的需求。</p><h3 id="先对Collection功能的使用场景做个简单总结-。"><a href="#先对Collection功能的使用场景做个简单总结-。" class="headerlink" title="先对Collection功能的使用场景做个简单总结 。"></a>先对Collection功能的使用场景做个简单总结 。</h3><h4 id="用例分类管理，方便后期维护"><a href="#用例分类管理，方便后期维护" class="headerlink" title="用例分类管理，方便后期维护"></a>用例分类管理，方便后期维护</h4><h4 id="可以进行批量用例回归测试-。"><a href="#可以进行批量用例回归测试-。" class="headerlink" title="可以进行批量用例回归测试 。"></a>可以进行批量用例回归测试 。</h4><h2 id="那么Collection是如何去管理用例的呢-？"><a href="#那么Collection是如何去管理用例的呢-？" class="headerlink" title="那么Collection是如何去管理用例的呢 ？"></a>那么Collection是如何去管理用例的呢 ？</h2><p>先想象我们要测试一个系统，系统下有多个模块，每个模块下有很多的被测接口用例 。那么基于这个场景，我们来通过Collection来进行实现：</p><h4 id="1-点击Collection，点击-New-Collection，在弹出的输入框中输入Collection名称（这个就可以理解为所测试的系统）"><a href="#1-点击Collection，点击-New-Collection，在弹出的输入框中输入Collection名称（这个就可以理解为所测试的系统）" class="headerlink" title="1. 点击Collection，点击+New Collection，在弹出的输入框中输入Collection名称（这个就可以理解为所测试的系统）"></a>1. 点击Collection，点击+New Collection，在弹出的输入框中输入Collection名称（这个就可以理解为所测试的系统）</h4><p><img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/06-001.png" alt="create"></p><h4 id="2-选中新建的Collection右键，点击Add-Folder-，在弹出对话框中输入文件夹名称（这个就可以理解为系统中的模块）"><a href="#2-选中新建的Collection右键，点击Add-Folder-，在弹出对话框中输入文件夹名称（这个就可以理解为系统中的模块）" class="headerlink" title="2. 选中新建的Collection右键，点击Add Folder ，在弹出对话框中输入文件夹名称（这个就可以理解为系统中的模块）"></a>2. 选中新建的Collection右键，点击Add Folder ，在弹出对话框中输入文件夹名称（这个就可以理解为系统中的模块）</h4><p>   <img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/06-002.png" alt="create"></p><h4 id="3-选中新建的Folder，点击Add-Request-，在弹出的对话框中输入请求名称，这个就是我们所测试的接口，也可以理解为测试用例-。"><a href="#3-选中新建的Folder，点击Add-Request-，在弹出的对话框中输入请求名称，这个就是我们所测试的接口，也可以理解为测试用例-。" class="headerlink" title="3. 选中新建的Folder，点击Add Request ，在弹出的对话框中输入请求名称，这个就是我们所测试的接口，也可以理解为测试用例 。"></a>3. 选中新建的Folder，点击Add Request ，在弹出的对话框中输入请求名称，这个就是我们所测试的接口，也可以理解为测试用例 。</h4><p><img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/06-003.png" alt="create"></p><p>那么通过以上三个步骤，达到的效果就是如图所示：<br><img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/06-004.png" alt="create"></p><p>总结，通过上面的操作，我们实现了一个最简单的demo模型。但实际上，这个Collection的用处非常广，很多功能的使用都必须先创建Collection，比如用例的批量执行，Mock ，接口文档等功能 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="postman" scheme="http://mypeng.site/categories/postman/"/>
    
    
    <category term="postman" scheme="http://mypeng.site/tags/postman/"/>
    
  </entry>
  
  <entry>
    <title>〖接口测试〗postman做接口测试05-响应数据解析</title>
    <link href="http://mypeng.site/posts/9656df9f/"/>
    <id>http://mypeng.site/posts/9656df9f/</id>
    <published>2022-01-10T14:33:29.000Z</published>
    <updated>2022-01-10T14:33:29.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="什么是返回？"><a href="#什么是返回？" class="headerlink" title="什么是返回？"></a>什么是返回？</h2><p>响应数据是发送请求后经过服务器处理后返回的结果，响应是由三部分组成，分别是状态行、响应头、响应体。我们来看下<a href="https://so.csdn.net/so/search?q=postman" target="_blank" rel="noopener">postman</a>的响应数据展示 </p><p><img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/postman%E5%81%9A%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%9505-001.png" alt="百度搜索"></p><p>在postman中的响应数据展示：<br>状态行：Status：200 OK<br>响应头：Headers + Cookies，需要注意的是Cookies是包含在响应头中的，但是为了明显，工具会分开显示<br>响应体：Body</p><h2 id="返回测试什么？"><a href="#返回测试什么？" class="headerlink" title="返回测试什么？"></a>返回测试什么？</h2><p>那么这些数据对我们做接口测试有什么作用呢 ？<br>Body和Status是我们做接口测试的重点，一般来说我们都会验证响应体中的数据和响应状态码<br>Test Results 是我们编写断言后，可以查看断言的执行结果 ，所以这个对我们也很有用 。<br>Time 和Size 是我们做性能测试时，可以根据这俩个参数来对所测接口的性能做一个简单的判断。</p><h2 id="返回里有什么？"><a href="#返回里有什么？" class="headerlink" title="返回里有什么？"></a>返回里有什么？</h2><p>接下来我们再来关注下Body中的几个显示主题，分别是：Pretty，Raw，Preview .<br><img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/postman%E5%81%9A%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%9505-002.png" alt="百度搜索"></p><p>Pretty:翻译成中文就是漂亮 ， 也就是说返回的Body数据在这个标签中查看 ，都是经过格式化的，格式化后的数据看起来更加直观，所以postman默认展示的也是这个选项。比如返回html页面，它会经过格式化成HTML格式后展示，比如返回json，那么也会格式化成json格式展示 。</p><p>需要说明的是，我们所测的接口多会返回json,这时我们看json数据时，只需要点击HTML后的小三角，选择JSON即可。</p><p>Raw：翻译成中文未经过加工的，也就是原始数据 ，原始数据一般都是本文格式的，未经过格式化处理的，一般在抓包工具中都有这个选项 。</p><p>Preview：翻译成中文就是预览，这个选项一般对返回HTML的页面效果特别明显，如请求百度后返回结果，点击这个选项后就直接能查看到的页面 ，如下图 。同时这个选项和浏览器抓包中的Preview也是一样的 。<br><img src= "/img/loading1.gif" data-lazy-src="https://gitee.com/XuePengJu/PictureDependency/raw/main/blog/ArticlePictures/postman/postman%E5%81%9A%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%9505-003.png" alt="百度搜索"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="postman" scheme="http://mypeng.site/categories/postman/"/>
    
    
    <category term="postman" scheme="http://mypeng.site/tags/postman/"/>
    
  </entry>
  
  <entry>
    <title>【01】Shell特殊位置变量</title>
    <link href="http://mypeng.site/posts/3bd3916a/"/>
    <id>http://mypeng.site/posts/3bd3916a/</id>
    <published>2022-01-09T07:32:32.000Z</published>
    <updated>2022-01-09T07:32:32.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-0-获取脚本名称"><a href="#1-0-获取脚本名称" class="headerlink" title="1). $0 获取脚本名称"></a>1). $0 获取脚本名称</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun shell]# cat test.sh</span><br><span class="line">echo $0</span><br><span class="line"></span><br><span class="line">[root@aliyun shell]# sh test.sh</span><br><span class="line">test.sh</span><br><span class="line">[root@aliyun shell]#</span><br><span class="line">[root@aliyun shell]# sh /root/shell/test.sh</span><br><span class="line">/root/shell/test.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果只想获取脚本名称 basename</span></span><br><span class="line">[root@aliyun shell]# basename test.sh</span><br><span class="line">test.sh</span><br><span class="line">[root@aliyun shell]# basename /root/shell/test.sh</span><br><span class="line">test.sh</span><br><span class="line">[root@aliyun shell]#</span><br></pre></td></tr></table></figure><h2 id="2-n表示脚本的第n个参数"><a href="#2-n表示脚本的第n个参数" class="headerlink" title="2). $n表示脚本的第n个参数"></a>2). $n表示脚本的第n个参数</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 实例1</span></span><br><span class="line">[root@aliyun shell]# cat test.sh</span><br><span class="line">echo "超过9个变量不加引号"</span><br><span class="line">echo $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11</span><br><span class="line"></span><br><span class="line">echo "超过9个变量需要加花括号"</span><br><span class="line">echo $1 $2 $3 $4 $5 $6 $7 $8 $9 $&#123;10&#125; $&#123;11&#125;</span><br><span class="line"></span><br><span class="line">[root@aliyun shell]#</span><br><span class="line">[root@aliyun shell]# sh test.sh &#123;a..z&#125;</span><br><span class="line">超过9个变量不加引号</span><br><span class="line">a b c d e f g h i a0 a1</span><br><span class="line">超过9个变量需要加花括号</span><br><span class="line">a b c d e f g h i j k</span><br><span class="line">[root@aliyun shell]#</span><br><span class="line">[root@aliyun shell]# sh test.sh &#123;1..20&#125;</span><br><span class="line">超过9个变量不加引号</span><br><span class="line">1 2 3 4 5 6 7 8 9 10 11</span><br><span class="line">超过9个变量需要加花括号</span><br><span class="line">1 2 3 4 5 6 7 8 9 10 11</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 实例2</span></span><br><span class="line">[root@aliyun shell]# cat test.sh</span><br><span class="line">[ $# -ne 2 ] &amp;&amp; echo "请输入两个参数" &amp;&amp; exit 1002</span><br><span class="line">name=$1</span><br><span class="line">age=$2</span><br><span class="line">echo $name $age</span><br><span class="line"></span><br><span class="line">[root@aliyun shell]# sh test.sh xiajian 22 dd</span><br><span class="line">请输入两个参数</span><br><span class="line">[root@aliyun shell]# sh test.sh xiajian</span><br><span class="line">请输入两个参数</span><br><span class="line">[root@aliyun shell]# sh test.sh xiajian 22</span><br><span class="line">xiajian 22</span><br><span class="line">[root@aliyun shell]#</span><br></pre></td></tr></table></figure><h2 id="3-获取脚本传参的个数"><a href="#3-获取脚本传参的个数" class="headerlink" title="3). $# 获取脚本传参的个数"></a>3). $# 获取脚本传参的个数</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun shell]# cat test.sh</span><br><span class="line">echo $#</span><br><span class="line">[root@aliyun shell]# sh test.sh n1 n2 n3 n4</span><br><span class="line">4</span><br><span class="line">[root@aliyun shell]#</span><br></pre></td></tr></table></figure><h2 id="4-获取上一条命令返回结果-0-为成功-非0失败"><a href="#4-获取上一条命令返回结果-0-为成功-非0失败" class="headerlink" title="4). $? 获取上一条命令返回结果 0 为成功 非0失败"></a>4). $? 获取上一条命令返回结果 0 为成功 非0失败</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun shell]# ll</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 root root 54 Jan  9 16:09 killshell.sh</span><br><span class="line">-rw-r--r-- 1 root root  8 Jan  9 16:46 test.sh</span><br><span class="line">[root@aliyun shell]# echo $?</span><br><span class="line">0</span><br><span class="line">[root@aliyun shell]# lsl</span><br><span class="line">bash: lsl: command not found...</span><br><span class="line">[root@aliyun shell]# echo $?</span><br><span class="line">127</span><br><span class="line">[root@aliyun shell]#</span><br></pre></td></tr></table></figure><h2 id="5-获取上一个在后台运行脚本的PID"><a href="#5-获取上一个在后台运行脚本的PID" class="headerlink" title="5). $! 获取上一个在后台运行脚本的PID"></a>5). $! 获取上一个在后台运行脚本的PID</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun shell]# tail -f killshell.sh &amp;</span><br><span class="line">[1] 5268</span><br><span class="line">[root@aliyun shell]# sh test.sh &amp;</span><br><span class="line">pid=$!</span><br><span class="line">echo $pid</span><br><span class="line">sleep 5</span><br><span class="line">kill -9 $pid</span><br><span class="line"></span><br><span class="line">[root@aliyun shell]# echo $!</span><br><span class="line">5268</span><br><span class="line">[root@aliyun shell]#</span><br></pre></td></tr></table></figure><h2 id="6-shell本身的pid"><a href="#6-shell本身的pid" class="headerlink" title="6). $$ shell本身的pid"></a>6). $$ shell本身的pid</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun shell]# echo $$</span><br><span class="line">14975</span><br><span class="line">[root@aliyun shell]#</span><br></pre></td></tr></table></figure><h2 id="7-获取所有参数列表"><a href="#7-获取所有参数列表" class="headerlink" title="7). $@ 获取所有参数列表"></a>7). $@ 获取所有参数列表</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun shell]# cat test.sh</span><br><span class="line">echo $@</span><br><span class="line">[root@aliyun shell]# sh test.sh &#123;a..z&#125;</span><br><span class="line">a b c d e f g h i j k l m n o p q r s t u v w x y z</span><br></pre></td></tr></table></figure><h2 id="8-获取所有参数列表"><a href="#8-获取所有参数列表" class="headerlink" title="8)$* 获取所有参数列表"></a>8)$* 获取所有参数列表</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun shell]# cat test.sh</span><br><span class="line">echo $*</span><br><span class="line">[root@aliyun shell]# sh test.sh &#123;a..z&#125;</span><br><span class="line">a b c d e f g h i j k l m n o p q r s t u v w x y z</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> $*不加引号和<span class="variable">$@</span>一样,在循环里加引号时，“<span class="variable">$@</span>”会把引起来的内容作为一个变量</span></span><br><span class="line">[root@aliyun shell]# set -- "I am" xiajian student</span><br><span class="line">[root@aliyun shell]# echo $*</span><br><span class="line">I am xiajian student</span><br><span class="line">[root@aliyun shell]# echo $@</span><br><span class="line">I am xiajian student</span><br><span class="line">[root@aliyun shell]# for i in $*;do echo $i;done</span><br><span class="line">I</span><br><span class="line">am</span><br><span class="line">xiajian</span><br><span class="line">student</span><br><span class="line">[root@aliyun shell]# for i in $@;do echo $i;done</span><br><span class="line">I</span><br><span class="line">am</span><br><span class="line">xiajian</span><br><span class="line">student</span><br><span class="line">[root@aliyun shell]# for i in "$@";do echo $i;done</span><br><span class="line">I am</span><br><span class="line">xiajian</span><br><span class="line">student</span><br><span class="line">[root@aliyun shell]# for i in "$*";do echo $i;done</span><br><span class="line">I am xiajian student</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Shell脚本" scheme="http://mypeng.site/categories/Shell%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="Shell脚本" scheme="http://mypeng.site/tags/Shell%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>【测试工具】Charles破解</title>
    <link href="http://mypeng.site/posts/ea42950b/"/>
    <id>http://mypeng.site/posts/ea42950b/</id>
    <published>2022-01-01T14:50:55.000Z</published>
    <updated>2022-01-01T14:50:55.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Charles破解"><a href="#Charles破解" class="headerlink" title="Charles破解"></a>Charles破解</h2><p><a href="http://www.charles.ren" target="_blank" rel="noopener">http://www.charles.ren</a></p><h5 id="进入上面的网站，随意输入一个Registered-Name，点击「生成」"><a href="#进入上面的网站，随意输入一个Registered-Name，点击「生成」" class="headerlink" title="进入上面的网站，随意输入一个Registered Name，点击「生成」"></a>进入上面的网站，随意输入一个Registered Name，点击「生成」</h5><p>如：admin123则生成 772CD45F2C5839B6D3</p><p> <img src= "/img/loading1.gif" data-lazy-src="/img/charles_20220101225450.png" alt="img"> </p><h5 id="打开charles-help-register，输入刚刚生成的，然后就激活成功啦"><a href="#打开charles-help-register，输入刚刚生成的，然后就激活成功啦" class="headerlink" title="打开charles-help-register，输入刚刚生成的，然后就激活成功啦"></a>打开charles-help-register，输入刚刚生成的，然后就激活成功啦</h5><p> <img src= "/img/loading1.gif" data-lazy-src="/img/8B2FEFE6-9051-432B-BAED-7B76EFA85FE1.png" alt="img"> </p><p> <img src= "/img/loading1.gif" data-lazy-src="/img/1EE1E433-AB1C-436F-95B0-EFDA18C2BE82.png" alt="img"> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Charles" scheme="http://mypeng.site/categories/Charles/"/>
    
    
    <category term="Charles" scheme="http://mypeng.site/tags/Charles/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客备份—妈妈再也不用担心你使用hexo写博客</title>
    <link href="http://mypeng.site/posts/a3886b70/"/>
    <id>http://mypeng.site/posts/a3886b70/</id>
    <published>2022-01-01T09:09:02.000Z</published>
    <updated>2022-01-01T09:09:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>今天搜了下hexo博客备份，发现好多都是用git命令备份的，于是推荐款好用的hexo备份插件：</p><p><a href="https://github.com/coneycode/hexo-git-backup" target="_blank" rel="noopener">hexo-git-backup</a></p><h2 id="git-backup使用说明-翻译至README-："><a href="#git-backup使用说明-翻译至README-：" class="headerlink" title="git-backup使用说明(翻译至README)："></a><strong>git-backup使用说明(翻译至README)：</strong></h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h3><p>如果您的hexo版本是2.xx，则应安装如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ npm install hexo-git-backup@<span class="number">0</span>.<span class="number">0</span>.<span class="number">91</span> --save</span><br></pre></td></tr></table></figure><p>如果版本是3.xx，你应该安装如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a><strong>更新</strong></h3><p>(windows不需要$符)</p><p>如果使用–save进行安装，则在更新时必须先删除。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ npm remove hexo-git-backup</span><br><span class="line"></span><br><span class="line">$ npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a><strong>配置</strong></h3><p>你应该配置这个文件_config.yml如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">backup:</span><br><span class="line"></span><br><span class="line">    type: git</span><br><span class="line"></span><br><span class="line">    repository:</span><br><span class="line"></span><br><span class="line">      github: git@github.com:xxx&#x2F;xxx.git,branchName</span><br><span class="line"></span><br><span class="line">      gitcafe: git@github.com:xxx&#x2F;xxx.git,branchName</span><br></pre></td></tr></table></figure><p>比如博主就新建了个backup分支用于备份</p><p>博主的配置如下</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">backup:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">type</span>: <span class="title">git</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">message</span>: <span class="title">backup</span> <span class="title">my</span> <span class="title">blog</span> <span class="title">of</span> <span class="title">https</span>://<span class="title">honjun.github.io</span>/</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">repository</span>:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">github</span>: <span class="title">https</span>://<span class="title">github.com</span>/<span class="title">honjun</span>/<span class="title">honjun.github.io.git</span>,<span class="title">backup</span></span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a><strong>使用</strong></h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hexo backup</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hexo b</span><br></pre></td></tr></table></figure><p>Options</p><p>如果你要备份你的主题，只需添加theme: your theme name,your theme name在_config.yml。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">backup:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">theme:</span> <span class="string">coney,landscape,xxx</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">repository:</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">github:</span> <span class="string">git@github.com:xxx/xxx.git,branchName</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">gitcafe:</span> <span class="string">git@github.com:xxx/xxx.git,branchName</span></span><br></pre></td></tr></table></figure><p><strong>注意：如果您按照上述方式操作，themes/coney/.git则会删除目录</strong></p><p>如果你想DIY提交消息，只需添加“消息：更新xxx”。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">backup:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">message:</span> <span class="string">update</span> <span class="string">xxx</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">repository:</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">github:</span> <span class="string">git@github.com:xxx/xxx.git,branchName</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">gitcafe:</span> <span class="string">git@github.com:xxx/xxx.git,branchName</span></span><br></pre></td></tr></table></figure><p>现在你可以备份所有的博客！</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a><strong>问题</strong></h3><p>您的计算机许可可能会造成一些麻烦。</p><p><strong>错误：EISDIR，打开是由权限引起的。只要做’sudo hexo b’</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo hexo b</span><br></pre></td></tr></table></figure><p>参考<a href="https://www.v2ex.com/t/143022" target="_blank" rel="noopener">hexo 的备份插件</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Hexo" scheme="http://mypeng.site/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://mypeng.site/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>App自动化测试（一）之环境搭建</title>
    <link href="http://mypeng.site/posts/baaef441/"/>
    <id>http://mypeng.site/posts/baaef441/</id>
    <published>2021-12-26T06:28:25.000Z</published>
    <updated>2021-12-26T06:28:25.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="App自动化测试环境搭建"><a href="#App自动化测试环境搭建" class="headerlink" title="App自动化测试环境搭建"></a>App自动化测试环境搭建</h2><h2 id="一、准备jdk环境"><a href="#一、准备jdk环境" class="headerlink" title="一、准备jdk环境"></a>一、准备jdk环境</h2><p><a href="http://mypeng.site/post/54eecc7d.html">jdk安装和配置环境变量</a></p><h2 id="二、准备SDK环境"><a href="#二、准备SDK环境" class="headerlink" title="二、准备SDK环境"></a>二、准备SDK环境</h2><h4 id="1、-ADT-Bundle下载"><a href="#1、-ADT-Bundle下载" class="headerlink" title="1、 ADT Bundle下载"></a>1、 <a href="https://www.androiddevtools.cn/" target="_blank" rel="noopener">ADT Bundle下载</a></h4><p>ADT Bundle包含了Eclipse、ADT插件和SDK Tools，是已经集成好的IDE，只需安装好Jdk即可开始开发，推荐初学者下载ADT Bundle，不用再折腾开发环境。</p><p>下载adt-bundle-windows-x64.zip</p><p>链接：<a href="https://pan.baidu.com/s/1ZHKmPcbV4NVvZwoDzdAKpg" target="_blank" rel="noopener">https://pan.baidu.com/s/1ZHKmPcbV4NVvZwoDzdAKpg</a><br>提取码：2gf7</p><h4 id="2、ADT-Bundle安装"><a href="#2、ADT-Bundle安装" class="headerlink" title="2、ADT Bundle安装"></a>2、ADT Bundle安装</h4><p>把下载好的 adt-bundle-windows-x86_64-20140702.zip 解压即可。</p><p> <img src= "/img/loading1.gif" data-lazy-src="/img/environment/1895590-20200229210636360-1610818154.png" alt="img">  </p><h4 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h4><ol><li><h5 id="点击此电脑右击–-gt-gt-点击属性"><a href="#点击此电脑右击–-gt-gt-点击属性" class="headerlink" title="点击此电脑右击–&gt;&gt;点击属性"></a>点击此电脑右击–&gt;&gt;点击属性</h5></li></ol><p><img src= "/img/loading1.gif" data-lazy-src="/img/environment/1895590-20200229210702614-864284209.png" alt="img"></p><ol start="2"><li><h5 id="配置SDK环境变量"><a href="#配置SDK环境变量" class="headerlink" title="配置SDK环境变量"></a>配置SDK环境变量</h5></li></ol><p>变量名：ANDROID_HOME</p><p>变量值：D:\Program Files (x86)\adt-bundle-windows-x86_64-20140702\sdk（要填写你自己的地址）</p><p><img src= "/img/loading1.gif" data-lazy-src="/img/environment/1895590-20200229210742813-1698355068.png" alt="img"></p><ol start="3"><li><h5 id="在path中添加变量"><a href="#在path中添加变量" class="headerlink" title="在path中添加变量"></a>在path中添加变量</h5></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%ANDROID_HOME%\platform-tools</span><br><span class="line">%ANDROID_HOME%\tools</span><br><span class="line">%ANDROID_HOME%\build-tools\28.0.3</span><br></pre></td></tr></table></figure><h4 id="4、验证环境变量是否配置成功"><a href="#4、验证环境变量是否配置成功" class="headerlink" title="4、验证环境变量是否配置成功"></a>4、验证环境变量是否配置成功</h4><p>在cmd窗口输入，adb 和 aapt验证环境变量是否配置成功。（** <em>注意：如果环境变量配置确定无误，但是输入命令出不来，就重启下电脑</em>）</p><p><img src= "/img/loading1.gif" data-lazy-src="/img/environment/1895590-20200229210909009-805568491.png" alt="img"></p><p><img src= "/img/loading1.gif" data-lazy-src="/img/environment/1895590-20200229210835166-2050290710.png" alt="img"></p><h2 id="三、安装Appium"><a href="#三、安装Appium" class="headerlink" title="三、安装Appium"></a>三、安装Appium</h2><p>appium 是一个自动化测试开源工具，支持 iOS 平台和 Android 平台上的原生应用，web应用和混合应用。</p><h4 id="1、Appium下载"><a href="#1、Appium下载" class="headerlink" title="1、Appium下载"></a>1、<a href="https://github.com/appium/appium-desktop/releases/tag/v1.13.0" target="_blank" rel="noopener">Appium下载</a></h4><p>百度云下载：<br>链接：<a href="https://pan.baidu.com/s/1Di8Qh5NEYeSmQoVFqH6crQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1Di8Qh5NEYeSmQoVFqH6crQ</a><br>提取码：huiq</p><h4 id="2、Appium安装"><a href="#2、Appium安装" class="headerlink" title="2、Appium安装"></a>2、Appium安装</h4><p><img src= "/img/loading1.gif" data-lazy-src="/img/environment/1895590-20200229211000223-187798199.png" alt="img"></p><ol><li><p>点击Appium-windows-1.13.0.exe进行安装。<br><img src= "/img/loading1.gif" data-lazy-src="/img/environment/1895590-20200229211032271-1280305583.png" alt="img"></p></li><li><p>选择 仅为我安装，点击安装。</p></li></ol><p><img src= "/img/loading1.gif" data-lazy-src="/img/environment/1895590-20200229211014622-396878393.png" alt="img"></p><ol start="3"><li>安装完成后打开后，可能会提示更新，切记莫更新！！</li></ol><h2 id="四、安装模拟器，或者使用真机"><a href="#四、安装模拟器，或者使用真机" class="headerlink" title="四、安装模拟器，或者使用真机"></a>四、安装模拟器，或者使用真机</h2><h5 id="模拟器推荐："><a href="#模拟器推荐：" class="headerlink" title="模拟器推荐："></a>模拟器推荐：</h5><p> <a href="https://www.ldmnq.com/" target="_blank" rel="noopener">【雷电】</a></p><p> <a href="https://www.yeshen.com/" target="_blank" rel="noopener">【夜神】</a></p><h2 id="五、安装Appium-Python-Client库"><a href="#五、安装Appium-Python-Client库" class="headerlink" title="五、安装Appium-Python-Client库"></a>五、安装Appium-Python-Client库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Copypip install appium-python-client</span><br><span class="line"><span class="comment"># 下载不成功可以加上国内镜像</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">镜像：</span></span><br><span class="line"><span class="string">（1）阿里云 http://mirrors.aliyun.com/pypi/simple/</span></span><br><span class="line"><span class="string">（2）豆瓣http://pypi.douban.com/simple/</span></span><br><span class="line"><span class="string">（3）清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/</span></span><br><span class="line"><span class="string">（4）中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple/</span></span><br><span class="line"><span class="string">（5）华中科技大学http://pypi.hustunique.com/</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">pip install appium-python-client -i <span class="string">"https://pypi.doubanio.com/simple/"</span></span><br></pre></td></tr></table></figure><h3 id="至此，环境搭建已完成。"><a href="#至此，环境搭建已完成。" class="headerlink" title="至此，环境搭建已完成。"></a>至此，环境搭建已完成。</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Appium" scheme="http://mypeng.site/categories/Appium/"/>
    
    
    <category term="Appium" scheme="http://mypeng.site/tags/Appium/"/>
    
  </entry>
  
  <entry>
    <title>【DDSNTO教程】-利用软路由插件DDNSTO实现内网穿透</title>
    <link href="http://mypeng.site/posts/96032b58/"/>
    <id>http://mypeng.site/posts/96032b58/</id>
    <published>2021-12-21T15:21:13.000Z</published>
    <updated>2021-12-21T15:21:13.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>这个插件是由小宝大神开发的, 感谢~</p></blockquote><blockquote><p><strong>傻 瓜 式 操 作 , 一 看 就 会 的 那 种 . . . 大 神 绕 道~</strong></p></blockquote><h2 id="一、准备条件"><a href="#一、准备条件" class="headerlink" title="一、准备条件"></a>一、准备条件</h2><p>一台Openwrt LEDE软路由系统<br>微信号<br>要映射的主机(网站&amp;管理后台)</p><h2 id="二、开始操作"><a href="#二、开始操作" class="headerlink" title="二、开始操作"></a>二、开始操作</h2><p>进入你的Openwrt LEDE后台Web页面, 点击酷软</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://img-blog.csdnimg.cn/img_convert/c22919ee98f8f3de883ba34fd536bf22.png" alt="打开酷软中心"> </p><p>点击未安装, 找到DDNS插件, 点击安装<br>等待安装完毕后, 点击这里的链接</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://img-blog.csdnimg.cn/img_convert/6287cb29e71dc08ea16143ec925f4ba1.png" alt=""> </p><p>再点击右上角的微信, 使用微信扫码登陆后, 你会发现右上角就出现了属于你的令牌, 把他输入到上图的token中即可<br>勾选开启ddnsto, 再点击保存, 这时候你的网络中的服务就开启了</p><h2 id="三、设置映射"><a href="#三、设置映射" class="headerlink" title="三、设置映射"></a>三、设置映射</h2><p>回到刚刚的微信登陆的网页, 点击添加域名映射</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://img-blog.csdnimg.cn/img_convert/97d4a2e51b47a9d9aa7f392e98aab1b3.png" alt="添加映射"> </p><p>成功后你, 会看到下图,这时候你可以点击这个域名, 就可以进入到你的网站啦, 如果提示还未成功, 你就等个十几秒再次刷新网页即可.</p><h2 id="四、官方教程："><a href="#四、官方教程：" class="headerlink" title="四、官方教程："></a>四、官方教程：</h2><blockquote><p><a href="https://doc.linkease.com/zh/guide/ddnsto/" target="_blank" rel="noopener">https://doc.linkease.com/zh/guide/ddnsto/</a></p></blockquote><p> <img src= "/img/loading1.gif" data-lazy-src="/img/ddsnto_step.png" alt=""> </p><h2 id="五、声明"><a href="#五、声明" class="headerlink" title="五、声明"></a>五、声明</h2><p>这种内网穿透的方法, 偏向私人访问, 因为在一个浏览器中第一次访问的话, 是要先进行微信验证才可以访问你设置的网站的. 这是为了安全考虑, 暂时没有去除的方法~</p><h3 id="…Over…"><a href="#…Over…" class="headerlink" title="…Over…"></a>…Over…</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="博客" scheme="http://mypeng.site/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>【工具分享】DDNSTO 简单、快速的内网穿透工具</title>
    <link href="http://mypeng.site/posts/f6c5d65f/"/>
    <id>http://mypeng.site/posts/f6c5d65f/</id>
    <published>2021-12-20T16:07:00.000Z</published>
    <updated>2021-12-20T16:07:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="随时随地抵达你的-私人网络"><a href="#随时随地抵达你的-私人网络" class="headerlink" title="随时随地抵达你的 私人网络"></a>随时随地抵达你的 私人网络</h3><p>简单、快速的内网穿透工具，不受<br>网络限制，全局掌控您的私人设备</p><p>DDNSTO 由 <a href="https://koolshare.cn/space-uid-2380.html" target="_blank" rel="noopener">KoolShare (opens new window)</a>@小宝 开发，是一款稳定、快速、简单易用的内网穿透工具。 让用户在公司、旅行途中都能够使用浏览器方便的访问家庭内的网络设备。</p><p>目前市面上的穿透工具都有各种小缺点，有的需要电脑安装客户端并且要支付几百块钱的年费、frp需要自行购买云服务器并且配置过程对小白用户来说也比较复杂。</p><p><strong>DDNSTO 解决了常见穿透工具年费贵、配置复杂的问题，让小白用户几分钟就能搞定内网穿透。</strong></p><p>DDNSTO 的优秀之处：</p><ol><li>无需公网 IP，不被网络环境限制</li><li>无需购买域名或服务器，省去了服务器年费和带宽要求以及域名购买、备案等等繁琐操作</li><li>全部的安装、配置、使用都可在浏览器完成，不需要敲一行代码，对小白用户非常友好</li><li>支持http2，访问家庭内部网络速度更快</li><li>独家的远程应用中心，让远程电脑桌面、远程下载、远程文件管理等多种丰富的功能在浏览器上就可以实现</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
