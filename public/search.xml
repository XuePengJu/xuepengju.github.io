<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【测试工具】Charles破解</title>
      <link href="/posts/ea42950b"/>
      <url>/posts/ea42950b</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Charles破解"><a href="#Charles破解" class="headerlink" title="Charles破解"></a>Charles破解</h2><p><a href="http://www.charles.ren" target="_blank" rel="noopener">http://www.charles.ren</a></p><h5 id="进入上面的网站，随意输入一个Registered-Name，点击「生成」"><a href="#进入上面的网站，随意输入一个Registered-Name，点击「生成」" class="headerlink" title="进入上面的网站，随意输入一个Registered Name，点击「生成」"></a>进入上面的网站，随意输入一个Registered Name，点击「生成」</h5><p>如：admin123则生成 772CD45F2C5839B6D3</p><p> <img src= "/img/loading1.gif" data-lazy-src="/img/charles_20220101225450.png" alt="img"> </p><h5 id="打开charles-help-register，输入刚刚生成的，然后就激活成功啦"><a href="#打开charles-help-register，输入刚刚生成的，然后就激活成功啦" class="headerlink" title="打开charles-help-register，输入刚刚生成的，然后就激活成功啦"></a>打开charles-help-register，输入刚刚生成的，然后就激活成功啦</h5><p> <img src= "/img/loading1.gif" data-lazy-src="/img/8B2FEFE6-9051-432B-BAED-7B76EFA85FE1.png" alt="img"> </p><p> <img src= "/img/loading1.gif" data-lazy-src="/img/1EE1E433-AB1C-436F-95B0-EFDA18C2BE82.png" alt="img"> </p>]]></content>
      
      
      <categories>
          
          <category> Charles </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Charles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客备份—妈妈再也不用担心你使用hexo写博客</title>
      <link href="/posts/a3886b70"/>
      <url>/posts/a3886b70</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>今天搜了下hexo博客备份，发现好多都是用git命令备份的，于是推荐款好用的hexo备份插件：</p><p><a href="https://github.com/coneycode/hexo-git-backup" target="_blank" rel="noopener">hexo-git-backup</a></p><h2 id="git-backup使用说明-翻译至README-："><a href="#git-backup使用说明-翻译至README-：" class="headerlink" title="git-backup使用说明(翻译至README)："></a><strong>git-backup使用说明(翻译至README)：</strong></h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h3><p>如果您的hexo版本是2.xx，则应安装如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ npm install hexo-git-backup@<span class="number">0</span>.<span class="number">0</span>.<span class="number">91</span> --save</span><br></pre></td></tr></table></figure><p>如果版本是3.xx，你应该安装如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a><strong>更新</strong></h3><p>(windows不需要$符)</p><p>如果使用–save进行安装，则在更新时必须先删除。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ npm remove hexo-git-backup</span><br><span class="line"></span><br><span class="line">$ npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a><strong>配置</strong></h3><p>你应该配置这个文件_config.yml如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">backup:</span><br><span class="line"></span><br><span class="line">    type: git</span><br><span class="line"></span><br><span class="line">    repository:</span><br><span class="line"></span><br><span class="line">      github: git@github.com:xxx&#x2F;xxx.git,branchName</span><br><span class="line"></span><br><span class="line">      gitcafe: git@github.com:xxx&#x2F;xxx.git,branchName</span><br></pre></td></tr></table></figure><p>比如博主就新建了个backup分支用于备份</p><p>博主的配置如下</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">backup:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">type</span>: <span class="title">git</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">message</span>: <span class="title">backup</span> <span class="title">my</span> <span class="title">blog</span> <span class="title">of</span> <span class="title">https</span>://<span class="title">honjun.github.io</span>/</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">repository</span>:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">github</span>: <span class="title">https</span>://<span class="title">github.com</span>/<span class="title">honjun</span>/<span class="title">honjun.github.io.git</span>,<span class="title">backup</span></span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a><strong>使用</strong></h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hexo backup</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">hexo b</span><br></pre></td></tr></table></figure><p>Options</p><p>如果你要备份你的主题，只需添加theme: your theme name,your theme name在_config.yml。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">backup:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">theme:</span> <span class="string">coney,landscape,xxx</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">repository:</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">github:</span> <span class="string">git@github.com:xxx/xxx.git,branchName</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">gitcafe:</span> <span class="string">git@github.com:xxx/xxx.git,branchName</span></span><br></pre></td></tr></table></figure><p><strong>注意：如果您按照上述方式操作，themes/coney/.git则会删除目录</strong></p><p>如果你想DIY提交消息，只需添加“消息：更新xxx”。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">backup:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">message:</span> <span class="string">update</span> <span class="string">xxx</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">repository:</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">github:</span> <span class="string">git@github.com:xxx/xxx.git,branchName</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">gitcafe:</span> <span class="string">git@github.com:xxx/xxx.git,branchName</span></span><br></pre></td></tr></table></figure><p>现在你可以备份所有的博客！</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a><strong>问题</strong></h3><p>您的计算机许可可能会造成一些麻烦。</p><p><strong>错误：EISDIR，打开是由权限引起的。只要做’sudo hexo b’</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo hexo b</span><br></pre></td></tr></table></figure><p>参考<a href="https://www.v2ex.com/t/143022" target="_blank" rel="noopener">hexo 的备份插件</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>App自动化测试（一）之环境搭建</title>
      <link href="/posts/baaef441"/>
      <url>/posts/baaef441</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="App自动化测试环境搭建"><a href="#App自动化测试环境搭建" class="headerlink" title="App自动化测试环境搭建"></a>App自动化测试环境搭建</h2><h2 id="一、准备jdk环境"><a href="#一、准备jdk环境" class="headerlink" title="一、准备jdk环境"></a>一、准备jdk环境</h2><p><a href="http://mypeng.site/post/54eecc7d.html">jdk安装和配置环境变量</a></p><h2 id="二、准备SDK环境"><a href="#二、准备SDK环境" class="headerlink" title="二、准备SDK环境"></a>二、准备SDK环境</h2><h4 id="1、-ADT-Bundle下载"><a href="#1、-ADT-Bundle下载" class="headerlink" title="1、 ADT Bundle下载"></a>1、 <a href="https://www.androiddevtools.cn/" target="_blank" rel="noopener">ADT Bundle下载</a></h4><p>ADT Bundle包含了Eclipse、ADT插件和SDK Tools，是已经集成好的IDE，只需安装好Jdk即可开始开发，推荐初学者下载ADT Bundle，不用再折腾开发环境。</p><p>下载adt-bundle-windows-x64.zip</p><p>链接：<a href="https://pan.baidu.com/s/1ZHKmPcbV4NVvZwoDzdAKpg" target="_blank" rel="noopener">https://pan.baidu.com/s/1ZHKmPcbV4NVvZwoDzdAKpg</a><br>提取码：2gf7</p><h4 id="2、ADT-Bundle安装"><a href="#2、ADT-Bundle安装" class="headerlink" title="2、ADT Bundle安装"></a>2、ADT Bundle安装</h4><p>把下载好的 adt-bundle-windows-x86_64-20140702.zip 解压即可。</p><p> <img src= "/img/loading1.gif" data-lazy-src="/img/environment/1895590-20200229210636360-1610818154.png" alt="img">  </p><h4 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h4><ol><li><h5 id="点击此电脑右击–-gt-gt-点击属性"><a href="#点击此电脑右击–-gt-gt-点击属性" class="headerlink" title="点击此电脑右击–&gt;&gt;点击属性"></a>点击此电脑右击–&gt;&gt;点击属性</h5></li></ol><p><img src= "/img/loading1.gif" data-lazy-src="/img/environment/1895590-20200229210702614-864284209.png" alt="img"></p><ol start="2"><li><h5 id="配置SDK环境变量"><a href="#配置SDK环境变量" class="headerlink" title="配置SDK环境变量"></a>配置SDK环境变量</h5></li></ol><p>变量名：ANDROID_HOME</p><p>变量值：D:\Program Files (x86)\adt-bundle-windows-x86_64-20140702\sdk（要填写你自己的地址）</p><p><img src= "/img/loading1.gif" data-lazy-src="/img/environment/1895590-20200229210742813-1698355068.png" alt="img"></p><ol start="3"><li><h5 id="在path中添加变量"><a href="#在path中添加变量" class="headerlink" title="在path中添加变量"></a>在path中添加变量</h5></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%ANDROID_HOME%\platform-tools</span><br><span class="line">%ANDROID_HOME%\tools</span><br><span class="line">%ANDROID_HOME%\build-tools\28.0.3</span><br></pre></td></tr></table></figure><h4 id="4、验证环境变量是否配置成功"><a href="#4、验证环境变量是否配置成功" class="headerlink" title="4、验证环境变量是否配置成功"></a>4、验证环境变量是否配置成功</h4><p>在cmd窗口输入，adb 和 aapt验证环境变量是否配置成功。（** <em>注意：如果环境变量配置确定无误，但是输入命令出不来，就重启下电脑</em>）</p><p><img src= "/img/loading1.gif" data-lazy-src="/img/environment/1895590-20200229210909009-805568491.png" alt="img"></p><p><img src= "/img/loading1.gif" data-lazy-src="/img/environment/1895590-20200229210835166-2050290710.png" alt="img"></p><h2 id="三、安装Appium"><a href="#三、安装Appium" class="headerlink" title="三、安装Appium"></a>三、安装Appium</h2><p>appium 是一个自动化测试开源工具，支持 iOS 平台和 Android 平台上的原生应用，web应用和混合应用。</p><h4 id="1、Appium下载"><a href="#1、Appium下载" class="headerlink" title="1、Appium下载"></a>1、<a href="https://github.com/appium/appium-desktop/releases/tag/v1.13.0" target="_blank" rel="noopener">Appium下载</a></h4><p>百度云下载：<br>链接：<a href="https://pan.baidu.com/s/1Di8Qh5NEYeSmQoVFqH6crQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1Di8Qh5NEYeSmQoVFqH6crQ</a><br>提取码：huiq</p><h4 id="2、Appium安装"><a href="#2、Appium安装" class="headerlink" title="2、Appium安装"></a>2、Appium安装</h4><p><img src= "/img/loading1.gif" data-lazy-src="/img/environment/1895590-20200229211000223-187798199.png" alt="img"></p><ol><li><p>点击Appium-windows-1.13.0.exe进行安装。<br><img src= "/img/loading1.gif" data-lazy-src="/img/environment/1895590-20200229211032271-1280305583.png" alt="img"></p></li><li><p>选择 仅为我安装，点击安装。</p></li></ol><p><img src= "/img/loading1.gif" data-lazy-src="/img/environment/1895590-20200229211014622-396878393.png" alt="img"></p><ol start="3"><li>安装完成后打开后，可能会提示更新，切记莫更新！！</li></ol><h2 id="四、安装模拟器，或者使用真机"><a href="#四、安装模拟器，或者使用真机" class="headerlink" title="四、安装模拟器，或者使用真机"></a>四、安装模拟器，或者使用真机</h2><h5 id="模拟器推荐："><a href="#模拟器推荐：" class="headerlink" title="模拟器推荐："></a>模拟器推荐：</h5><p> <a href="https://www.ldmnq.com/" target="_blank" rel="noopener">【雷电】</a></p><p> <a href="https://www.yeshen.com/" target="_blank" rel="noopener">【夜神】</a></p><h2 id="五、安装Appium-Python-Client库"><a href="#五、安装Appium-Python-Client库" class="headerlink" title="五、安装Appium-Python-Client库"></a>五、安装Appium-Python-Client库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Copypip install appium-python-client</span><br><span class="line"><span class="comment"># 下载不成功可以加上国内镜像</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">镜像：</span></span><br><span class="line"><span class="string">（1）阿里云 http://mirrors.aliyun.com/pypi/simple/</span></span><br><span class="line"><span class="string">（2）豆瓣http://pypi.douban.com/simple/</span></span><br><span class="line"><span class="string">（3）清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/</span></span><br><span class="line"><span class="string">（4）中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple/</span></span><br><span class="line"><span class="string">（5）华中科技大学http://pypi.hustunique.com/</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">pip install appium-python-client -i <span class="string">"https://pypi.doubanio.com/simple/"</span></span><br></pre></td></tr></table></figure><h3 id="至此，环境搭建已完成。"><a href="#至此，环境搭建已完成。" class="headerlink" title="至此，环境搭建已完成。"></a>至此，环境搭建已完成。</h3>]]></content>
      
      
      <categories>
          
          <category> Appium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Appium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【DDSNTO教程】-利用软路由插件DDNSTO实现内网穿透</title>
      <link href="/posts/96032b58"/>
      <url>/posts/96032b58</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>这个插件是由小宝大神开发的, 感谢~</p></blockquote><blockquote><p><strong>傻 瓜 式 操 作 , 一 看 就 会 的 那 种 . . . 大 神 绕 道~</strong></p></blockquote><h2 id="一、准备条件"><a href="#一、准备条件" class="headerlink" title="一、准备条件"></a>一、准备条件</h2><p>一台Openwrt LEDE软路由系统<br>微信号<br>要映射的主机(网站&amp;管理后台)</p><h2 id="二、开始操作"><a href="#二、开始操作" class="headerlink" title="二、开始操作"></a>二、开始操作</h2><p>进入你的Openwrt LEDE后台Web页面, 点击酷软</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://img-blog.csdnimg.cn/img_convert/c22919ee98f8f3de883ba34fd536bf22.png" alt="打开酷软中心"> </p><p>点击未安装, 找到DDNS插件, 点击安装<br>等待安装完毕后, 点击这里的链接</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://img-blog.csdnimg.cn/img_convert/6287cb29e71dc08ea16143ec925f4ba1.png" alt=""> </p><p>再点击右上角的微信, 使用微信扫码登陆后, 你会发现右上角就出现了属于你的令牌, 把他输入到上图的token中即可<br>勾选开启ddnsto, 再点击保存, 这时候你的网络中的服务就开启了</p><h2 id="三、设置映射"><a href="#三、设置映射" class="headerlink" title="三、设置映射"></a>三、设置映射</h2><p>回到刚刚的微信登陆的网页, 点击添加域名映射</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://img-blog.csdnimg.cn/img_convert/97d4a2e51b47a9d9aa7f392e98aab1b3.png" alt="添加映射"> </p><p>成功后你, 会看到下图,这时候你可以点击这个域名, 就可以进入到你的网站啦, 如果提示还未成功, 你就等个十几秒再次刷新网页即可.</p><h2 id="四、官方教程："><a href="#四、官方教程：" class="headerlink" title="四、官方教程："></a>四、官方教程：</h2><blockquote><p><a href="https://doc.linkease.com/zh/guide/ddnsto/" target="_blank" rel="noopener">https://doc.linkease.com/zh/guide/ddnsto/</a></p></blockquote><p> <img src= "/img/loading1.gif" data-lazy-src="/img/ddsnto_step.png" alt=""> </p><h2 id="五、声明"><a href="#五、声明" class="headerlink" title="五、声明"></a>五、声明</h2><p>这种内网穿透的方法, 偏向私人访问, 因为在一个浏览器中第一次访问的话, 是要先进行微信验证才可以访问你设置的网站的. 这是为了安全考虑, 暂时没有去除的方法~</p><h3 id="…Over…"><a href="#…Over…" class="headerlink" title="…Over…"></a>…Over…</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工具分享】DDNSTO 简单、快速的内网穿透工具</title>
      <link href="/posts/f6c5d65f"/>
      <url>/posts/f6c5d65f</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="随时随地抵达你的-私人网络"><a href="#随时随地抵达你的-私人网络" class="headerlink" title="随时随地抵达你的 私人网络"></a>随时随地抵达你的 私人网络</h3><p>简单、快速的内网穿透工具，不受<br>网络限制，全局掌控您的私人设备</p><p>DDNSTO 由 <a href="https://koolshare.cn/space-uid-2380.html" target="_blank" rel="noopener">KoolShare (opens new window)</a>@小宝 开发，是一款稳定、快速、简单易用的内网穿透工具。 让用户在公司、旅行途中都能够使用浏览器方便的访问家庭内的网络设备。</p><p>目前市面上的穿透工具都有各种小缺点，有的需要电脑安装客户端并且要支付几百块钱的年费、frp需要自行购买云服务器并且配置过程对小白用户来说也比较复杂。</p><p><strong>DDNSTO 解决了常见穿透工具年费贵、配置复杂的问题，让小白用户几分钟就能搞定内网穿透。</strong></p><p>DDNSTO 的优秀之处：</p><ol><li>无需公网 IP，不被网络环境限制</li><li>无需购买域名或服务器，省去了服务器年费和带宽要求以及域名购买、备案等等繁琐操作</li><li>全部的安装、配置、使用都可在浏览器完成，不需要敲一行代码，对小白用户非常友好</li><li>支持http2，访问家庭内部网络速度更快</li><li>独家的远程应用中心，让远程电脑桌面、远程下载、远程文件管理等多种丰富的功能在浏览器上就可以实现</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【测试工具】Android Input命令</title>
      <link href="/posts/7de15477"/>
      <url>/posts/7de15477</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><p>input是Android系统中的一个特殊的命令，用于模拟遥控器、键盘、鼠标的各种按键操作。我们都知道Android是阉割版本的Linux系统，Linux中很多命令在Android系统中是没有的。但是他们之间并没有包含的关系，Android系统中有些特有的东西（命令、属性）在Linux中也是没有的。</p><h3 id="命令路径"><a href="#命令路径" class="headerlink" title="命令路径"></a>命令路径</h3><p>可以通过which 命令查看该命令的位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">130|superli:&#x2F; # which -a input        </span><br><span class="line">&#x2F;system&#x2F;bin&#x2F;input</span><br><span class="line">superli:&#x2F; #</span><br></pre></td></tr></table></figure><h3 id="命令概要"><a href="#命令概要" class="headerlink" title="命令概要"></a>命令概要</h3><h4 id="Android-4-4以前"><a href="#Android-4-4以前" class="headerlink" title="Android 4.4以前"></a>Android 4.4以前</h4><p>使用help命令查看命令如何使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@hwH30-U10:&#x2F; # input --help</span><br><span class="line">Error: Unknown command: --help</span><br><span class="line">usage: input ...</span><br><span class="line">       input text &lt;string&gt;</span><br><span class="line">       input keyevent &lt;key code number or name&gt;</span><br><span class="line">       input [touchscreen|touchpad] tap &lt;x&gt; &lt;y&gt;</span><br><span class="line">       input [touchscreen|touchpad] swipe &lt;x1&gt; &lt;y1&gt; &lt;x2&gt; &lt;y2&gt;</span><br><span class="line">       input trackball press</span><br><span class="line">       input trackball roll &lt;dx&gt; &lt;dy&gt;</span><br><span class="line">root@hwH30-U10:&#x2F; #</span><br></pre></td></tr></table></figure><h3 id="Android-4-4"><a href="#Android-4-4" class="headerlink" title="Android 4.4+"></a>Android 4.4+</h3><p>使用help命令查看命令如何使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">130|superli:&#x2F; # input --help</span><br><span class="line">Error: Unknown command: --help  ## 未知命令？为什么会出现这个？？？算了，不重要，可能系统抽风了。</span><br><span class="line">Usage: input [&lt;source&gt;] &lt;command&gt; [&lt;arg&gt;...]</span><br><span class="line"></span><br><span class="line">The sources are: ##模拟的输入设备类型</span><br><span class="line">      keyboard</span><br><span class="line">      mouse</span><br><span class="line">      joystick</span><br><span class="line">      touchnavigation</span><br><span class="line">      touchpad</span><br><span class="line">      trackball</span><br><span class="line">      dpad</span><br><span class="line">      stylus</span><br><span class="line">      gamepad</span><br><span class="line">      touchscreen</span><br><span class="line"></span><br><span class="line">The commands and default sources are: ## 不指定source时，命令的默认输入设备类型为：</span><br><span class="line">      text &lt;string&gt; (Default: touchscreen)</span><br><span class="line">      keyevent [--longpress] &lt;key code number or name&gt; ... (Default: keyboard)</span><br><span class="line">      tap &lt;x&gt; &lt;y&gt; (Default: touchscreen)</span><br><span class="line">      swipe &lt;x1&gt; &lt;y1&gt; &lt;x2&gt; &lt;y2&gt; [duration(ms)] (Default: touchscreen)</span><br><span class="line">      press (Default: trackball)</span><br><span class="line">      roll &lt;dx&gt; &lt;dy&gt; (Default: trackball)</span><br><span class="line">superli:&#x2F; #</span><br></pre></td></tr></table></figure><h3 id="命令解读和使用"><a href="#命令解读和使用" class="headerlink" title="命令解读和使用"></a>命令解读和使用</h3><p>后续内容主要分析Android 4.4+版本关于input命令的使用，当然4.4以前的版本也可以参考，毕竟差别并不是很大。</p><p>命令格式：input [<source>] <command> [<arg>…]</p><p>命令格式（中文版）：input [&lt;设备类型（可选）&gt;] &lt;命令&gt; [&lt;参数（可选）&gt;…]</p><p>命令格式中可以看到有两个可选的部分：</p><p>设备类型：设备类型不输入时，使用命令的默认设备类型。默认类型见下文。<br>参数：当命令没有参数时，可不输入（想了半天，想不出来什么命令不需要参数）</p><h4 id="设备类型"><a href="#设备类型" class="headerlink" title="设备类型"></a>设备类型</h4><p>sources    模拟的输入设备类型<br>keyboard    键盘<br>mouse    鼠标<br>joystick    操纵杆（玩过游戏手柄的同学应该懂吧）<br>touchnavigation    ？？触摸导航？？<br>touchpad    触摸板<br>trackball    轨迹球（啥意思？）<br>dpad    什么鬼<br>stylus    触控笔（styluses）<br>gamepad    游戏手柄<br>touchscreen    触摸屏<br>设备类型还挺丰富的，好多普通人根本接触不到，哎，我就是普通人。</p><h3 id="命令列表和默认设备类型"><a href="#命令列表和默认设备类型" class="headerlink" title="命令列表和默认设备类型"></a>命令列表和默认设备类型</h3><p>命令    默认设备类型    示例<br>text    touchscreen    input text “hello”<br>keyevent [–longpress]    keyboard    input keyevent 4<br>tap    touchscreen    input tap 500 500<br>swipe [duration(ms)]    touchscreen    input swipe 500 500 600 500 200<br>press    trackball    input press<br>roll    trackball    input roll 500 500<br>命令演练与解释<br>命令列表中，关于press和roll都是针对触控球的设备设计的，因为手中没有设备，而且这种设备现实中使用的比较少，所以就不做演示</p><p>text<br>该命令用于模拟触摸屏的虚拟键盘输入字符串。</p><p>比如，下面使用命令输入“hello”：</p><p>HWVKY:/ $ input text hello</p><p>text命令后面的字符都会以字符串的形式输入，如果恰好设备的焦点在一个可输入控件（通常为EditText）中，那么可输入控件中就会出现“hello”字样。</p><p>如果命令执行后，“hello”并没有显示，请检查一下控件是否有限定输入类型。</p><p>keyevent<br>该命令用以默认按键输入，对应的输入设备场景可能是遥控器、键盘等。</p><p>例如，下面使用命令模拟遥控器的返回键：</p><p>HWVKY:/ $ input keyevent 4</p><p>命令执行后，设备中能很明显的看到有回退动作。命令中的参数“4”，对应的是keyevent中的返回键。下面列出部分常用keyevent事件的键值列表。</p><p>Keyevent    value    备注<br>KEYCODE_BACK    4    返回键<br>KEYCODE_HOME    3    HOME键<br>KEYCODE_MENU    82    菜单键<br>KEYCODE_DPAD_UP    19    上<br>KEYCODE_DPAD_DOWN    20    下<br>KEYCODE_DPAD_LEFT    21    左<br>KEYCODE_DPAD_RIGHT    22    右<br>KEYCODE_DPAD_CENTER    23    OK键<br>KEYCODE_VOLUME_UP    24    音量+<br>KEYCODE_VOLUME_DOWN    25    音量-<br>如果列表中不满足你的需求，可以去android.view.KeyEvent.java中查看</p><p>tap<br>该命令用于模拟触摸操作，感觉就是点击一下指定位置，可以让指定的点变相的获取焦点。</p><p>例如，下面的命令，如果位于首页，500*500的坐标处恰好有一个应用图标，那么命令执行后，会打开该应用：</p><figure class="highlight plain"><figcaption><span>$ input tap 500 500```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">swipe</span><br><span class="line">该命令用于模拟手势滑动操作</span><br><span class="line"></span><br><span class="line">例如，下面的命令模拟，从500*500的坐标滑动到600*500的位置：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;HWVKY:&#x2F; $ input swipe 500 500 600 500</span><br></pre></td></tr></table></figure><p>上边的命令执行后，屏幕瞬间就会滑动，那么我要慢慢的滑动怎么办呢，看下面的命令:</p><figure class="highlight plain"><figcaption><span>$ input swipe 500 500 600 500 500```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">两个命令的区别在于第二个多了一个参数，该参数表示该滑动需要执行的时长为500ms。</span><br><span class="line"></span><br><span class="line">值得一提的是，当参数中的两个坐标点使用一个点时，秒变长按事件：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;HWVKY:&#x2F; $ input swipe 500 500 500 500 1000</span><br></pre></td></tr></table></figure><p>该命令表示：长按坐标为500*500的点1秒钟。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【测试工具】是时候扔掉 Postman 了，Apifox 真香！</title>
      <link href="/posts/de4de369"/>
      <url>/posts/de4de369</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>作为开软件开发从业者，接口调试是必不可少的一项技能，我们经常使用 Postman 工具来进行接口调试，在接口调试方面 Postman 做的非常出色。但是在整个软件开发过程中，接口调试只是其中的一部分，还有很多事情 Postman 无法完成，或者无法高效完成，比如：接口文档定义、Mock 数据、接口自动化测试等等。</p></blockquote><p>需要 Apifox 功能介绍 PPT 版本的（可用于团队内部分享/推广 Apifox），可点击以下链接下载。<br><a href="https://cdn3.apifox.cn/www/assets/ppt/Apifox介绍.pptx" target="_blank" rel="noopener">Apifox 功能介绍 ppt 格式</a><br><a href="https://cdn3.apifox.cn/www/assets/ppt/Apifox介绍.pdf" target="_blank" rel="noopener">Apifox 功能介绍 pdf 格式</a></p><h2 id="接口管理现状"><a href="#接口管理现状" class="headerlink" title="接口管理现状"></a>接口管理现状</h2><h3 id="一、常用解决方案"><a href="#一、常用解决方案" class="headerlink" title="一、常用解决方案"></a>一、常用解决方案</h3><ol><li>使用 Swagger 作为<a href="https://www.apifox.cn/" target="_blank" rel="noopener">接口文档工具</a></li><li>使用 Postman 调试接口</li><li>使用 RAP 等工具 Mock 数据</li><li>使用 JMeter 做接口自动化测试</li></ol><h3 id="二、存在的问题"><a href="#二、存在的问题" class="headerlink" title="二、存在的问题"></a>二、存在的问题</h3><p>维护不同工具之间数据一致性非常困难、低效。并且这里不仅仅是工作量的问题，更大的问题是多个系统之间数据不一致，导致协作低效、频繁出问题，开发测试人员痛苦不堪。</p><ol><li>开发人员在 Swagger 定义好文档后，接口调试的时候还需要去 Postman 再定义一遍。</li><li>前端开发 Mock 数据的时候又要去 RAP 定义一遍，还需要手动设置 Mock 规则。</li><li>测试人员需要去 JMeter 再定义一遍。</li><li>前端根据 RAP Mock 出来的数据开发完，后端根据 Swagger 定义的接口文档开发完，各自都试测试通过了，本以为可以马上上线，结果一对接发现各种问题：</li></ol><ul><li>开发过程中接口变更了，只修改了 Swagger，但是没有及时同步修改 RAP。</li><li>后端开发的接口数据类型和文档不一致，肉眼难以发现问题。</li></ul><ol><li>同样，测试在 JMeter 写好的测试用例，真正运行的时候也会发现各种不一致。</li><li>时间久了，各种不一致会越来越严重。</li></ol><h2 id="Apifox-解决方案"><a href="#Apifox-解决方案" class="headerlink" title="Apifox 解决方案"></a>Apifox 解决方案</h2><h3 id="一、如何解决这些问题"><a href="#一、如何解决这些问题" class="headerlink" title="一、如何解决这些问题"></a>一、如何解决这些问题</h3><h3 id="1、Apifox-定位"><a href="#1、Apifox-定位" class="headerlink" title="1、Apifox 定位"></a>1、Apifox 定位</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Apifox &#x3D; Postman + Swagger + Mock + JMeter</span><br></pre></td></tr></table></figure><p>通过一套系统、一份数据，解决多个系统之间的数据同步问题。只要定义好接口文档，接口调试、数据 Mock、接口测试就可以直接使用，无需再次定义；接口文档和接口开发调试使用同一个工具，接口调试完成后即可保证和接口文档定义完全一致。高效、及时、准确！</p><h3 id="2、Apifox-宗旨"><a href="#2、Apifox-宗旨" class="headerlink" title="2、Apifox 宗旨"></a>2、Apifox 宗旨</h3><p>节省研发团队的每一分钟！</p><h3 id="3、Apifox-功能"><a href="#3、Apifox-功能" class="headerlink" title="3、Apifox 功能"></a>3、Apifox 功能</h3><ol><li><strong>接口设计</strong>：Apifox 接口文档遵循 <a href="https://openapi.apifox.cn/" target="_blank" rel="noopener">OpenApi</a> 3.0 (原 Swagger)、<a href="https://json-schema.org/" target="_blank" rel="noopener">JSON Schema</a> 规范的同时，提供了非常好用的<code>可视化</code>文档管理功能，零学习成本，非常高效。并且支持在线分享接口文档。</li><li><strong>数据模型</strong>：可复用的数据结构，定义接口<code>返回数据结构</code>及<code>请求参数数据结构</code>（仅 JSON 和 XML 模式）时可直接引用。支持模型直接嵌套引用，直接 JSON/XML 智能导入，支持 oneOf、allOf 等高级组合模式。</li><li><strong>接口调试</strong>：Postman 有的功能，比如环境变量、前置/后置脚本、Cookie/Session 全局共享 等功能，Apifox 都有，并且比 Postman 更高效好用。接口运行完之后点击<code>保存为用例</code>按钮，即可生成<code>接口用例</code>，后续可直接运行接口用例，无需再输入参数，非常方便。自定义脚本 100% 兼容 Postman 语法，并且支持运行javascript、java、python、php、js、BeanShell、go、shell、ruby、lua等各种语言代码。</li><li><strong>接口用例</strong>：通常一个接口会有多种情况用例，比如<code>参数正确</code>用例、<code>参数错误</code>用例、<code>数据为空</code>用例、<code>不同数据状态</code>用例等等。运行接口用例时会自动校验数据正确性，用接口用例来调试接口非常高效。</li><li><strong>接口数据 Mock</strong>：内置 <a href="http://mockjs.com/" target="_blank" rel="noopener">Mock.js</a> 规则引擎，非常方便 mock 出各种数据，并且可以在定义数据结构的同时写好 mock 规则。支持添加“期望”，根据请求参数返回不同 mock 数据。最重要的是 Apifox <code>零配置</code> 即可 Mock 出非常人性化的数据，具体在本文后面介绍。</li><li><strong>接口自动化测试</strong>：提供接口集合测试，可以通过选择接口（或接口用例）快速创建测试集。目前接口自动化测试更多功能还在开发中，敬请期待！目标是： JMeter 有的功能基本都会有，并且要更好用。</li><li><strong>数据库操作</strong>：支持读取数据库数据，作为接口请求参数使用。支持读取数据库数据，用来校验(断言)接口请求是否成功。</li><li><strong>快捷调试</strong>：类似 Postman 的接口调试方式，主要用途为临时调试一些<code>无需文档化</code>的接口，无需提前定义接口即可快速调试。</li><li><strong>代码生成</strong>：根据接口及数据数据模型定义，系统自动生成<code>接口请求代码</code>、<code>前端业务代码</code>及<code>后端业务代码</code>。</li><li><strong>团队协作</strong>：Apifox 天生就是为团队协作而生的，接口云端实时同步更新，成熟的<code>团队/项目/成员权限</code>管理，满足各类企业的需求。</li></ol><h3 id="二、Apifox-做的不仅仅是数据打通"><a href="#二、Apifox-做的不仅仅是数据打通" class="headerlink" title="二、Apifox 做的不仅仅是数据打通"></a>二、Apifox 做的不仅仅是数据打通</h3><p>如果你认为 Apifox 只做了数据打通，来提升研发团队的效率，那就错了。Apifox 还做了非常多的创新，来提升开发人员的效率。</p><h3 id="1、接口支持“用例管理”"><a href="#1、接口支持“用例管理”" class="headerlink" title="1、接口支持“用例管理”"></a>1、接口支持“用例管理”</h3><p>通常一个接口会有多种情况用例，比如 <code>正确用例</code> <code>参数错误用例</code> <code>数据为空用例</code> <code>不同数据状态用例</code>。定义接口的时候定义好这些不同状态的用例，接口调试的时候直接运行，非常高效。</p><h3 id="2、“数据模型”定义、引用"><a href="#2、“数据模型”定义、引用" class="headerlink" title="2、“数据模型”定义、引用"></a>2、“数据模型”定义、引用</h3><p>可以独立定义数据模型，接口定义时可以直接引用数据模型，数据模型之间也可以相互引用。同样的数据结构，只需要定义一次即可多处使用；修改的时候只需要修改一处，多处实时更新，避免不一致。</p><h3 id="3、调试时“自动校验”数据结构"><a href="#3、调试时“自动校验”数据结构" class="headerlink" title="3、调试时“自动校验”数据结构"></a>3、调试时“自动校验”数据结构</h3><p>使用 Apifox 调试接口的时候，系统会根据接口文档里的定义，自动校验返回的数据结构是否正确，无需通过肉识别，也无需手动写断言脚本检测，非常高效！</p><p><img src= "/img/loading1.gif" data-lazy-src="https://pic3.zhimg.com/v2-84b60639898cf51fd75bb557e615a5d2_r.jpg" alt="img"></p><h3 id="4、“可视化”设置断言"><a href="#4、“可视化”设置断言" class="headerlink" title="4、“可视化”设置断言"></a>4、“可视化”设置断言</h3><p>设置断言：</p><p><img src= "/img/loading1.gif" data-lazy-src="https://pic4.zhimg.com/v2-09c5c04497eabbe8be8617ce8f12ea97_r.jpg" alt="img"></p><p>运行后，查看断言结果：</p><p><img src= "/img/loading1.gif" data-lazy-src="https://pic1.zhimg.com/v2-93c6ad02f0fb83ced91aaddab5299204_r.jpg" alt="img"></p><h3 id="5、“可视化”设置提取变量"><a href="#5、“可视化”设置提取变量" class="headerlink" title="5、“可视化”设置提取变量"></a>5、“可视化”设置提取变量</h3><p><img src= "/img/loading1.gif" data-lazy-src="https://pic2.zhimg.com/v2-e1bfaee9f4a6b935db7f354255dc9c5d_r.jpg" alt="img"></p><h3 id="6、支持数据库操作"><a href="#6、支持数据库操作" class="headerlink" title="6、支持数据库操作"></a>6、支持数据库操作</h3><p><img src= "/img/loading1.gif" data-lazy-src="https://pic1.zhimg.com/v2-07fcb7adc6b2e157b26c244b5c930b6c_r.jpg" alt="img"></p><h3 id="7、“零配置”Mock-出非常人性化的数据"><a href="#7、“零配置”Mock-出非常人性化的数据" class="headerlink" title="7、“零配置”Mock 出非常人性化的数据"></a>7、“零配置”Mock 出非常人性化的数据</h3><p>先放一张图对比下 Apifox 和其他同类工具 <code>零配置</code> mock 出来的数据效果：</p><p><img src= "/img/loading1.gif" data-lazy-src="https://pic1.zhimg.com/v2-cf3012a053f55cf2ecd84871c4db4394_r.jpg" alt="img"></p><p>可以看出 Apifox <code>零配置</code> Mock 出来的数据和真实情况是非常接近的，前端开发可以直接使用，而无需再手动写 mock 规则。</p><p><strong>Apifox 如何做到<code>高效率</code>、<code>零配置</code>生成非常人性化的 mock 数据</strong></p><ol><li>Apifox 根据接口定义里的数据结构、数据类型，自动生成 mock 规则。</li><li>Apifox 内置智能 mock 规则库，根据字段名、字段数据类型，智能优化自动生成的 mock 规则。如：名称包含字符串<code>image</code>的<code>string</code>类型字段，自动 mock 出一个图片地址 URL；包含字符串<code>time</code>的<code>string</code>类型字段，自动 mock 出一个时间字符串；包含字符串<code>city</code>的<code>string</code>类型字段，自动 mock 出一个城市名。</li><li>Apifox 根据内置规则，可自动识别出图片、头像、用户名、手机号、网址、日期、时间、时间戳、邮箱、省份、城市、地址、IP 等字段，从而 Mock 出非常人性化的数据。</li><li>除了内置 mock 规则，用户还可以自定义规则库，满足各种个性化需求。支持使用 <code>正则表达式</code>、<code>通配符</code> 来匹配字段名自定义 mock 规则。</li></ol><h3 id="8、代码自动生成"><a href="#8、代码自动生成" class="headerlink" title="8、代码自动生成"></a>8、代码自动生成</h3><p>根据接口模型定义，自动生成各种语言/框架（如 TypeScript、Java、Go、Swift、ObjectiveC、Kotlin、Dart、C++、C#、Rust 等）的业务代码（如 Model、Controller、单元测试代码等）和接口请求代码。目前 Apifox 支持 130 种语言及框架的代码自动生成。</p><p>更重要的是：你可以通过<code>自定义代码模板</code>来生成符合自己团队的架构规范的代码，满足各种个性化的需求。</p><h3 id="9、导入、导出"><a href="#9、导入、导出" class="headerlink" title="9、导入、导出"></a>9、导入、导出</h3><ol><li>支持导出 <code>OpenApi (Swagger)</code>、<code>Markdown</code>、<code>Html</code> 等数据格式，因为可以导出<code>OpenApi</code>格式数据，所以你可以利用 OpenApi (Swagger) 丰富的生态工具完成各种接口相关的事情。</li><li>支持导入 <code>OpenApi (Swagger)</code>、<code>Postman</code>、<code>HAR</code>、<code>RAML</code>、<code>RAP2</code>、<code>YApi</code>、<code>Eolinker</code>、<code>NEI</code>、<code>DOClever</code>、<code>ApiPost</code> 、<code>Apizza</code> 、<code>ShowDoc</code>、<code>API Blueprint</code>、<code>I/O Docs</code>、<code>WADL</code>、<code>Google Discovery</code>等数据格式，方便旧项目迁移。</li></ol><h3 id="三、后续功能规划"><a href="#三、后续功能规划" class="headerlink" title="三、后续功能规划"></a>三、后续功能规划</h3><ol><li>接口文档公开对外发布。</li><li>接口性能测试支持（类似 JMeter）。</li><li>支持插件市场，可以自己开发插件。</li><li>支持更多接口协议，如<code>GraphQL</code>、<code>websocket</code>等。</li><li>支持离线使用，项目可选择在线同步（团队协作）还是仅本地存储（单机离线使用）。</li></ol><h3 id="四、更多-Apifox-功能截图"><a href="#四、更多-Apifox-功能截图" class="headerlink" title="四、更多 Apifox 功能截图"></a>四、更多 Apifox 功能截图</h3><p><img src= "/img/loading1.gif" data-lazy-src="https://pic3.zhimg.com/v2-cb29c171a62fec7792e09d4dea5601e2_r.jpg" alt="img"></p><p><img src= "/img/loading1.gif" data-lazy-src="https://pic4.zhimg.com/v2-b8a6e673775dead99fb7bf55fa3675e3_r.jpg" alt="img"></p><p><img src= "/img/loading1.gif" data-lazy-src="https://pic4.zhimg.com/v2-c0d31e348ca6fb205222ad5dbf95d9ab_r.jpg" alt="img"></p><p><img src= "/img/loading1.gif" data-lazy-src="https://pic3.zhimg.com/v2-a5f3fe99fd6deae3d00a107b8444d506_r.jpg" alt="img"></p><p><img src= "/img/loading1.gif" data-lazy-src="https://pic3.zhimg.com/v2-ea0e973c7134c19edbf2b80ef2fcf05a_r.jpg" alt="img"></p><p><img src= "/img/loading1.gif" data-lazy-src="https://pic4.zhimg.com/v2-b8c20d0818b3c7bef56137cb2e2cb2fb_r.jpg" alt="img"></p><p><img src= "/img/loading1.gif" data-lazy-src="https://pic2.zhimg.com/v2-5ac1da128a350111cfcbf47ab2f60b59_r.jpg" alt="img"></p><p><img src= "/img/loading1.gif" data-lazy-src="https://pic3.zhimg.com/v2-6ef28c655835d5c8c98723c1c9d41f1a_r.jpg" alt="img"></p><p><img src= "/img/loading1.gif" data-lazy-src="https://pic1.zhimg.com/v2-fb6a6c2696b5e07015a071f480673854_r.jpg" alt="img"></p><p><img src= "/img/loading1.gif" data-lazy-src="https://pic1.zhimg.com/v2-eb8c27f09926a8dbe448c63d8d57ef74_r.jpg" alt="img"></p><p><img src= "/img/loading1.gif" data-lazy-src="https://pic1.zhimg.com/v2-149c5990e064bd371d3ea283a2d420d0_r.jpg" alt="img"></p><p><img src= "/img/loading1.gif" data-lazy-src="https://pic2.zhimg.com/v2-53926e1ca0884baed2c9ab20bed12bed_r.jpg" alt="img"></p><p><img src= "/img/loading1.gif" data-lazy-src="https://pic4.zhimg.com/v2-1dc4db7aa4ffcee95888c84da74812cf_r.jpg" alt="img"></p><p><img src= "/img/loading1.gif" data-lazy-src="https://pic3.zhimg.com/v2-ae3f1d1e3eba65908c843b238dbf728a_r.jpg" alt="img"></p><p><img src= "/img/loading1.gif" data-lazy-src="https://pic3.zhimg.com/v2-199dc8a814c5cbd2b6c603fb96589db6_r.jpg" alt="img"></p><p><img src= "/img/loading1.gif" data-lazy-src="https://pic1.zhimg.com/v2-c95173613dd345831e9fc8a9e96b3624_r.jpg" alt="img"></p><p><img src= "/img/loading1.gif" data-lazy-src="https://pic2.zhimg.com/v2-f5d96e21a55bf995f3d003bf09b2947d_r.jpg" alt="img"></p><h3 id="五、-Apifox-下载地址"><a href="#五、-Apifox-下载地址" class="headerlink" title="五、 Apifox 下载地址"></a>五、 Apifox 下载地址</h3><p>请访问 Apifox 官网下载：<a href="https://www.apifox.cn/?utm_source=zhihu&utm_medium=article_10001&utm_content=377387530" target="_blank" rel="noopener">https://www.apifox.cn/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【测试工具】浅度测评：requests、aiohttp、httpx 我应该用哪一个？</title>
      <link href="/posts/2173e2a4"/>
      <url>/posts/2173e2a4</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在武汉，房子里待着，不出去影响世界了，转载点文章。</p><p>在 Python 众多的 HTTP 客户端中，最有名的莫过于requests、aiohttp和httpx。在不借助其他第三方库的情况下，requests只能发送同步请求；aiohttp只能发送异步请求；httpx既能发送同步请求，又能发送异步请求。</p><p>所谓的同步请求，是指在单进程单线程的代码中，发起一次请求后，在收到返回结果之前，不能发起下一次请求。所谓异步请求，是指在单进程单线程的代码中，发起一次请求后，在等待网站返回结果的时间里，可以继续发送更多请求。</p><p>今天我们来一个浅度测评，仅仅以多次发送 POST 请求这个角度来对比这三个库的性能。</p><p>测试使用的 HTTP 服务地址为<a href="http://122.51.39.219:8000/query，向它发送" target="_blank" rel="noopener">http://122.51.39.219:8000/query，向它发送</a> POST 请求的格式如下图所示：</p><p><img src= "/img/loading1.gif" data-lazy-src="https://pics6.baidu.com/feed/0b46f21fbe096b6301e3838247be9b42e9f8acfa.jpeg?token=70d39787cf58d67bf77a9106c04807a4&s=C096E73B1CA8440D18E1A5DB0000E0B3" alt="img"></p><p>请求发送的 ts 字段日期距离今天大于10天，那么返回{“success”: false}，如果小于等于10天，那么返回{“success”: true}。</p><p>首先我们通过各个客户端使用相同的参数只发送一次请求，看看效果。</p><p>发送一次请求</p><p><strong>requests</strong></p><p>import requestsresp = requests.post(‘<a href="http://122.51.39.219:8000/query&#39;" target="_blank" rel="noopener">http://122.51.39.219:8000/query&#39;</a>, json={‘ts’: ‘2020-01-20 13:14:15’}).json()print(resp)运行效果如下图所示：</p><p><img src= "/img/loading1.gif" data-lazy-src="https://pics2.baidu.com/feed/63d9f2d3572c11df47d7597328aa7ed6f603c2f4.png?token=a37daa3c6812a2d7d1f92ffa76fd4e77&s=718A7D3B110E554D1674B0DA030050B0" alt="img"></p><p><strong>httpx</strong></p><p>使用 httpx 发送同步请求：</p><p>import httpxresp = httpx.post(‘<a href="http://122.51.39.219:8000/query&#39;" target="_blank" rel="noopener">http://122.51.39.219:8000/query&#39;</a>, json={‘ts’: ‘2020-01-20 13:14:15’}).json()print(resp)httpx 的同步模式与 requests 代码重合度99%，只需要把requests改成httpx即可正常运行。如下图所示：</p><p><img src= "/img/loading1.gif" data-lazy-src="https://pics4.baidu.com/feed/faedab64034f78f02435131e32bc1653b2191cb0.png?token=e3e2e21a11fa3f55e0d73094d6b578cd&s=718A7D3B110E554D1674B0DA030050B0" alt="img"></p><p>使用 httpx 发送异步请求：</p><p>import httpximport asyncioasyncdefmain():asyncwith httpx.AsyncClient() as client: resp = await client.post(‘<a href="http://122.51.39.219:8000/query&#39;" target="_blank" rel="noopener">http://122.51.39.219:8000/query&#39;</a>, json={‘ts’: ‘2020-01-20 13:14:15’}) result = resp.json() print(result)asyncio.run(main())运行效果如下图所示：</p><p><img src= "/img/loading1.gif" data-lazy-src="https://pics2.baidu.com/feed/0823dd54564e9258a5a27545d20fcd5ecdbf4e1e.png?token=53fcebbef383dda74aa8d3adea337a1d&s=7108753B111E55CC4AC19DDA0300D0B1" alt="img"></p><p><strong>aiohttp</strong></p><p>import aiohttpimport asyncioasyncdefmain():asyncwith aiohttp.ClientSession() as client: resp = await client.post(‘<a href="http://122.51.39.219:8000/query&#39;" target="_blank" rel="noopener">http://122.51.39.219:8000/query&#39;</a>, json={‘ts’: ‘2020-01-20 13:14:15’}) result = await resp.json() print(result)asyncio.run(main())运行效果如下图所示：</p><p><img src= "/img/loading1.gif" data-lazy-src="https://pics1.baidu.com/feed/0824ab18972bd407aed406f4310482570fb3093f.png?token=38acd3253e87bd2f0628fbf3c4781a70&s=7B08752B111E55CC42C11DDA0300D0B1" alt="img"></p><p>aiohttp 的代码与 httpx 异步模式的代码重合度90%，只不过把AsyncClient换成了ClientSession，另外，在使用 httpx 时，当你await client.post时就已经发送了请求。但是当使用aiohttp时，只有在awiat resp.json() 时才会真正发送请求。</p><p>发送100次请求</p><p>我们现在随机生成一个距离今天在5-15天的日期，发送到 HTTP接口中。如果日期距离今天超过10天，那么返回的数据的 False，如果小于等于10天，那么返回的数据是 True。</p><p>我们发送100次请求，计算总共耗时。</p><p><strong>requests</strong></p><p>在前几天的文章中，我们提到，使用requests.post每次都会创建新的连接，速度较慢。而如果首先初始化一个 Session，那么 requests 会保持连接，从而大大提高请求速度。所以在这次测评中，我们分别对两种情况进行测试。</p><p>不保持连接</p><p>import randomimport timeimport datetimeimport requestsdefmake_request(body): resp = requests.post(‘<a href="http://122.51.39.219:8000/query&#39;" target="_blank" rel="noopener">http://122.51.39.219:8000/query&#39;</a>, json=body) result = resp.json() print(result)defmain(): start = time.time()for _ in range(100): now = datetime.datetime.now() delta = random.randint(5, 15) ts = (now - datetime.timedelta(days=delta)).strftime(‘%Y-%m-%d %H:%M:%S’) make_request({‘ts’: ts}) end = time.time() print(f’发送100次请求，耗时：{end - start}’)if <strong>name</strong> == ‘<strong>main</strong>‘: main()运行效果如下图所示：</p><p><img src= "/img/loading1.gif" data-lazy-src="https://pics2.baidu.com/feed/0ff41bd5ad6eddc4b5380c217356aafb506633a4.jpeg?token=8f345eb6f471f83547307a2770098fa4&s=E11A643B011ED5CE46D405DA0000C0B1" alt="img"></p><p><strong>发送100次请求，requests 不保持连接时耗时2.7秒</strong></p><p>保持连接</p><p>对代码稍作修改，使用同一个 Session 发送请求：</p><p>import randomimport timeimport datetimeimport requestsdefmake_request(session, body): resp = session.post(‘<a href="http://122.51.39.219:8000/query&#39;" target="_blank" rel="noopener">http://122.51.39.219:8000/query&#39;</a>, json=body) result = resp.json() print(result)defmain(): session = requests.Session() start = time.time()for _ in range(100): now = datetime.datetime.now() delta = random.randint(5, 15) ts = (now - datetime.timedelta(days=delta)).strftime(‘%Y-%m-%d %H:%M:%S’) make_request(session, {‘ts’: ts}) end = time.time() print(f’发送100次请求，耗时：{end - start}’)if <strong>name</strong> == ‘<strong>main</strong>‘: main()运行效果如下图所示：</p><p><img src= "/img/loading1.gif" data-lazy-src="https://pics2.baidu.com/feed/1e30e924b899a901c2b847365718167d0308f5b0.jpeg?token=389373396414cd3fd0c8e558d2fcf9ac&s=F008743B811ED5CE004500DA0000C0B1" alt="img"></p><p><strong>发送100次请求，requests 保持连接耗时1.4秒</strong></p><p><strong>httpx</strong></p><p>同步模式</p><p>代码如下：</p><p>import randomimport timeimport datetimeimport httpxdefmake_request(client, body): resp = client.post(‘<a href="http://122.51.39.219:8000/query&#39;" target="_blank" rel="noopener">http://122.51.39.219:8000/query&#39;</a>, json=body) result = resp.json() print(result)defmain(): session = httpx.Client() start = time.time()for _ in range(100): now = datetime.datetime.now() delta = random.randint(5, 15) ts = (now - datetime.timedelta(days=delta)).strftime(‘%Y-%m-%d %H:%M:%S’) make_request(session, {‘ts’: ts}) end = time.time() print(f’发送100次请求，耗时：{end - start}’)if <strong>name</strong> == ‘<strong>main</strong>‘: main()运行效果如下图所示：</p><p><img src= "/img/loading1.gif" data-lazy-src="https://pics1.baidu.com/feed/f636afc379310a55c4caf697fdc85faf8326107d.jpeg?token=32ab623d88054400cb2bd2ba44f6a743&s=50087C3BC11ED5CC18D508DA0000C0B1" alt="img"></p><p><strong>发送100次请求，httpx 同步模式耗时1.5秒左右。</strong></p><p>异步模式</p><p>代码如下：</p><p>import httpximport randomimport datetimeimport asyncioimport timeasyncdefrequest(client, body): resp = await client.post(‘<a href="http://122.51.39.219:8000/query&#39;" target="_blank" rel="noopener">http://122.51.39.219:8000/query&#39;</a>, json=body) result = resp.json() print(result)asyncdefmain():asyncwith httpx.AsyncClient() as client: start = time.time() task_list = []for _ in range(100): now = datetime.datetime.now() delta = random.randint(5, 15) ts = (now - datetime.timedelta(days=delta)).strftime(‘%Y-%m-%d %H:%M:%S’) req = request(client, {‘ts’: ts}) task = asyncio.create_task(req) task_list.append(task)await asyncio.gather(*task_list) end = time.time() print(f’发送100次请求，耗时：{end - start}’)asyncio.run(main())运行效果如下图所示：</p><p><img src= "/img/loading1.gif" data-lazy-src="https://pics3.baidu.com/feed/1f178a82b9014a90bef4207ee4fa2514b11beeba.jpeg?token=01173500e927b2967d8da8b7e470f17a&s=4418743BC15EC5CC404128DA000010B0" alt="img"></p><p><strong>发送100次请求，httpx 异步模式耗时0.6秒左右。</strong></p><p><strong>aiohttp</strong></p><p>测试代码如下：</p><p>import aiohttpimport randomimport datetimeimport asyncioimport timeasyncdefrequest(client, body): resp = await client.post(‘<a href="http://122.51.39.219:8000/query&#39;" target="_blank" rel="noopener">http://122.51.39.219:8000/query&#39;</a>, json=body) result = await resp.json() print(result)asyncdefmain():asyncwith aiohttp.ClientSession() as client: start = time.time() task_list = []for _ in range(100): now = datetime.datetime.now() delta = random.randint(5, 15) ts = (now - datetime.timedelta(days=delta)).strftime(‘%Y-%m-%d %H:%M:%S’) req = request(client, {‘ts’: ts}) task = asyncio.create_task(req) task_list.append(task)await asyncio.gather(*task_list) end = time.time() print(f’发送100次请求，耗时：{end - start}’)asyncio.run(main())运行效果如下图所示：</p><p><img src= "/img/loading1.gif" data-lazy-src="https://pics3.baidu.com/feed/2e2eb9389b504fc2313ebc72a950fb1791ef6df3.jpeg?token=a595216712e08dec3f155133f27e38a4&s=E4986C3AC95EE5CC4CC544DE0000C0B1" alt="img"></p><p><strong>发送100次请求，使用 aiohttp 耗时0.3秒左右</strong></p><p>发送1000次请求</p><p>由于 request 保持连接的速度比不保持连接快，所以我们这里只用保持连接的方式来测试。并且不打印返回的结果。</p><p><strong>requests</strong></p><p>运行效果如下图所示：</p><p><img src= "/img/loading1.gif" data-lazy-src="https://pics4.baidu.com/feed/359b033b5bb5c9ea40e4afa798b4aa063bf3b3f6.jpeg?token=514171994f18a98a6e7bb65e4ecff4ce&s=54087C3BD15FF5CC024548DA000080B1" alt="img"></p><p><strong>发送1000次请求，requests 耗时16秒左右</strong></p><p><strong>httpx</strong></p><p>同步模式</p><p>运行效果如下图所示：</p><p><img src= "/img/loading1.gif" data-lazy-src="https://pics6.baidu.com/feed/a1ec08fa513d26976689b5e21a76aefd4216d84e.jpeg?token=9306ad5ffa386a1d9a2227e36a4adbcf&s=D508743B915FD5CC045500DA0000C0B1" alt="img"></p><p><strong>发送1000次请求，httpx 同步模式耗时18秒左右</strong></p><p>异步模式</p><p>运行效果如下图所示：</p><p><img src= "/img/loading1.gif" data-lazy-src="https://pics0.baidu.com/feed/7aec54e736d12f2e0585c540034fc964843568a5.jpeg?token=1f6bd37b4fc444498a0e7cb32ff03378&s=4018543BD15FC1CC584520DA000080B1" alt="img"></p><p><strong>发送1000次请求，httpx 异步模式耗时5秒左右</strong></p><p><strong>aiohttp</strong></p><p>运行效果如下图所示：</p><p><img src= "/img/loading1.gif" data-lazy-src="https://pics7.baidu.com/feed/5366d0160924ab182be2692f7f77facb7a890b41.jpeg?token=1394197262765a9fda0b13fde6b4fbb9&s=4418643BD15FC1CC545564DA000080B2" alt="img"></p><p><strong>发送1000次请求，aiohttp 耗时4秒左右</strong></p><p>总结</p><p>如果你只发几条请求。那么使用 requests 或者 httpx 的同步模式，代码最简单。</p><p>如果你要发送很多请求，但是有些地方要发送同步请求，有些地方要发送异步请求，那么使用 httpx 最省事。</p><p>如果你要发送很多请求，并且越快越好，那么使用 aiohttp 最快。</p><p>这篇测评文章只是一个非常浅度的评测，只考虑了请求速度这一个角度。如果你要在生产环境使用，那么你可以做更多实验来看是不是符合你的实际使用情况。</p><p>原文链接：<a href="https://baijiahao.baidu.com/s?id=1656736744425905392&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1656736744425905392&amp;wfr=spider&amp;for=pc</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【自动化库】异步http接口调用库：httpx</title>
      <link href="/posts/b4b3bf4e"/>
      <url>/posts/b4b3bf4e</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>谈到http接口调用，Requests大家并不陌生，例如，robotframework-requests、HttpRunner等HTTP接口测试库/框架都是基于它开发。这里将介绍另一款http接口测试框架:httpx。</p><p>它的API和Requests高度一致。</p><p>github: <a href="https://github.com/encode/httpx" target="_blank" rel="noopener">https://github.com/encode/httpx</a></p><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> pip install httpx</span></span><br></pre></td></tr></table></figure><h2 id="httpx-简单使用"><a href="#httpx-简单使用" class="headerlink" title="httpx 简单使用"></a>httpx 简单使用</h2><p>当然，它是不支持python2.x的。</p><ul><li>简单的get调用</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> httpx</span><br><span class="line"></span><br><span class="line">r = httpx.get(<span class="string">"http://httpbin.org/get"</span>)</span><br><span class="line">print(r.status_code)</span><br><span class="line">print(r.json())</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">200</span></span><br><span class="line">&#123;'args': &#123;&#125;, 'headers': &#123;'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'Host': 'httpbin.org', 'User-Agent': 'python-httpx/0.12.1', 'X-Amzn-Trace-Id': 'Root=1-5ea5b58c-e446c44392ea090809e8a4bc'&#125;, 'origin': '113.97.33.224', 'url': 'http://httpbin.org/get'&#125;</span><br></pre></td></tr></table></figure><ul><li>带参数的post调用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> httpx</span><br><span class="line"></span><br><span class="line">payload = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: <span class="string">'value2'</span>&#125;</span><br><span class="line">r = httpx.post(<span class="string">"http://httpbin.org/post"</span>, data=payload)</span><br><span class="line">print(r.json())</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;'args': &#123;&#125;, 'data': '', 'files': &#123;&#125;, 'form': &#123;'key1': 'value1', 'key2': 'value2'&#125;, 'headers': &#123;'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'Content-Length': '23', 'Content-Type': 'application/x-www-form-urlencoded', 'Host': 'httpbin.org', 'User-Agent': 'python-httpx/0.12.1', 'X-Amzn-Trace-Id': 'Root=1-5ea5b61d-1871d10e80b8324e48ea475e'&#125;, 'json': None, 'origin': '113.97.33.224', 'url': 'http://httpbin.org/post'&#125;</span><br></pre></td></tr></table></figure><p>你会发现这几乎和requests一模一样，只不过把requests 换成了httpx。</p><h2 id="httpx-异步调用"><a href="#httpx-异步调用" class="headerlink" title="httpx 异步调用"></a>httpx 异步调用</h2><p>接下来认识httpx的异步调用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> httpx</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> httpx.AsyncClient() <span class="keyword">as</span> client:</span><br><span class="line">        resp = <span class="keyword">await</span> client.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">        result = resp.json()</span><br><span class="line">        print(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br></pre></td></tr></table></figure><p>这里用到了async 、await， asyncio等，等参考我关于python异步I/O的基础介绍：<a href="https://www.cnblogs.com/fnng/p/12757395.html" target="_blank" rel="noopener">https://www.cnblogs.com/fnng/p/12757395.html</a></p><h2 id="异步的调用的优势"><a href="#异步的调用的优势" class="headerlink" title="异步的调用的优势"></a>异步的调用的优势</h2><p>我们发现，采用异步会让接口的调用更加复杂，那为什么还要使用异步呢？当你要调用1000次接口时，那么异步调用可以让你的调用更快。接下来我们通过简单让例子进行对比。</p><p>以我flask开发的简单接口为例子：</p><p><a href="https://github.com/defnngj/learning-API-test" target="_blank" rel="noopener">https://github.com/defnngj/learning-API-test</a></p><blockquote><p>为了测试的更加准确性，我将flask服务部署在了另一台电脑，测试机与被测服务分离。</p></blockquote><ul><li>httpx 同步调用</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同步调用</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> httpx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_request</span><span class="params">(client)</span>:</span></span><br><span class="line">    resp = client.get(<span class="string">'http://192.168.0.7:5000'</span>)</span><br><span class="line">    result = resp.json()</span><br><span class="line">    <span class="comment"># print(result)</span></span><br><span class="line">    <span class="keyword">assert</span> result[<span class="string">"code"</span>] == <span class="number">10200</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    session = httpx.Client()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1000 次调用</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">        make_request(session)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 开始</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    main()</span><br><span class="line">    <span class="comment"># 结束</span></span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">f'同步：发送1000次请求，耗时：<span class="subst">&#123;end - start&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">同步：发送1000次请求，耗时：52.948561906814575</span><br></pre></td></tr></table></figure><ul><li>httpx 异步调用</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 异步调用</span></span><br><span class="line"><span class="keyword">import</span> httpx</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(client)</span>:</span></span><br><span class="line">    resp = <span class="keyword">await</span> client.get(<span class="string">'http://192.168.0.7:5000'</span>)</span><br><span class="line">    result = resp.json()</span><br><span class="line">    <span class="comment"># print(result)</span></span><br><span class="line">    <span class="keyword">assert</span> result[<span class="string">"code"</span>] == <span class="number">10200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> httpx.AsyncClient() <span class="keyword">as</span> client:</span><br><span class="line">        <span class="comment"># # 开始</span></span><br><span class="line">        <span class="comment"># start = time.time()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1000 次调用</span></span><br><span class="line">        task_list = []</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">            req = request(client)</span><br><span class="line">            task = asyncio.create_task(req)</span><br><span class="line">            task_list.append(task)</span><br><span class="line">        <span class="keyword">await</span> asyncio.gather(*task_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment">#开始</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    asyncio.run(main())</span><br><span class="line">    <span class="comment"># 结束</span></span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">f'异步：发送1000次请求，耗时：<span class="subst">&#123;end - start&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">异步：发送1000次请求，耗时：3.903275728225708</span><br></pre></td></tr></table></figure><p>将httpx用于请求端，同步与异步请求差距非常明显。</p><p>以上的例子已经放到 learning-API-test github项目</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>*　这里只是拿 flask 非异步框架做为接口服务端进行对比，如果如果将接口服务同样换作前面介绍的 snaic 异步框架，上面的两组测试对比并不明显（snaic的异步接口服务处理同步请求更快），在安装 snaic的时候会发现，他同样也集成了 httpx 库。</p><p>*　为什么要学习异步，因为我们公司有很多接口是异步调用的，所以，我想真正搞懂这个概念，就这么简单！保持在工作中对技术的好奇心。</p><ul><li>异步与多线程的区别？这是我在学习 异步时候的一个疑问，我找到了一个比较形象的例子。</li></ul><blockquote><p>以火车站购票场景为例：一个火车站为一个进程，一个窗口和售票员的组合为一个线程：</p></blockquote><blockquote><ul><li>多线程：火车站开了N个窗口售票员，我们去买票，会有工作人员（CPU）指定我们去某个窗口买票，你被安排到某个窗口后，告诉售票员你的请求（咨询或买票），售票员执行操作，如果这个过程中发送的阻塞，也是窗口售票员的阻塞（比如查票的过程），但是因为你开了很多个窗口，其他买票的人可以被安排去另外的空闲窗口，如果所有窗口都满了，工作人员就不会给你安排了，直到有空的窗口出来；</li><li>多进程（并行）：建多个火车站售票，火车站与火车站间互不影响，看买票的自己想去哪里（这里不讨论负载均衡）；</li><li>异步：火车站只有一个窗口售票员，但是窗口前有一个登记台（事件循环），你把你想买的票告诉给登记台，并留下你的手机（回调函数），然后你就可以走了，由于登记台只是登记了你的请求，并没有做任何其他操作，所以这个耗时基本忽略不计的。之后售票员处理完了上一个任务了，就会自己去登记台取剩下的未完成的任务，直到取到你的任务，操作完后，有票没票都会通过手机通知你，如果有票还会往你的手机发车票的二维码；</li></ul></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【自动化测试】WEB自动化测试环境搭建</title>
      <link href="/posts/a42e3f6d"/>
      <url>/posts/a42e3f6d</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>一、selenium安装</p><p>Python3.x安装后就默认就会有pip（pip.exe默认在python的Scripts路径下），使用pip安装selenium：</p><p>在CMD命令行输入：pip install selenium </p><p>二、Webdriver、geckodriver下载配置：</p><p>Webdriver下载路径：<a href="http://chromedriver.storage.googleapis.com/index.html，用于驱动打开Chrome；" target="_blank" rel="noopener">http://chromedriver.storage.googleapis.com/index.html，用于驱动打开Chrome；</a></p><p>geckodriver下载路径：<a href="https://github.com/mozilla/geckodriver/releases，用于驱动打开Firefox；" target="_blank" rel="noopener">https://github.com/mozilla/geckodriver/releases，用于驱动打开Firefox；</a></p><p>下载后放在python.exe相同目录下:</p><p><img src= "/img/loading1.gif" data-lazy-src="https:////upload-images.jianshu.io/upload_images/17223368-b0594b2a52a4034b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/755/format/webp" alt="img"></p><p>测试下：打开python自带编辑器IDLE</p><p><img src= "/img/loading1.gif" data-lazy-src="https:////upload-images.jianshu.io/upload_images/17223368-d4dc876f1a52d488.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/472/format/webp" alt="img"></p><p>如果能正常运行就证明驱动安装成功</p><p>三、pyCharm设置</p><p>打开pyCharm,点开File-Settings加入selenium，如下图，点+搜索selenium，点Install Package</p><p><img src= "/img/loading1.gif" data-lazy-src="https:////upload-images.jianshu.io/upload_images/17223368-e1a2c5f78a16bf5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1194/format/webp" alt="img"></p><p>二、mac环境搭建</p><p>1.前提</p><p>(1)mac系统自带python2.7，如果你要的是python3版本，需要自己下载安装。</p><p>(2)安装好IDE:pycharm</p><p>(3)安装好chrome浏览器</p><p>(4)下载chromedriver : <a href="http://npm.taobao.org/mirrors/chromedriver/2.36/（放到user/local/bin，打开访达-前往-前往文件夹：输入/usr/local/bin）" target="_blank" rel="noopener">http://npm.taobao.org/mirrors/chromedriver/2.36/（放到user/local/bin，打开访达-前往-前往文件夹：输入/usr/local/bin）</a></p><p>————————————————</p><p>2.安装selenium操作：</p><p>打开终端，输入：sudo pip3 install selenium（python2版本输入sudo pip install selenium） </p><p>打开“终端”方法：</p><p>在 Mac 上，请执行以下一项操作：</p><p>点按程序坞中的“启动台”图标 ，在搜索栏中键入“终端”，然后点按“终端”。</p><p>在“访达”中，打开“/应用程序/实用工具”文件夹，然后连按“终端”，打开。</p><p>导入第三方的包，别人都有file→setting，我这怎么就是没有。也是心累。</p><p>在这里记录一下，免得跟多人入坑</p><p>1、PyCharm→Preferences→Project：项目名→Project Interpreter</p><p><img src= "/img/loading1.gif" data-lazy-src="https:////upload-images.jianshu.io/upload_images/17223368-ea23f8ce76a0c6fc?imageMogr2/auto-orient/strip%7CimageView2/2/w/1003/format/webp" alt="img"></p><p>2、点击这个加号可以导入新的库,点击install，这里以requests库为例</p><p><img src= "/img/loading1.gif" data-lazy-src="https:////upload-images.jianshu.io/upload_images/17223368-2407675f4ef9d068?imageMogr2/auto-orient/strip%7CimageView2/2/w/924/format/webp" alt="img"></p><p>3、查看是否已经存在</p><p><img src= "/img/loading1.gif" data-lazy-src="https:////upload-images.jianshu.io/upload_images/17223368-58d95cbcea9a5638?imageMogr2/auto-orient/strip%7CimageView2/2/w/1003/format/webp" alt="img"></p><p>库已经导入了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【自动化测试】python自动化测试环境搭建</title>
      <link href="/posts/undefined"/>
      <url>/posts/undefined</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="http://www.testclass.net/" target="_blank" rel="noopener">http://www.testclass.net/</a> 测试教程网，专业的selenium 学习网站。</p><p>selenium 是一个web的自动化测试工具，不少学习功能自动化的同学开始首选selenium ，相因为它相比QTP有诸多有点：</p><p>* 免费，也不用再为破解QTP而大伤脑筋</p><p>* 小巧，对于不同的语言它只是一个包而已，而QTP需要下载安装1个多G 的程序。</p><p>* 这也是最重要的一点，不管你以前更熟悉C、 java、ruby、python、或都是C# ，你都可以通过selenium完成自动化测试，而QTP只支持VBS </p><p>* 支持多平台：windows、linux、MAC ，支持多浏览器：ie、ff、safari、opera、chrome</p><p>* 支持分布式测试用例的执行，可以把测试用例分布到不同的测试机器的执行，相当于分发机的功能。</p><p>关于selenium的基础知识与java平台的结合，我之前写过一个《菜鸟学习自动化测试》系列，最近学python，所以想尝试一下selenium的在python平台如何搭建；还好这方法的文章很容易，在此将搭建步骤整理分享。</p><p>搭建平台windows </p><p>准备工具如下：</p><p>-————————————————————</p><p>下载python</p><p><a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a></p><p>-————————————————————</p><p>如果你是新学python，哪果你没有要用的包是必须依赖于pyhton2.x 的，那么请毫不犹豫的选择python3.5吧！</p><p><strong>window安装步骤：</strong></p><p>　　1、下载python安装。</p><p>　　<a href="https://www.python.org/downloads/release/python-351/" target="_blank" rel="noopener">https://www.python.org/downloads/release/python-351/</a></p><p><img src= "/img/loading1.gif" data-lazy-src="https://images2015.cnblogs.com/blog/311516/201606/311516-20160624115021578-1069073897.png" alt="img"></p><p>根据自己的操作系统32/64 位，选择相应的版本。</p><p>安装过程我就没必要描述，我的安装目录为：C:\Python35</p><p> 2、进入cmd(windows命令提示符)下面输入”python”命令。</p><p>（如果提示python不是内部或外部命令！别急，去配置一下环境变量吧）</p><p>3、安装selenium</p><p>3.1、通过pip 安装</p><p>C:\Users\fnngj&gt;python3 -m pip install selenium </p><p>3.2、通过下载包安装</p><p>或者直接下载selenium包：</p><p><a href="https://pypi.python.org/pypi/selenium" target="_blank" rel="noopener">https://pypi.python.org/pypi/selenium</a></p><p>解压，cmd进入目录:</p><p>C:\selenium\selenium2.53.5&gt; python3 setup.py install</p><p>===============================================</p><p><strong>ubuntu 下安装方式：</strong></p><p>1、安装：setuptools</p><p>root@fnngj-H24X:~# apt-get install python-setuptools</p><p>2、安装pip</p><p>root@fnngj-H24X:/home/fnngj/python# tar -zxvf pip-1.4.1.tar.gz</p><p>root@fnngj-H24X:/home/fnngj/python# cd pip-1.4.1/</p><p>root@fnngj-H24X:/home/fnngj/python# python setup.py install</p><p>3、安装selenium</p><p>root@fnngj-H24X:/home/fnngj/python/pip-1.4.1# pip install -U selenium</p><p>恭喜~！ 你前期工作已经做了，上面的步骤确实有些繁琐，但是并不难，不过我们已经完成成了，下面体验一下成果吧！ 拿python网站上的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.common.exceptions import NoSuchElementException</span><br><span class="line">from selenium.webdriver.common.keys import Keys</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">browser &#x3D; webdriver.Firefox() # Get local session of firefox</span><br><span class="line">browser.get(&quot;http:&#x2F;&#x2F;www.yahoo.com&quot;) # Load page</span><br><span class="line">assert &quot;Yahoo!&quot; in browser.title</span><br><span class="line">elem &#x3D; browser.find_element_by_name(&quot;p&quot;) # Find the query box</span><br><span class="line">elem.send_keys(&quot;seleniumhq&quot; + Keys.RETURN)</span><br><span class="line">time.sleep(0.2) # Let the page load, will be added to the API</span><br><span class="line">try:</span><br><span class="line">    browser.find_element_by_xpath(&quot;&#x2F;&#x2F;a[contains(@href,&#39;http:&#x2F;&#x2F;seleniumhq.org&#39;)]&quot;)</span><br><span class="line">except NoSuchElementException:</span><br><span class="line">    assert 0, &quot;can&#39;t find seleniumhq&quot;</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><p>（运行过程中如果出现错误： </p><p>WebDriverException: Message: u’Unexpected error launching Internet Explorer.</p><p> Protected Mode settings are not the same for all zones. Enable Protected Mo</p><p>de must be set to the same value (enabled or disabled) for all zones.’ </p><p>更改IE的internet选项-&gt;安全，将Internet/本地Internet/受信任的站定/受限制的站点中的启用保护模式全部去 掉勾，或者全部勾上。）</p><p>-—————————————-</p><p>selenium + python的一份不错文档</p><p><a href="http://selenium.googlecode.com/git/docs/api/py/index.html" target="_blank" rel="noopener">http://selenium.googlecode.com/git/docs/api/py/index.html</a></p><p>===========================如果想通过其它浏览器（IE Chrome）运行脚本=================================</p><p><strong>安装Chrome driver</strong></p><p>chrome driver的下载地址在<a href="https://code.google.com/p/chromedriver/downloads/list" target="_blank" rel="noopener">这里</a>。</p><p>　　1. 下载解压，你会得到一个chromedriver.exe文件（我点开，运行提示started no prot 9515 ，这是干嘛的？端口9515被占了？中间折腾了半天），后来才知道需要把这家伙放到chrome的安装目录下…\Google\Chrome\Application\ ,然后设置path环境变量，把chrome的安装目录（我的：C:\Program Files\Google\Chrome\Application），然后再调用运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># coding &#x3D; utf-8</span><br><span class="line"></span><br><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">driver &#x3D; webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">driver.get(&#39;http:&#x2F;&#x2F;radar.kuaibo.com&#39;)</span><br><span class="line"></span><br><span class="line">print driver.title</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><p>又报了个错：</p><p>Chrome version must be &gt;= 27.0.1453.0\n (Driver info: chromedriver=2.0,platform=Windows NT 5.1 SP3 x86)</p><p>说我chrome的版本没有大于27.0.1453.0 ，这个好办，更新到最新版本即可。</p><p><strong>安装IE driver</strong></p><p>在新版本的webdriver中，只有安装了ie driver使用ie进行测试工作。</p><p>ie driver的下载地址在<a href="https://code.google.com/p/selenium/downloads/list" target="_blank" rel="noopener">这里</a>，记得根据自己机器的操作系统版本来下载相应的driver。</p><p>暂时还没尝试，应该和chrome的安装方式类似。</p><p><strong>记得配置IE的保护模式</strong></p><p>如果要使用webdriver启动IE的话，那么就需要配置IE的保护模式了。</p><p>把IE里的保护模式都选上或都勾掉就可以了。</p><p> 乙醇的安装方式：</p><p> <a href="http://easonhan007.github.io/python/2013/05/07/setup-env/" target="_blank" rel="noopener">http://easonhan007.github.io/python/2013/05/07/setup-env/</a></p><p>5分钟安装好selenium webdriver + python 环境：</p><p><a href="http://v.youku.com/v_show/id_XNjQ1MDI5Nzc2.html?qq-pf-to=pcqq.group" target="_blank" rel="noopener">http://v.youku.com/v_show/id_XNjQ1MDI5Nzc2.html?qq-pf-to=pcqq.group</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【测试理论】做自动化遇到的测试环境差异问题</title>
      <link href="/posts/3e4105ad"/>
      <url>/posts/3e4105ad</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="最近公司在做接口自动化测试记录一下遇到的问题"><a href="#最近公司在做接口自动化测试记录一下遇到的问题" class="headerlink" title="最近公司在做接口自动化测试记录一下遇到的问题:"></a>最近公司在做接口自动化测试记录一下遇到的问题:</h4><h5 id="测试环境差异："><a href="#测试环境差异：" class="headerlink" title="测试环境差异："></a>测试环境差异：</h5><h6 id="测试环境："><a href="#测试环境：" class="headerlink" title="测试环境："></a>测试环境：</h6><p>1、测试环境可直接调用，业务不会触发反作弊系统，不需要加白名单。</p><p>2、可随意操作数据库，增删改查都可操作。</p><h6 id="预发环境："><a href="#预发环境：" class="headerlink" title="预发环境："></a>预发环境：</h6><p>1、预发环境与线上环境相差无几，除了与线上系统隔离外，有线上系统的全部能力。如果要在预发环境做接口测试，需要加各种业务的白名单。</p><p>2、同时想要访问预发环境的服务，需要在被测系统&amp;依赖服务机器上加运行自动化机器的白名单，才可正常访问预发环境的各个服务。</p><p>3、预发环境的数据库一般和生产环境用一套环境，一般情况下，是不允许删除操作的，所以在预发环境最多可执行更新操作。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【FLAG】2021年愿景</title>
      <link href="/posts/5a17eb30"/>
      <url>/posts/5a17eb30</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="2021年FALG"><a href="#2021年FALG" class="headerlink" title="2021年FALG"></a>2021年FALG</h4><blockquote><p> 今天是2021年12月，2021年的最后一个月</p></blockquote><p>写点什么好呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不知道做点什么好</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FLAG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【测试理论】什么是Topic</title>
      <link href="/posts/3457ed69"/>
      <url>/posts/3457ed69</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是Topic"><a href="#什么是Topic" class="headerlink" title="什么是Topic"></a>什么是Topic</h1><p>Topic是消息发布（Pub）者和订阅（Sub）者之间的传输中介。设备可通过Topic实现消息的发送和接收，从而实现服务端与设备端的通信。为方便海量设备基于Topic进行通信，简化授权操作，物联网平台定义了产品Topic类和设备Topic。本文介绍产品和设备Topic的定义、使用和分类。</p><h2 id="Topic定义"><a href="#Topic定义" class="headerlink" title="Topic定义"></a>Topic定义</h2><p>产品Topic类：产品维度的Topic，是同一产品下不同设备的Topic集合。一个Topic类对一个<strong>ProductKey</strong>下所有设备通用。</p><p>以下是Topic类的使用说明：</p><ul><li><p>定义Topic的功能。</p><p>Topic类格式以正斜线（/）进行分层，区分每个类目。例如：<code>/${productKey}/${deviceName}/user/update</code>。</p><p>其中，${productKey}和${deviceName}两个类目为既定类目；后缀和前缀类目用于区分不同功能的消息。</p><ul><li><p>${productKey}</p><p>表示产品的标识符</p><p>ProductKey</p><p>。</p><p>在指定产品的Topic类中，需替换为实际的<strong>ProductKey</strong>值。</p></li><li><p>${deviceName}</p><p>表示设备名称（</p><p>DeviceName</p><p>）。</p><p>在产品Topic类中，${deviceName}是该产品下所有设备的名称变量，不需要替换为实际设备名称。</p></li></ul></li><li><p>定义Topic的操作权限。</p><ul><li><strong>发布</strong>：产品下设备可以往该Topic发布消息。</li><li><strong>订阅</strong>：产品下设备可以订阅该Topic，从而获取消息。</li><li><strong>发布和订阅</strong>：同时具备<strong>发布</strong>和<strong>订阅</strong>的操作权限。</li></ul></li></ul><p>在产品Topic类基础上，使用<code>${productKey}/${deviceName}</code>通配一个唯一的设备，与前缀、后缀类目组成的完整Topic，就是具体的设备Topic。</p><p>设备Topic与产品Topic类格式一致，区别在于Topic类中的变量${deviceName}，在设备Topic中是具体的设备名称（<strong>DeviceName</strong>）。</p><p>例如产品<code>a19mzPZ***</code>下设备<code>device1</code>和<code>device2</code>的具体Topic如下：</p><ul><li><code>/a19mzPZ****/device1/user/update</code>。</li><li><code>/a19mzPZ****/device2/user/update</code>。</li></ul><p>产品Topic类定义的功能和操作权限，会映射到具体的设备Topic。以下是设备Topic的使用说明：</p><ul><li><p>具体的设备Topic可用于消息通信。</p></li><li><p><strong>注意</strong> 在进行上下行通信调试时，请确保指定的Topic具备对应的操作权限。</p></li><li><p>指定的设备Topic只能被指定设备用于消息通信。</p><p>例如，Topic：<code>/a19mzPZ****/device1/user/update</code>归属于设备device1，只能被设备device1用于发布或订阅消息，而不能被设备device2用于发布或订阅消息。</p></li><li><p>您可管控单个设备的消息收发。</p><p>您可在<a href="https://iot.console.aliyun.com/" target="_blank" rel="noopener">物联网平台控制台</a>对应实例下的<strong>设备列表</strong>页面，或在服务端调用<a href="https://help.aliyun.com/document_detail/69602.htm#doc-api-Iot-DisableThing" target="_blank" rel="noopener">DisableThing</a>接口，禁用该设备；或在业务上管控发送给设备的消息。</p></li></ul><blockquote><p>本文来源于：<a href="https://help.aliyun.com/document_detail/73731.html" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/73731.html</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【博客搭建】HEXO踩坑指南</title>
      <link href="/posts/3447554d"/>
      <url>/posts/3447554d</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="踩坑指南"><a href="#踩坑指南" class="headerlink" title="踩坑指南"></a>踩坑指南</h3><blockquote><p>发现点击标题文章打开不对，尝试安装 abbrlink 插件试试吧</p></blockquote><p>cnpm install hexo-abbrlink –save</p><blockquote><p>想要隐藏这篇文章<br>在title里添加这行代码试试</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hide: true</span><br></pre></td></tr></table></figure><p><img src= "/img/loading1.gif" data-lazy-src="/img/1638799083784.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ADB常用命令及其用法大全</title>
      <link href="/posts/3447541d"/>
      <url>/posts/3447541d</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="ADB常用命令及其用法大全"><a href="#ADB常用命令及其用法大全" class="headerlink" title="ADB常用命令及其用法大全"></a>ADB常用命令及其用法大全</h2><h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><blockquote><p>本文主要记述ADB的常用命令，关于ADB用法大全，可参考文末链接</p></blockquote><h4 id="ADB简介："><a href="#ADB简介：" class="headerlink" title="ADB简介："></a>ADB简介：</h4><p>ADB，即 Android Debug Bridge，它是 Android 开发/测试人员不可替代的强大工具，也是 Android 设备玩家的好玩具。安卓调试桥 (Android Debug Bridge, adb)，是一种可以用来操作手机设备或模拟器的命令行工具。它存在于 sdk/platform-tools 目录下。虽然现在 Android Studio 已经将大部分 ADB 命令以图形化的形式实现了，但是了解一下还是有必要的。<br>注： 有部分命令的支持情况可能与 Android 系统版本及定制 ROM 的实现有关。</p><h4 id="查看当前连接设备："><a href="#查看当前连接设备：" class="headerlink" title="查看当前连接设备："></a>查看当前连接设备：</h4><blockquote><p>查看当前连接设备：</p><blockquote><p>adb devices</p></blockquote></blockquote><blockquote><p>查看当前设备的详细信息</p><blockquote><p>adb devices -l</p></blockquote></blockquote><blockquote><p>如果发现多个设备：</p><blockquote><p>adb -s 设备号 其他指令</p></blockquote></blockquote><h4 id="adb进程启动和终止"><a href="#adb进程启动和终止" class="headerlink" title="adb进程启动和终止"></a>adb进程启动和终止</h4><blockquote><p>启动服务进程</p><blockquote><p>adb start-server</p></blockquote></blockquote><blockquote><p>杀死后台服务进程</p><blockquote><p>adb kill-server</p></blockquote></blockquote><h4 id="查看当前运行的Activity"><a href="#查看当前运行的Activity" class="headerlink" title="查看当前运行的Activity:"></a>查看当前运行的Activity:</h4><blockquote><p>windows环境下:</p><blockquote><p>adb shell dumpsys activity | findstr “mFocusedActivity”</p></blockquote></blockquote><blockquote><p>Linux、Mac环境下：</p><blockquote><p>adb shell dumpsys activity | grep “mFocusedActivity”</p></blockquote></blockquote><h4 id="查看日志："><a href="#查看日志：" class="headerlink" title="查看日志："></a>查看日志：</h4><blockquote><blockquote><p>adb logcat</p></blockquote></blockquote><blockquote><p>将adb日志保存到文件</p><blockquote><p>adb logcat &gt; 本地文件名</p></blockquote></blockquote><h4 id="安装apk文件："><a href="#安装apk文件：" class="headerlink" title="安装apk文件："></a>安装apk文件：</h4><blockquote><blockquote><p>adb install xxx.apk</p></blockquote></blockquote><blockquote><p>此安装方式，如果已经存在，无法安装；推荐使用覆盖安装：</p><blockquote><p>adb install -r xxx.apk</p></blockquote></blockquote><blockquote><p>比分直接RUN出来的包是test-onlu的无法安装，推荐使用<strong>-t</strong></p><blockquote><p>adb install -r -t xxx.apk</p></blockquote></blockquote><h4 id="卸载App"><a href="#卸载App" class="headerlink" title="卸载App:"></a>卸载App:</h4><blockquote><p>adb uninstall com.zhy.app</p></blockquote><blockquote><p>如果想要保留数据，则：</p><blockquote><p>adb uninstall -k com.zhy.app</p></blockquote></blockquote><h4 id="传递文件："><a href="#传递文件：" class="headerlink" title="传递文件："></a>传递文件：</h4><blockquote><p>往手机SDCard传递文件：</p><blockquote><p>adb push 文件名 手机端SDCard路径</p></blockquote></blockquote><blockquote><p>例如：</p><blockquote><p>adb push 帅照.jpg /sdcard/</p></blockquote></blockquote><blockquote><p>从手机端下载文件：</p><blockquote><p>adb pull /sdcard/xxx.txt</p></blockquote></blockquote><blockquote><p>查看手机端安装的所有app包名:</p><blockquote><p>adb shell pm list packages</p></blockquote></blockquote><h4 id="启动Activity"><a href="#启动Activity" class="headerlink" title="启动Activity:"></a>启动Activity:</h4><blockquote><p>adb shell am start 包名/完整Activity路径</p></blockquote><blockquote><p>例如：</p><blockquote><p>adb shell am start com.zhy.aaa/com.zhy.aaa.MainActivity</p></blockquote></blockquote><blockquote><p>如果需要携带参数(携带一个Intent,Key 为name):<br>adb shell am start com.zhy.aaa/com.zhy.aaa.MainActivity -e name zhy</p></blockquote><blockquote><p>启动一个隐式的Intent:</p><blockquote><p>adb shell am start -a “android.intent.action,VIEW” -d “<a href="https://www.google.com&quot;" target="_blank" rel="noopener">https://www.google.com&quot;</a></p></blockquote></blockquote><h4 id="发送广播："><a href="#发送广播：" class="headerlink" title="发送广播："></a>发送广播：</h4><blockquote><p>adb shell am broadcast -a “broadcastactionfilter”</p></blockquote><blockquote><p>如果需要携带参数（携带一个Intent,key为name）:</p><blockquote><p>adb shell am broadcast -a “broadcastactionfilter” -e name zhy</p></blockquote></blockquote><h4 id="启动服务："><a href="#启动服务：" class="headerlink" title="启动服务："></a>启动服务：</h4><blockquote><p>adb shell am startservice “com.zhy.aaa/com.zhy.aaa.MyService”</p></blockquote><h4 id="屏幕截图："><a href="#屏幕截图：" class="headerlink" title="屏幕截图："></a>屏幕截图：</h4><blockquote><p>可以使用screencap命令来进行手机屏幕截图，例如：</p><blockquote><p>adb shell screencap /sdcard/screen.png</p></blockquote></blockquote><h4 id="录制视频："><a href="#录制视频：" class="headerlink" title="录制视频："></a>录制视频：</h4><blockquote><p>可以使用screenrecord[options] filename命令来录制屏幕视频;<br>例如：</p><blockquote><p>adb shell screenrecord /sdcard/demo.mp4</p></blockquote></blockquote><h4 id="远程连接adb"><a href="#远程连接adb" class="headerlink" title="远程连接adb"></a>远程连接adb</h4><blockquote><p>通过 IP 地址连接设备。</p><blockquote><p>adb connect [device-ip-address]</p></blockquote></blockquote><blockquote><p>断开无线连接</p><blockquote><p>adb disconnect [device-ip-address]</p></blockquote></blockquote><h4 id="速查-ADB-用法大全-官方文档："><a href="#速查-ADB-用法大全-官方文档：" class="headerlink" title="速查 | ADB 用法大全|官方文档："></a>速查 | ADB 用法大全|官方文档：</h4><blockquote><p><a href="http://www.wanandroid.com/blog/show/2310" target="_blank" rel="noopener">http://www.wanandroid.com/blog/show/2310</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk安装和配置环境变量</title>
      <link href="/posts/54eecc7d"/>
      <url>/posts/54eecc7d</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>学习JAVA，必须得安装一下JDK(java development kit java开发工具包)，配置一下环境就可以学习JAVA了，下面是下载和安装JDK的教程：</p></blockquote><h2 id="1-JDK下载地址："><a href="#1-JDK下载地址：" class="headerlink" title="1.JDK下载地址："></a>1.JDK下载地址：</h2><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><p>点开链接你应该看到如下图所示的界面：</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjE4MjIxODE2ODgy?x-oss-process=image/format,png" alt="这里写图片描述"> </p><h2 id="2-点击上图中箭头所指的地方，会出现下面的这个界面，此时你需要根据你的电脑系统来进行对应的版本进行选择，在选择版本和下载之前你需要首先接收协议，具体界面如下图所示："><a href="#2-点击上图中箭头所指的地方，会出现下面的这个界面，此时你需要根据你的电脑系统来进行对应的版本进行选择，在选择版本和下载之前你需要首先接收协议，具体界面如下图所示：" class="headerlink" title="2.点击上图中箭头所指的地方，会出现下面的这个界面，此时你需要根据你的电脑系统来进行对应的版本进行选择，在选择版本和下载之前你需要首先接收协议，具体界面如下图所示："></a>2.点击上图中箭头所指的地方，会出现下面的这个界面，此时你需要根据你的电脑系统来进行对应的版本进行选择，在选择版本和下载之前你需要首先接收协议，具体界面如下图所示：</h2><h3 id="3-双击以后进行JDK的安装（记得按照第二幅图修改一下安装路径，不要什么东西都安装到系统盘。。。）："><a href="#3-双击以后进行JDK的安装（记得按照第二幅图修改一下安装路径，不要什么东西都安装到系统盘。。。）：" class="headerlink" title="3.双击以后进行JDK的安装（记得按照第二幅图修改一下安装路径，不要什么东西都安装到系统盘。。。）："></a>3.双击以后进行JDK的安装（记得按照第二幅图修改一下安装路径，不要什么东西都安装到系统盘。。。）：</h3><h4 id="（1）双击进行安装界面如下所示："><a href="#（1）双击进行安装界面如下所示：" class="headerlink" title="（1）双击进行安装界面如下所示："></a>（1）双击进行安装界面如下所示：</h4><p> <img src= "/img/loading1.gif" data-lazy-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjE4MjIyMDI3NzMy?x-oss-process=image/format,png" alt="这里写图片描述"> </p><p> <img src= "/img/loading1.gif" data-lazy-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjE4MjMwMTM2NDcy?x-oss-process=image/format,png" alt="这里写图片描述"></p><p> <img src= "/img/loading1.gif" data-lazy-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjE4MjMwMTQ5MzQ3?x-oss-process=image/format,png" alt="这里写图片描述"></p><p> <img src= "/img/loading1.gif" data-lazy-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjE4MjMwMjAwMDgy?x-oss-process=image/format,png" alt="这里写图片描述"></p><p> <img src= "/img/loading1.gif" data-lazy-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjE4MjMwMjEyMjM3?x-oss-process=image/format,png" alt="这里写图片描述"> </p><p>  <img src= "/img/loading1.gif" data-lazy-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjE4MjMwMjIyNTY1?x-oss-process=image/format,png" alt="这里写图片描述"></p><h2 id="4-安装完成后，需要进行环境变量的配置，右键我的电脑—属性—-高级系统设置就会看到下面的界面："><a href="#4-安装完成后，需要进行环境变量的配置，右键我的电脑—属性—-高级系统设置就会看到下面的界面：" class="headerlink" title="4.安装完成后，需要进行环境变量的配置，右键我的电脑—属性—-高级系统设置就会看到下面的界面："></a>4.安装完成后，需要进行环境变量的配置，右键我的电脑—属性—-高级系统设置就会看到下面的界面：</h2><p> <img src= "/img/loading1.gif" data-lazy-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjE4MjIyODUzMTEy?x-oss-process=image/format,png" alt="这里写图片描述"> </p><h2 id="5-点击上图中的环境变量，然后开始环境变量的配置："><a href="#5-点击上图中的环境变量，然后开始环境变量的配置：" class="headerlink" title="5.点击上图中的环境变量，然后开始环境变量的配置："></a>5.点击上图中的环境变量，然后开始环境变量的配置：</h2><h5 id="（1）点击系统变量下面的新建按钮，变量名JAVA-HOME（代表你的JDK安装路径），值对应的是你的JDK的安装路径。"><a href="#（1）点击系统变量下面的新建按钮，变量名JAVA-HOME（代表你的JDK安装路径），值对应的是你的JDK的安装路径。" class="headerlink" title="（1）点击系统变量下面的新建按钮，变量名JAVA_HOME（代表你的JDK安装路径），值对应的是你的JDK的安装路径。"></a>（1）点击系统变量下面的新建按钮，变量名JAVA_HOME（代表你的JDK安装路径），值对应的是你的JDK的安装路径。</h5><p>  <img src= "/img/loading1.gif" data-lazy-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjE4MjIzMDE5ODAw?x-oss-process=image/format,png" alt="这里写图片描述"> </p><h5 id="（2）继续在系统变量里面新建一个CLASSPATH变量，其变量值如下图所示："><a href="#（2）继续在系统变量里面新建一个CLASSPATH变量，其变量值如下图所示：" class="headerlink" title="（2）继续在系统变量里面新建一个CLASSPATH变量，其变量值如下图所示："></a>（2）继续在系统变量里面新建一个CLASSPATH变量，其变量值如下图所示：</h5><p> <img src= "/img/loading1.gif" data-lazy-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjE4MjIzMjAxMjM4?x-oss-process=image/format,png" alt="这里写图片描述"> </p><p>此处需要注意：最前面有一个英文状态下的小圆点。。。。很多初学者在配置环境变量的时候就会跌倒在这个坑里。</p><h5 id="（3）在你的系统变量里面找一个变量名是PATH的变量，需要在它的值域里面追加一段如下的代码："><a href="#（3）在你的系统变量里面找一个变量名是PATH的变量，需要在它的值域里面追加一段如下的代码：" class="headerlink" title="（3）在你的系统变量里面找一个变量名是PATH的变量，需要在它的值域里面追加一段如下的代码："></a>（3）在你的系统变量里面找一个变量名是PATH的变量，需要在它的值域里面追加一段如下的代码：</h5><blockquote><p>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;</p></blockquote><p>此时你应该在你原有的值域后面追加，记得在原有的值域后面记得添加一个英文状态下的分号。<br>最后点击确定，此时JDK的环境变量配置就完成了。</p><h2 id="6-测试自己所配置的环境变量是否正确"><a href="#6-测试自己所配置的环境变量是否正确" class="headerlink" title="6.测试自己所配置的环境变量是否正确"></a>6.测试自己所配置的环境变量是否正确</h2><p>（1）WINDOWS+R键，输入cmd，进入命令行界面，如下所示：</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjE4MjIzNzM1MTAw?x-oss-process=image/format,png" alt="这里写图片描述"> </p><p>（2）输入java -version命令，可以出现如下图的提示，你可以看你安装的JDK版本。</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjE4MjIzOTAxNTA3?x-oss-process=image/format,png" alt="这里写图片描述"> </p><p>（3）输入javac命令可以出现如下的提示：</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjE4MjI0MDA1ODgy?x-oss-process=image/format,png" alt="这里写图片描述"> </p><p>（4）输入java命令就会出现如下图所示的结果</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjE4MjI0MTMwMjI2?x-oss-process=image/format,png" alt="这里写图片描述"> </p><h2 id="7-写一段代码可以验证一下"><a href="#7-写一段代码可以验证一下" class="headerlink" title="7.写一段代码可以验证一下"></a>7.写一段代码可以验证一下</h2><h5 id="（1）我在E盘新建了一个文件夹叫javafile，在里面有一个Java文件，名字叫TestJava-java，此时需要注意，你的文件名字后缀一定是-java"><a href="#（1）我在E盘新建了一个文件夹叫javafile，在里面有一个Java文件，名字叫TestJava-java，此时需要注意，你的文件名字后缀一定是-java" class="headerlink" title="（1）我在E盘新建了一个文件夹叫javafile，在里面有一个Java文件，名字叫TestJava.java，此时需要注意，你的文件名字后缀一定是.java"></a>（1）我在E盘新建了一个文件夹叫javafile，在里面有一个Java文件，名字叫TestJava.java，此时需要注意，你的文件名字后缀一定是.java</h5><h5 id="（2）你需要在你的文件里面写下面的代码："><a href="#（2）你需要在你的文件里面写下面的代码：" class="headerlink" title="（2）你需要在你的文件里面写下面的代码："></a>（2）你需要在你的文件里面写下面的代码：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class TestJava&#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">System.out.println(&quot;I am a  java new learner!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（3）继续windows-r键进入dos命令行，你需要首先进入你java文件所在的目录，然后分别使用javac命令对你的java文件进行编译，然后使用java命令来解析你的javac命令编译的结果，就会如下图所示这样："><a href="#（3）继续windows-r键进入dos命令行，你需要首先进入你java文件所在的目录，然后分别使用javac命令对你的java文件进行编译，然后使用java命令来解析你的javac命令编译的结果，就会如下图所示这样：" class="headerlink" title="（3）继续windows+r键进入dos命令行，你需要首先进入你java文件所在的目录，然后分别使用javac命令对你的java文件进行编译，然后使用java命令来解析你的javac命令编译的结果，就会如下图所示这样："></a>（3）继续windows+r键进入dos命令行，你需要首先进入你java文件所在的目录，然后分别使用javac命令对你的java文件进行编译，然后使用java命令来解析你的javac命令编译的结果，就会如下图所示这样：</h5><p> <img src= "/img/loading1.gif" data-lazy-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjE4MjI0OTQxNzc4?x-oss-process=image/format,png" alt="这里写图片描述"> </p><p>此处一定要注意：必须进入文件所在的目录；其次使用javac命令 文件的名字的后面一定要跟着.java的文件后缀；使用java命令时.java后缀可以不用写。<br>当你执行完javac命令如果没有错误提示，说明通过了编译，就会在你的文件目录下生成一个同名的.class文件。</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjE4MjI1MjAxNjI5?x-oss-process=image/format,png" alt="这里写图片描述"> </p><p>如果你完成了以上的所有，并且结果显示正确，那么说明你的JDK安装和环境配置都很成功，此时你就可以开始你的JAVA学习了。<br>JDK1.8 API链接：<br><a href="http://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">http://docs.oracle.com/javase/8/docs/api/</a><br>JAVA tutorials:<br><a href="http://docs.oracle.com/javase/tutorial/" target="_blank" rel="noopener">http://docs.oracle.com/javase/tutorial/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【接口测试】postman做接口测试04-常见类型接口请求</title>
      <link href="/posts/be476180"/>
      <url>/posts/be476180</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>接下来我们介绍俩种表单 ，分别是：application/x-www-form-urlencoded和multipart/form-data。它们都支持表单请求，所不同的是后一种支持上传文件，而前一种只支持表单 。</p><h2 id="三、表单类型的请求"><a href="#三、表单类型的请求" class="headerlink" title="三、表单类型的请求"></a>三、表单类型的请求</h2><h4 id="1-什么是表单-？"><a href="#1-什么是表单-？" class="headerlink" title="1. 什么是表单 ？"></a>1. 什么是表单 ？</h4><blockquote><p>简单理解就是在请求头中查看Content-Type，它的值如果是:application/x-www-form-urlencoded .那么就说明客户端提交的数据是以表单形式提交的</p></blockquote><p>我们都知道，在发送HTTP请求的时候，一个请求中一般包含三个部分，分别是请求行，请求头，请求体 。不同的接口，请求体的数据类型是不一样的，比较常见的一种就是表单类型，见下图</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200414110309980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ZlbnVzdGVjaDA5MTk=,size_16,color_FFFFFF,t_70" alt="img"> </p><h4 id="2-postman中如何请求？"><a href="#2-postman中如何请求？" class="headerlink" title="2. postman中如何请求？"></a>2. postman中如何请求？</h4><p>在postman请求上图的接口，我们只需要填写四个参数，分别是：</p><p>请求方法：POST<br>请求URL：<a href="http://localhost/index.php?m=Home&amp;c=User&amp;a=do_login&amp;t=0.21942974229794432" target="_blank" rel="noopener">http://localhost/index.php?m=Home&amp;c=User&amp;a=do_login&amp;t=0.21942974229794432</a><br>请求头：Content-Type：application/x-www-form-urlencoded<br>请求体： username=13088888888&amp;password=123456&amp;verify_code=8888</p><h4 id="3-实现步骤："><a href="#3-实现步骤：" class="headerlink" title="3. 实现步骤："></a>3. 实现步骤：</h4><ol><li>打开postman，新建一个请求 。</li><li>在请求中设置以上四个参数，点击Send按钮。</li><li>在postman中设置请求体类型为，需要选择body-&gt; x-www-form-urlencoded</li><li>查看响应数据。</li></ol><p> <img src= "/img/loading1.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200414110543350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ZlbnVzdGVjaDA5MTk=,size_16,color_FFFFFF,t_70" alt="img"> </p><h2 id="四、支持上传文件的表单请求"><a href="#四、支持上传文件的表单请求" class="headerlink" title="四、支持上传文件的表单请求"></a>四、支持上传文件的表单请求</h2><h4 id="1-什么是文件请求？"><a href="#1-什么是文件请求？" class="headerlink" title="1. 什么是文件请求？"></a>1. 什么是文件请求？</h4><p>在做接口测试时，也会遇到需要上传文件的接口，比如微信的更新头像。这就需要另外一种表单的支持：multipart/form-data。这种类型的表单既支持上面类型的表单请求，同时支持上传文件。 它的请求报文往往是这样的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">POST http:&#x2F;&#x2F;localhost&#x2F;index.php&#x2F;home&#x2F;Uploadify&#x2F;imageUp&#x2F;savepath&#x2F;head_pic&#x2F;pictitle&#x2F;banner&#x2F;dir&#x2F;images.html HTTP&#x2F;1.1</span><br><span class="line">Content-Type: multipart&#x2F;form-data</span><br><span class="line">file&#x3D;a1.jpg</span><br></pre></td></tr></table></figure><p>这种类型的接口，在postman中该如何请求呢 ？ 我们先分析需要填写的参数 。<br>请求方法：POST<br>请求URL：<a href="http://localhost/index.php/home/Uploadify/imageUp/savepath/head_pic/pictitle/banner/dir/images.html" target="_blank" rel="noopener">http://localhost/index.php/home/Uploadify/imageUp/savepath/head_pic/pictitle/banner/dir/images.html</a><br>请求类型：multipart/form-data<br>请求体：file=a1.jpg</p><h4 id="2-实现步骤："><a href="#2-实现步骤：" class="headerlink" title="2. 实现步骤："></a>2. 实现步骤：</h4><ol><li><p>打开postman，新建一个请求 。</p></li><li><p>在请求中设置以上四个参数，点击Send按钮。</p></li><li><p>注意：在postman中设置请求体类型，需要选择body-&gt; form-data 。</p></li><li><p>file中要选择File类型，然后上传本地的文件 。</p></li><li><p>查看响应数据。</p><p><img src= "/img/loading1.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200414111439455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ZlbnVzdGVjaDA5MTk=,size_16,color_FFFFFF,t_70" alt="img"> </p></li></ol><blockquote><p>总结 ，以上四种类型的接口就是我们常见的接口请求，简单的来说，其实就是在Body中分别选择form-data(支持上传文件)，x-www-form-urlencoded(表单),raw-json（json）。最后填写响应的请求数据即可 。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> postman </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【接口测试】postman做接口测试03-常见类型接口请求</title>
      <link href="/posts/66841aa6"/>
      <url>/posts/66841aa6</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在做接口测试时，我们经常遇到以下4种类型的接口，分别是查询参数接口，表单类型的接口，支持文件上传的接口以及json类型的接口 。那么这些类型的接口在postman如何去请求呢 ？</p><h2 id="一、查询参数的接口请求"><a href="#一、查询参数的接口请求" class="headerlink" title="一、查询参数的接口请求"></a>一、查询参数的接口请求</h2><h4 id="1-什么是查询参数"><a href="#1-什么是查询参数" class="headerlink" title="1. 什么是查询参数?"></a>1. 什么是查询参数?</h4><blockquote><p>所谓的查询参数，其实就是URL地址中问号（?）后面的部分就叫查询参数</p></blockquote><p>比如：<a href="http://cx.shouji.360.cn/phonearea.php?number=13012345678" target="_blank" rel="noopener">http://cx.shouji.360.cn/phonearea.php?number=13012345678</a> 。在这个接口中，查询参数就是:number=13012345678 。而这一部分是由有键值对组成，格式为：key1=value1&amp;key2=value2, 如果有多组键值对，需要用&amp;隔开 。</p><h4 id="2-postman如何请求"><a href="#2-postman如何请求" class="headerlink" title="2. postman如何请求?"></a>2. postman如何请求?</h4><ol><li><p>在postman中实现这类接口请求非常简单，一般就需要明确俩个参数即可，一个是请求方法，一个请求地址。</p></li><li><p>针对上面的那个接口，地址已经给出 ，而它的请求方法是get 。那么在postman中只需要把这俩个参数填写上即可请求 。</p></li></ol><h4 id="3-具体实现步骤："><a href="#3-具体实现步骤：" class="headerlink" title="3. 具体实现步骤："></a>3. 具体实现步骤：</h4><ol><li><p>打开postman，新建一个请求。</p></li><li><p>在请求方法中选择请求方法：GET,因为在postman中默认的请求方法就是GET,所以这一步可以忽略</p></li><li><p>接口URL中输入地址，点击Send按钮就发送请求了 。</p></li></ol><p> <img src= "/img/loading1.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200414104224746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ZlbnVzdGVjaDA5MTk=,size_16,color_FFFFFF,t_70" alt="img"> </p><blockquote><p>说明：查询参数的URL一般直接拷贝到输入的URL地址栏中就可以了，当然也可以把查询参数在Params中输入，俩者的效果是一样的 。</p></blockquote><h2 id="二、json类型的接口请求"><a href="#二、json类型的接口请求" class="headerlink" title="二、json类型的接口请求"></a>二、json类型的接口请求</h2><h4 id="1-什么是文件请求？"><a href="#1-什么是文件请求？" class="headerlink" title="1. 什么是文件请求？"></a>1. 什么是文件请求？</h4><blockquote><p>json类型的请求参数是接口测试中最常见的一种情况了 ，常用于创建活动&amp;商品等， 它的请求体类型为json,我们来看下这个请求报文 。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST http:&#x2F;&#x2F;xxx&#x2F;api&#x2F;sys&#x2F;login HTTP&#x2F;1.1</span><br><span class="line">Content-Type: application&#x2F;json;charset&#x3D;UTF-8</span><br><span class="line"></span><br><span class="line">&#123;&quot;account&quot;:&quot;root&quot;,&quot;password&quot;:&quot;123456&quot;&#125;</span><br></pre></td></tr></table></figure><p>根据以上报文，我们可以分析出，我们在postman只需要填写四个参数即可，具体如下：</p><p>请求方法：POST<br>请求地址：<a href="http://xxx/api/sys/login" target="_blank" rel="noopener">http://xxx/api/sys/login</a><br>请求体类型：json<br>请求体数据：{“account”:”root”,”password”:”123456”}</p><h4 id="2-实现步骤："><a href="#2-实现步骤：" class="headerlink" title="2. 实现步骤："></a>2. 实现步骤：</h4><ol><li><p>打开postman，新建一个请求 。</p></li><li><p>在请求中设置以上四个参数，点击Send按钮。</p></li><li><p>查看响应数据。</p></li></ol><blockquote><p>注意：在postman中设置请求体类型，需要选择body-&gt; raw -JSON</p></blockquote><p> <img src= "/img/loading1.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200414104923196.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ZlbnVzdGVjaDA5MTk=,size_16,color_FFFFFF,t_70" alt="img"> </p>]]></content>
      
      
      <categories>
          
          <category> postman </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【接口测试】postman做接口测试02-发送第一个请求</title>
      <link href="/posts/8a00d2ea"/>
      <url>/posts/8a00d2ea</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-界面导航说明"><a href="#1-界面导航说明" class="headerlink" title="1.界面导航说明"></a>1.界面导航说明</h2><p>在使用postman发送请求前，我们先来看下postman的主界面。来简单的了解下这款工具的主要功能 。</p><p> <img src= "/img/loading1.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200413213052761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ZlbnVzdGVjaDA5MTk=,size_16,color_FFFFFF,t_70" alt="img"> </p><h2 id="2-发送第一个请求"><a href="#2-发送第一个请求" class="headerlink" title="2.发送第一个请求"></a>2.发送第一个请求</h2><p>打开postman，点击+加号打开一个新的请求页。</p><p>​    在请求的URL中输入请求地址：<a href="http://www.weather.com.cn/data/sk/101010100.html" target="_blank" rel="noopener">http://www.weather.com.cn/data/sk/101010100.html</a></p><p>​    点击Send按钮，这时就可以在下部的窗格中看到来自服务器的json响应数据</p><p>  <img src= "/img/loading1.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200413213338723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ZlbnVzdGVjaDA5MTk=,size_16,color_FFFFFF,t_70" alt="img"> </p>]]></content>
      
      
      <categories>
          
          <category> postman </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【接口测试】postman做接口测试01-基本介绍与安装</title>
      <link href="/posts/d7719dab"/>
      <url>/posts/d7719dab</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>postman是一款支持http协议的接口测试工具，其主要特点就是功能强大，使用简单。 对于我们做接口测试来说，如果选择工具的话，postman可以是一款非常值得推荐的工具 。</p></blockquote><h4 id="postman安装步骤（以windows为例）："><a href="#postman安装步骤（以windows为例）：" class="headerlink" title="postman安装步骤（以windows为例）："></a>postman安装步骤（以windows为例）：</h4><p>访问postman官方网站，下载最新版本，访问地址：<a href="https://www.postman.com/downloads/" target="_blank" rel="noopener">https://www.postman.com/downloads/</a></p><p>进入到下载页面，根据自己电脑下载对应的版本。</p><p>击下载的安装包，进入到安装界面，直到用户登录和注册界面。选择跳过，会进入到postman主界面，至此postman安装成功。</p><p> <img src= "/img/loading1.gif" data-lazy-src="/img/postman_down01.png" alt="down"> </p>]]></content>
      
      
      <categories>
          
          <category> postman </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术路线专家域</title>
      <link href="/posts/8aa14a73"/>
      <url>/posts/8aa14a73</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>在技术路线，向上继续提升的方向，我们称之为“技术专家”；如果说前面描述的技术职位的所涉范围都定位在企业内部，即企业级资深性能测试工程师，那么技术专家，我们可以看作是领域级专项人才！随着软件测试行业的职位不断细化，每个人在自己擅长的领域走向深入，都可以成为该领域的技术专家，技术专家在自已经营的领域里，具有个人独到的见解和深厚的技术实力，而这类人才可以不再从事具体的测试工作，而是提供行业性测试技术咨询、培训等，为软件测试整体行业的发展，起到了鲜明的带头作用</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术路线高级域</title>
      <link href="/posts/bbd06fa5"/>
      <url>/posts/bbd06fa5</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>技术路线高级域：</strong></p><p>　　进入技术路线的高级域，根据中级域的四个路线，可以细分成五个路线，分别是资深自动化测试工程师、资深白盒测试工程师、资深性能测试工程师、安全性测试工程师、标准化工程师，这些高级技术类人才完全与常规测试经理平齐，属于软件测试职业发展高级域。</p><p>　　资深自动化测试工程师由自动化测试工程师晋升而来。如果说常规自动化测试工程师只是负责自动化测试脚本本身的设计与开发，那么资深自动化测试工程师的工作内容就是自动化测试这项工作的实施！也就是说，录制脚本-添加验证点-回放脚本只是最初始的自动化阶段，要在企业实施自动化测试，要有资深自动化测试工程师来设计数据驱动，开发测试框架，甚至一些企业内部自主开发小型测试工具（而非商业工具）的先例，这些也都是建立在资深自动化测试工程师具有深厚的技术底蕴后，主导其他人员协调完成的事情。</p><p>　　资深白盒测试工程师，其工作内容包含常规白盒测试工程师的内容，除此之外，要协助测试经理或测试总监攻关测试方法与技术性难题，因此其技术水平更加雄厚。如果常规白盒测试工程师是停留在某种程序设计语言类型的代码级测试，那么资深白盒测试工程师就要脱离程序设计语言本身，结合不同架构、多种开发技术交互的情况下，寻找代码测试方法，并具有对代码优化的能力。</p><p>　　资深性能测试工程师，来源于常规性能测试工程师，按照常规性能测试工程师的技术要求，资深性能测试工程师应该具备性能测试整体方案的设计能力，以及软件系统性能问题定位和性能优化的能力！除此之外，也要对主流的软件开发模式下的应用系统具有敏锐的洞察意识和感知意识。</p><p>　　安全性测试工程师，其实从性能测试工程师衍生出来，因为只有具备性能测试经验的人，才对软件的开发模式、实现架构和技术本身充分了解，才会感知和预见软件系统存在的安全漏洞，加上其本人是测试出身，才知道如何通过系统漏洞尝试攻击软件系统，达到测试的目的。目前国内软件行业对于安全性测试的认识尚未清晰，该职业也更没有普及，一般只限于军事类、机密类、防病毒类或其他高安全性软件的测试工作中。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>技术路线中级域</title>
      <link href="/posts/42f034cf"/>
      <url>/posts/42f034cf</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>技术路线中级域</strong>：</p><p>　　技术路线，划分为三个半方向，分别是自动化测试工程师、白盒测试工程师、性能测试工程师和认证测试工程师；前三者适用于通用软件测试领域，认证测试工程师乃嵌入式测试领域职位，至少目前仅出现在嵌入式领域。</p><p>　　自动化测试工程师，定义在功能测试范畴，指通常所说的依靠自动化测试工具进行软件黑盒测试的工程师。从大环境讲，自动化测试是软件测试执行阶段的必然趋势，社会对于软件测试的认可度以及对自动化测试人才的需求必将日益增加。</p><p>　　白盒测试工程师，定位于在软件测试周期的单元测试阶段对软件进行的代码级测试的人，包括代码走读、代码功能与逻辑测试、代码内存泄漏检查、代码运行效率检查、代码测试覆盖率分析等。如果说，自动化测试只是依靠脚本语言完成测试脚本编写与调试的过程（因为自动化测试工程师的工作重点不在编写脚本），对于自动化测试工程师的技术要求要相对偏低的话，那么白盒测试工程师就要对大型程序开发语言的完全掌握，因此其技术要求相对偏高！</p><p>　　性能测试工程师，即在系统测试阶段、功能测试后对软件系统性能指标进行采集分析和运行效率检测的人。在一个尽量压缩的测试流程里，功能测试可以手工进行，白盒测试可以不做，但是性能测试必须要做，除非该软件非网络类软件即单机版软件！软件测试，从宏观上可以划分为三个大方面：功能测试、性能测试、安全性测试，功能测试说明软件做对了，功能测试+性能测试说明软件做好了，三者结合起来说明软件做的非常好！安全测试暂且抛之不提，这是下一个发展域的内容，但是为了把软件做好，为了真正保证软件的质量，性能测试绝不容忽视；只因目前很多企业由于时间、成本、人力条件的限制，暂且不做性能测试。性能测试工程师相对来说，是三个技术路线里技术要求最高的，因为软件的性能瓶颈归根结底落实到代码的运行效率这个问题上，因此性能测试要做好，性能测试工程师起码要懂开发；而为了发现性能问题，要懂软件开发架构；为了定位性能问题，要懂操作系统、网络协议、应用服务器乃至数据库的原理与使用；为了最终解决性能问题，要根据定位的问题有针对性的对代码、操作系统、网络架构、服务器、数据库进行优化！当然性能测试是一个系统工程师，绝对不是一两个人的事情，对于常规性能测试工程师，具备定位性能问题的能力即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>管理+技术路线</title>
      <link href="/posts/d5268b29"/>
      <url>/posts/d5268b29</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>管理+技术路线：</strong></p><p>　　首先是常规路线，这条发展路线要求管理与技术并重，因为软件测试的行业特点决定了这个因素：测试工程师向上晋升到测试主管、测试经理、测试总监，直至咨询域的更高方向！</p><p>　　测试主管是企业项目级主管，对于中小型软件公司也可以是企业级主管，属于中级发展域，适用范围是2到5年职业经验的测试从业者。其工作内容是根据项目经理或测试经理的计划安排，调配测试工程师执行模块级或项目级测试工作，并控制与监督软件缺陷的追踪，保证每个测试环节与阶段的顺利进行。严格来说，这个级别更多属于测试的设计者，因为企业的测试流程搭建是由更高级别的测试经理或相关管理者来做的，测试主管负责该流程的具体实施；而更多的工作，是思考如何对软件进行更加深入、全面的测试。测试主管比较有创造性的工作内容就是测试设计，而恰恰很多公司忽略了或没有精力来执行此工作内容！应该说，在一个企业里做了3年左右测试工作的人员，很容易晋升到该职位，而之所以晋升，是与个人测试技术的过硬、测试方法的丰富，加上对测试流程的监控力与执行力的职业素质息息相关！</p><p>　　测试经理是更高级别的测试管理者，属于高级测试方向域。对于大中型软件公司，该职位尤为重要，并且对其职业要求也比较高，一般适合4到8年的测试从业者，在管理与技术能力双双比较成熟的情况下，可以结合具体环境晋升到该级别。测试经理负责企业级或大型项目级总体测试工作的策划与实施。测试经理除了需要统筹整个企业级或项目级测试流程外，还要对于不同软件架构、不同开发技术下的测试方法进行研究与探索，为企业的测试团队成员提供指导与解决思路，同时还要合理调配不同专项测试的人力资源（如业务测试工程师、自动化测试工程师、白盒测试工程师、性能测试工程师），对软件进行全面的测试；另外，一些企业里，测试经理还需要与客户交流与沟通，负责部分的销售性或技术支持性工作。</p><p>　　测试总监，属于常规发展路线的最高域，该职位一般在大型或跨国型软件企业，或者专向于测试服务型企业有所设立，一般设立测试总监的企业，该职位都相当于CTO或副总的级别，是企业级或集团级测试工作的最高领导者，驾驭着企业全部的测试与测试相关资源，管理着企业的全部测试及质量类工作。而其职业要求，也是技术与管理双结合。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件测试攻城狮的成长之路</title>
      <link href="/posts/a9438874"/>
      <url>/posts/a9438874</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>测试初期，我们并不清楚整个的测试职业发展如何，该篇文章详细地描述了各个阶段的职业目标， 希望给予迷茫的从业者启发思考。</p><p><strong>测试初级阶段：</strong></p><p>　　测试工程师，属于软件测试职业生涯的初级域，其适用范围是入行软件测试3年内的常规测试从业者，其主要工作内容是按照测试主管（即直接上司）分配的任务计划，编写测试用例、执行测试用例、提交软件缺陷，包括提交阶段性测试报告、参与阶段性评审等。</p><p><strong>管理+技术路线：</strong></p><p>　　首先是常规路线，这条发展路线要求管理与技术并重，因为软件测试的行业特点决定了这个因素：测试工程师向上晋升到测试主管、测试经理、测试总监，直至咨询域的更高方向！</p><p><strong>技术路线中级域</strong>：</p><p>　　技术路线，划分为三个半方向，分别是自动化测试工程师、白盒测试工程师、性能测试工程师和认证测试工程师；前三者适用于通用软件测试领域，认证测试工程师乃嵌入式测试领域职位，至少目前仅出现在嵌入式领域。</p><p>　　自动化测试工程师，定义在功能测试范畴，指通常所说的依靠自动化测试工具进行软件黑盒测试的工程师。从大环境讲，自动化测试是软件测试执行阶段的必然趋势，社会对于软件测试的认可度以及对自动化测试人才的需求必将日益增加。</p><p><strong>技术路线高级域：</strong></p><p>　　进入技术路线的高级域，根据中级域的四个路线，可以细分成五个路线，分别是资深自动化测试工程师、资深白盒测试工程师、资深性能测试工程师、安全性测试工程师、标准化工程师，这些高级技术类人才完全与常规测试经理平齐，属于软件测试职业发展高级域。</p><p>　　<strong>技术路线专家域：</strong></p><p>　　在技术路线，向上继续提升的方向，我们称之为“技术专家”；如果说前面描述的技术职位的所涉范围都定位在企业内部，即企业级资深性能测试工程师，那么技术专家，我们可以看作是领域级专项人才！随着软件测试行业的职位不断细化，每个人在自己擅长的领域走向深入，都可以成为该领域的技术专家，技术专家在自已经营的领域里，具有个人独到的见解和深厚的技术实力，而这类人才可以不再从事具体的测试工作，而是提供行业性测试技术咨询、培训等，为软件测试整体行业的发展，起到了鲜明的带头作用</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开篇</title>
      <link href="/posts/39cb083c"/>
      <url>/posts/39cb083c</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>作为软件开发过程中一个非常重要的环节</strong>，软件测试越来越成为软件开发商和用户关注的焦点。完善的测试是软件质量的保证，因此软件测试就成了一项重要而艰巨的工作。要做好这项工作当然也绝非易事。下面我着重谈谈自己在做软件测试工作中总结出来的一些经验和技巧，以供大家参考。  </p><p>  <strong>1.功能点的细化</strong><br>  在进行测试前，先将所要测试的功能细分，填写《测试功能细分表》，有针对性的运行功能测试案例，逐个对每个功能细分点进行测试。在每次运行测试案例之前，明确此次运行的目的和预期的输出结果，并要做好记录。<br>  <strong>2.注意测试中的错误集中发生现象</strong><br>  有一些错误是和程序开发人员的编程水平和习惯有很大关系的。例如程序中的拼写错误，习惯用法等。注意收集并记录这些现象，有助于更快、更多地发现类似的错误。  </p><p>  <strong>3.尽可能多的使用非常规的测试</strong><br>  充分考虑到各种合法的输入和不合法的输入以及各种边界条件。边界值往往是最容易出现异常的情况，特殊的情况下甚至要制造极端的状态和意外状态，比如网络突然中断，和电源突然断电等情况。具体有以下几种情况：<br>  （1） 边界测试，测试用户输入框中的数值的最大数和最小数，以及为空时的情况。  </p><p> （2） 非法测试，例如在输入数字的地方输入字母。  </p><p> （3） 跟踪测试，跟踪一条数据的流程,保证数据的正确性。<br> （4） 在开始测试之前应保证数据的正确性，然后再从系统中找出各种BUG。<br> （5） 接口测试，程序往往在接口的地方很容易发生错误，要在此模块测试勿掉以轻心。<br> （6） 代码重用测试，在开发过程中有些模块功能几乎相同，开发人员在重用代码时可能忘记在原有代码上修改或修改不全面，而造成的错误。<br> （7） 突发事件测试，服务器上可能发生意外情况的测试，如网络中断，电源断电等极端的情况。  </p><p> （8） 外界环境测试，有些系统在开发时依赖于另外一个系统,当另外一个系统发生错误时, 这个系统所受到的影响的情况。<br> （9） 系统兼容测试，例如有些程序在IE6能运行正常，到IE5下不能运行。有些程序在WIN2000下能运行，而到WIN98却不能运行。<br> （10） 用户的易用性测试，往往用户的需求是不断的变化的，而其中的一部份变化的原因，是由用户操作上不方便引起的。<br>  <strong>4.对测试错误结果一定要有一个确认的过程。</strong>  </p><p>　一般有A测试出来的错误，一定要有一个B来确认。  </p><p>  <strong>5.制定严格的测试计划</strong><br>  测试时间安排的尽量宽松，不要希望在极短的时间内完成一个高水平的测试。  </p><p>  <strong>6.回归测试的关联性一定要引起充分的注意</strong><br>  在开发人员刚修复Bug之后的地方,再找一找，往往开发人员只修复报告出来的缺陷而不去考虑别的功能在修改时可能会重新造成错误。修改一个错误而引起更多的错误出现的现象并不少见。   </p><p>  <strong>7.测试文档要尽可能详细</strong><br>  《测试功能细分表》中的功能点可尽量的详细，如实、详细地记录每次运行测试案例的输入数据，输出数据，出错提示，进行测试的时间，完成测试的时间等，便于以后对测试工作的回溯。  </p><p>  <strong>8.重视交流和沟通</strong><br>  包括和程序开发人员的交流，同是测试人员之间的交流，网上技术论坛和网友的交流,和客户的交流等。多思考，多交流，多提问，通过多种沟通交流的途径，可以少走很多弯路，同时可以学到很多东西。  </p><p>  <strong>9.善于总结</strong><br>  在测试过程中发现的所有问题，异常情况，发现程序开发人员易犯，常犯的错误，各种有价值的经验教训，使用系统和操作数据库时发现或者学到的技巧，使用测试工具时的心得等等，都可以随手记录在笔记本或者电脑上。这些都将是今后工作中可以参照的珍贵资料，同时也会成为自己的宝贵经验。  </p><p> <strong>10.妥善保存一切测试过程文档</strong><br>  便于测试的重现，事后的跟踪，工作的回溯，总结，报告等都要依赖这些测试文档。<br>  总之，软件测试是整个软件开发过程中交付用户使用前的最后阶段，是软件质量保证的关键，一定要引起足够的重视。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超实用的SQL语句之嵌套查询</title>
      <link href="/posts/f3908263"/>
      <url>/posts/f3908263</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2>嵌套查询</h2><h3>什么是嵌套查询</h3>. 　　嵌套查询的意思是，一个查询语句(select-from-where)查询语句块可以嵌套在另外一个查询块的where子句中，称为嵌套查询。其中外层查询也称为父查询，主查询。内层查询也称子查询，从查询。<h3>嵌套查询的工作方式</h3> 　　先处理内查询，由内向外处理，外层查询利用内层查询的结果嵌套查询不仅仅可以用于父查询select语句使用。还可以用于insert、update、delete语句或其他子查询中。<h2>子查询的组成</h2> 1、包含标准选择列表组件的标准select查询。<p> 2、包含一个或多个表或者视图名称的标准from子句。</p><p> 3、可选的where子句。</p><p> 4、可选的group by子句。</p><p> 5、可选的having子句。</p><h2>子查询的语法规则</h2> 1、子查询的select查询总是使用圆括号括起来。<p> 2、不能包括compute或for.browse子句。</p><p> 3、如果同时指定top子句，则可能只包括order by子句。</p><p> 4、子查询最多可以嵌套到32层。个别查询可能会不支持32层嵌套。</p><p> 5、任何可以使用表达式的地方都可以使用子查询，只要它返回的是单个值。</p><p> 6、如果某个表只出现在子查询中二不出现在外部查询中，那么该表的列就无法包含在输出中。</p><h2>简单子查询</h2><strong>示例：</strong><pre><code>select name,age from person where age &gt;     (        select age from person         where name = &apos;孙权&apos;    )</code></pre><p><strong>输出结果为：</strong><br><img src= "/img/loading1.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/glassy-sky-lisong/StaticFile1@master/post/4.jpg" alt="1"></p><h2>in嵌套查询</h2> 　　in关键字用于where子句中用来判断查询的表达式是否在多个值的列表中。返回满足in列表中的满足条件的记录。<p><strong>示例：</strong></p><pre><code>select name from person where countryid in (select countryid from countrywhere countryname = &apos;魏国&apos;)</code></pre><p><strong>输出结果为：</strong></p><img src= "/img/loading1.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/glassy-sky-lisong/StaticFile1@master/post/3.jpg" alt="2"><h2>some嵌套查询</h2><h3>语法</h3> 　　some在sql中的逻辑运算符号，如果在一系列比较中，有些值为True，那么结果就为True。some的语法是：<pre><code>&lt;表达式&gt;{ =|&lt;&gt;|!=|&gt;|&gt;=|!&gt;|&lt;|&lt;=|!&lt;}some(子查询)</code></pre><p><strong>示例：</strong></p><pre><code>select name from person where countryid = some 　　　　　　--用等号和以下查询到的值比较，如果与其中一个相等，就返回(select countryid from countrywhere countryname = &apos;魏国&apos;)</code></pre><p><strong>输出结果为：</strong><br><img src= "/img/loading1.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/glassy-sky-lisong/StaticFile1@master/post/2.jpg" alt="3"></p><h2>all嵌套查询</h2> 　　all是sql中的逻辑运算符好，如果一系列的比较都为true，那么结果才能为true。<h3>语法</h3>    <表达式>{ =|<>|!=|>|>=|!>|<|<=|!<}all(子查询)<p><strong>示例：</strong></p><pre><code>select name from person where countryid &gt; all　　 --当countryid大于以下返回的所有id，此结果才为True，此结果才返回(select countryid from countrywhere countryname = &apos;魏国&apos;)</code></pre><p><strong>输出结果为：</strong><br><img src= "/img/loading1.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/glassy-sky-lisong/StaticFile1@master/post/1.jpg" alt="4"></p><h2>exists嵌套查询</h2><h3>语法</h3> 　　exists是sql中的逻辑运算符号。如果子查询有结果集返回，那么就为True。exists代表“存在”的意义，它只查找满足条件的那些记录。<span style="color:red">一旦找到第一个匹配的记录后，就马上停止查找。</span><pre><code>exists　子查询</code></pre><p> 　　其中子查询是一个首先的select语句，不允许有compute子句和into关键字。<br>exists 的意思是，子查询是否有结果集返回。<br><strong>例如：</strong></p><pre><code>SELECT * FROM PersonWHERE exists(SELECT 1      --SELECT 0  SELECT NULL 返回结果都一样，因为这三个子查询都有结果集返回，因此总是True  SELECT * FROM Person照常执行)</code></pre><p> 　　但是如果子查询中因为加了条件而没有结果集返回，则主语句就不执行了：</p><pre><code>SELECT * FROM PersonWHERE exists(SELECT * FROM Person WHERE Person_Id = 100    --如果不存在Person_Id的记录，则子查询没有结果集返回，主语句不执行)</code></pre><p>最后感谢<a href="https://www.cnblogs.com/kissdodog/archive/2013/06/03/3116284.html" target="_blank" rel="noopener">不玩博客了！</a>同学的分享，么么哒！</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客美化——Silence主题皮肤</title>
      <link href="/posts/3ba53770"/>
      <url>/posts/3ba53770</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;一款专注阅读的博客园主题，主要面向于经常混迹 博客园 的朋友。其追求大道至简的终极真理，界面追求简洁、运行追求高效、部署追求简单。</p><ul><li><a href="https://github.com/glassy-sky-lisong/SilenceSkin" target="_blank" rel="noopener">博客皮肤源码地址</a></li><li><a href="https://www.cnblogs.com/esofar" target="_blank" rel="noopener">预览地址</a></li><li><a href="https://github.com/esofar/cnblogs-theme-silence/blob/master/docs/deploy.md" target="_blank" rel="noopener">如何部署、使用皮肤</a></li><li><a href="https://www.cnblogs.com/esofar/p/cnblogs-theme-silence.html" target="_blank" rel="noopener">Silence作者的友链</a></li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>简洁优雅、精致漂亮的 UI 设计</li><li>提供多种风格主题以便适应各类用户的偏好</li><li>响应式设计，兼容手机端浏览器</li><li>提供事无巨细的部署文档</li><li>源码结构清晰并且注释完整，方便扩展</li></ul><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>&emsp;&emsp;请先确保您正在使用的机器已经安装 Node.js 和 Git 客户端。</p><pre><code>git clone https://github.com/esofar/cnblogs-theme-silence.git   # 克隆源码cd cnblogs-theme-silence                                        # 进入项目npm install                                                     # 安装依赖npm run build</code></pre><p>&emsp;&emsp;如果没有安装node。js或者不会使用的童鞋可以在我的GitHub，也就是博客皮肤源码地址中。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>&emsp;&emsp;重点部署之前使用博客园的cutorm皮肤，具体部署细节请详见’如何部署、使用皮肤’，如果又不会的话可以看一看我的配置作为参考（仅作为参考，找不回来别哭鼻子）<br><strong><em>CSS</em></strong></p><pre><code>&lt;!-- 溢出隐藏设置（放置在管理--&gt; 设置--&gt; css模块中） --&gt;#topics, #mainContent {    overflow: visible;}.cnblogs-markdown .hljs{    display:block;    color:#333;    overflow-x:auto;    background:#F2F4F5!important;    border:none!important;    font-family:Consolas,Monaco,&apos;Andale Mono&apos;,&apos;Ubuntu Mono&apos;,monospace!important;    padding:1em!important;    font-size:14px!important    }</code></pre><p><strong><em>侧边栏公告</em></strong></p><pre><code>&lt;!-- 在管理--&gt; 设置-&gt; 侧边栏公告(支持js代码、支持html代码) --&gt;&lt;script src=&quot;https://blog-static.cnblogs.com/files/glassysky/silence.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;    $.silence({        profile: {            enable: true,            avatar: &apos;https://gitee.com/glassyskyforgame/glassysky/blob/master/4c67d1a20cf431ade2873e284836acaf2fdd989e.jpg&apos;,            favicon: &apos;https://gitee.com/glassyskyforgame/glassysky/raw/master/4c67d1a20cf431ade2873e284836acaf2fdd989e.jpg&apos;,        },        catalog: {            enable: true,            move: true,            index: true,            level1: &apos;h2&apos;,            level2: &apos;h3&apos;,            level3: &apos;h4&apos;,        },        signature: {            enable: true,            home: &apos;https://www.cnblogs.com/glassysky/&apos;,            license: &apos;署名 4.0 国际&apos;,            link: &apos;https://creativecommons.org/licenses/by/4.0&apos;        },        reward: {            enable: true,            title: &apos;感谢小可爱投食&apos;,            wechat: &apos;https://images.cnblogs.com/cnblogs_com/esofar/972540/o_wechat.png&apos;,            alipay: &apos;https://images.cnblogs.com/cnblogs_com/esofar/972540/o_alipay.png&apos;        },        github: {            enable: true,            color: &apos;#fff&apos;,            fill: null,            link: &apos;https://github.com/glassy-sky-lisong&apos;        }    });&lt;/script&gt;&lt;!--外置主题css补丁--&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://blog-static.cnblogs.com/files/glassysky/sli.css&quot;/&gt;</code></pre><p><strong><em>会动的title</em></strong></p><pre><code>&lt;!-- 动态titlejs --&gt;&lt;script&gt; var OriginTitle = document.title; var titleTime; document.addEventListener(&apos;visibilitychange&apos;, function () { if                 (document.hidden) { document.title = &apos;╭(°A°`)╮ 页面崩溃啦 ~&apos;; clearTimeout(titleTime); } else { document.title = &apos;(ฅ&gt;ω&lt;*ฅ) 噫又    好了~&apos; + OriginTitle; titleTime = setTimeout(function () { document.title = OriginTitle; }, 2000); } }); &lt;/script&gt;</code></pre><p><strong><em>图片放大功能</em></strong></p><pre><code>&lt;!--图片放大的zoomcss和js--&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://blog-static.cnblogs.com/files/glassysky/zoom.css&quot;/&gt;&lt;script src=&quot;https://blog-static.cnblogs.com/files/glassysky/zoom.js&quot;&gt;&lt;/script&gt;&lt;!-- Bootstrap 的 transition.js cdn（过渡动画插件）--&gt;&lt;script type=&quot;text/javascript&quot;&gt;$(&apos;#cnblogs_post_body img&apos;).attr(&apos;data-action&apos;, &apos;zoom&apos;);&lt;/script&gt;</code></pre><h2 id="博客的皮肤风格"><a href="#博客的皮肤风格" class="headerlink" title="博客的皮肤风格"></a>博客的皮肤风格</h2><ul><li>简约·蓝<br><img src= "/img/loading1.gif" data-lazy-src="https://github.com/esofar/cnblogs-theme-silence/raw/master/docs/theme_default.png" alt="img1"> </li><li>暗黑·绿<br><img src= "/img/loading1.gif" data-lazy-src="https://github.com/esofar/cnblogs-theme-silence/raw/master/docs/theme_dark.png" alt="img2"></li><li>女神·粉<br><img src= "/img/loading1.gif" data-lazy-src="https://github.com/esofar/cnblogs-theme-silence/raw/master/docs/theme_goddess.png" alt="img3">  </li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-admin插件使用</title>
      <link href="/posts/f84657b8"/>
      <url>/posts/f84657b8</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-下载依赖包"><a href="#1-下载依赖包" class="headerlink" title="1.下载依赖包"></a>1.下载依赖包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br></pre></td></tr></table></figure><h2 id="2-启动hexo服务"><a href="#2-启动hexo服务" class="headerlink" title="2.启动hexo服务"></a>2.启动hexo服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm server -d</span><br></pre></td></tr></table></figure><h2 id="3-修改用户名、密码"><a href="#3-修改用户名、密码" class="headerlink" title="3.修改用户名、密码"></a>3.修改用户名、密码</h2><p>  在Hexo博客控制台页面-&gt;设置-&gt;用户名、密码一一填写，填写完毕后将页面最下面的config.yaml配置一键复制、粘贴，重启后即可生效</p>    <div id="aplayer-hgScgZpw" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="621465725" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="none" data-theme="#ad7a86" data-listfolded="true" data-fixed="true" data-mini="true"    ></div>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIPS</title>
      <link href="/posts/50a2b841"/>
      <url>/posts/50a2b841</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="文本文字"><a href="#文本文字" class="headerlink" title="文本文字"></a>文本文字</h2><span class='p red'>红色</span><span class='p yellow'>黄色</span><span class='p blue'>蓝色</span><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><h2 id="外挂标签"><a href="#外挂标签" class="headerlink" title="外挂标签"></a>外挂标签</h2><p>有颜色标签</p><div class="note red"><p>为简单的一句话提供的简便写法。</p></div><div class="note quote"><p>为简单的一句话提供的简便写法。</p></div><div class="note info"><p>为简单的一句话提供的简便写法。</p></div><div class="note warning"><p>为简单的一句话提供的简便写法。</p></div><div class="note done"><p>支持同样丰富的参数。</p></div><div class="note success"><p>支持同样丰富的参数。</p></div><div class="note danger"><p>支持同样丰富的参数。</p></div><div class="note error"><p>支持同样丰富的参数。</p></div><p>灰色标签</p><div class="note radiation"><p>支持同样丰富的参数。</p></div><div class="note bug"><p>支持同样丰富的参数。</p></div><div class="note idea"><p>支持同样丰富的参数。</p></div><div class="note link"><p>支持同样丰富的参数。</p></div><div class="note paperclip"><p>支持同样丰富的参数。</p></div><div class="note todo"><p>支持同样丰富的参数。</p></div><div class="note msg"><p>支持同样丰富的参数。</p></div><div class="note guide"><p>支持同样丰富的参数。</p></div><div class="note download"><p>支持同样丰富的参数。</p></div><div class="note up"><p>支持同样丰富的参数。</p></div><div class="note undo"><p>支持同样丰富的参数。</p></div><h2 id="块标签"><a href="#块标签" class="headerlink" title="块标签"></a>块标签</h2><div class="note quote">            <p class='p subtitle'>小标题</p><p>Windows 10不是為所有人設計,而是為每個人設計</p><p class='p subtitle'>嵌套测试</p><div class="note ">            <p>请坐和放宽，我正在帮你搞定一切…</p>          </div><p class='p subtitle'>Folding 测试</p><details ><summary> <p>点击查看更多</p> </summary>              <div class='content'>              <div class="note warning"><p>不要说我们没有警告过你</p></div><div class="note bug red">            <p>我们都有不顺利的时候</p>          </div>              </div>            </details>          </div><h2 id="上标式标签"><a href="#上标式标签" class="headerlink" title="上标式标签"></a>上标式标签</h2><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 markdown 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><h1 id="ff"><a href="#ff" class="headerlink" title="ff"></a>ff</h1><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 markdown 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><p>This is my website, click the button <a class="btn-beautify button--animated " href="http://www.jerryc.me"   title="JerryC"><span>JerryC</span></a><br>This is my website, click the button <a class="btn-beautify button--animated " href="http://www.jerryc.me"   title="JerryC"><i class="far fa-hand-point-right fa-fw"></i><span>JerryC</span></a><br>This is my website, click the button <a class="btn-beautify button--animated outline" href="http://www.jerryc.me"   title="JerryC"><span>JerryC</span></a><br>This is my website, click the button <a class="btn-beautify button--animated outline" href="http://www.jerryc.me"   title="JerryC"><i class="far fa-hand-point-right fa-fw"></i><span>JerryC</span></a><br>This is my website, click the button <a class="btn-beautify button--animated larger" href="http://www.jerryc.me"   title="JerryC"><i class="far fa-hand-point-right fa-fw"></i><span>JerryC</span></a></p><a class="btn-beautify button--animated block" href="http://www.jerryc.me"   title="JerryC"><i class="far fa-hand-point-right fa-fw"></i><span>JerryC</span></a><a class="btn-beautify button--animated block center larger" href="http://www.jerryc.me"   title="JerryC"><i class="far fa-hand-point-right fa-fw"></i><span>JerryC</span></a><a class="btn-beautify button--animated block right outline larger" href="http://www.jerryc.me"   title="JerryC"><i class="far fa-hand-point-right fa-fw"></i><span>JerryC</span></a><a class="btn-beautify button--animated larger" href="http://www.jerryc.me"   title="JerryC"><i class="far fa-hand-point-right fa-fw"></i><span>JerryC</span></a><a class="btn-beautify button--animated blue larger" href="http://www.jerryc.me"   title="JerryC"><i class="far fa-hand-point-right fa-fw"></i><span>JerryC</span></a><a class="btn-beautify button--animated pink larger" href="http://www.jerryc.me"   title="JerryC"><i class="far fa-hand-point-right fa-fw"></i><span>JerryC</span></a><a class="btn-beautify button--animated red larger" href="http://www.jerryc.me"   title="JerryC"><i class="far fa-hand-point-right fa-fw"></i><span>JerryC</span></a><a class="btn-beautify button--animated purple larger" href="http://www.jerryc.me"   title="JerryC"><i class="far fa-hand-point-right fa-fw"></i><span>JerryC</span></a><a class="btn-beautify button--animated orange larger" href="http://www.jerryc.me"   title="JerryC"><i class="far fa-hand-point-right fa-fw"></i><span>JerryC</span></a><a class="btn-beautify button--animated green larger" href="http://www.jerryc.me"   title="JerryC"><i class="far fa-hand-point-right fa-fw"></i><span>JerryC</span></a><div class="btn-center"><a class="btn-beautify button--animated outline larger" href="http://www.jerryc.me"   title="JerryC"><i class="far fa-hand-point-right fa-fw"></i><span>JerryC</span></a><a class="btn-beautify button--animated outline blue larger" href="http://www.jerryc.me"   title="JerryC"><i class="far fa-hand-point-right fa-fw"></i><span>JerryC</span></a><a class="btn-beautify button--animated outline pink larger" href="http://www.jerryc.me"   title="JerryC"><i class="far fa-hand-point-right fa-fw"></i><span>JerryC</span></a><a class="btn-beautify button--animated outline red larger" href="http://www.jerryc.me"   title="JerryC"><i class="far fa-hand-point-right fa-fw"></i><span>JerryC</span></a><a class="btn-beautify button--animated outline purple larger" href="http://www.jerryc.me"   title="JerryC"><i class="far fa-hand-point-right fa-fw"></i><span>JerryC</span></a><a class="btn-beautify button--animated outline orange larger" href="http://www.jerryc.me"   title="JerryC"><i class="far fa-hand-point-right fa-fw"></i><span>JerryC</span></a><a class="btn-beautify button--animated outline green larger" href="http://www.jerryc.me"   title="JerryC"><i class="far fa-hand-point-right fa-fw"></i><span>JerryC</span></a></div><span class="hide-inline"><button type="button" class="hide-button button--animated" style="background-color: bg;color: color">display  </button><span class="hide-content">content</span></span><div class="hide-block"><button type="button" class="hide-button button--animated" style="background-color: bg;color: color">display    </button><span class="hide-content"><p>content</p></span></div><div class="tabs" id="tab-id"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tab-id-1">标签名</button></li><li class="tab"><button type="button" data-href="#tab-id-2">标签名</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tab-id-1"><p><img src= "/img/loading1.gif" data-lazy-src="https://i.loli.net/2020/03/18/f5PQlWisvm9zbgK.jpg" alt=""></p><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tab-id-2"><p>这里面写内容，支持的语法格式有限，请尽量<u>不要</u>写太过复杂的东西。</p><button type="button" class="tab-to-top" onclick="scrollToDest($(this).parents('.tabs'),65)"><i class="fas fa-arrow-up"></i></button></div></div></div><details ><summary> <p>查看图片测试</p> </summary>              <div class='content'>              <p><img src= "/img/loading1.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details cyan open><summary> <p>查看默认打开的折叠框</p> </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details green><summary> <p>查看代码测试</p> </summary>              <div class='content'>                            </div>            </details><details yellow><summary> <p>查看列表测试</p> </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details red><summary> <p>查看嵌套测试</p> </summary>              <div class='content'>              <details blue><summary> <p>查看嵌套测试2</p> </summary>              <div class='content'>              <details ><summary> <p>查看嵌套测试3</p> </summary>              <div class='content'>              <p>hahaha <span><img src= "/img/loading1.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><div class="audio"><audio controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/xaoxuu/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><p>$$E(A)=\sum_{j=1}^v \frac {s_{1j}+s_{2j}+….s_{mj}} sI(s_{1j}+s_{2j}+….s_{mj})$$<br>$$I(s_{1j}+s_{2j}+….s_{mj})=-\sum_{i=1}^mp_{ij}log(p_{ij})\p_{ij}=\frac {s_{ij}} {|s_j|}$$</p><h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><div class="tip success"><p>helloworld</p>          </div><hr><div class="tip wtgo"><p>为简单的一句话提供的简便写法。</p></div><div class="tip ban"><p>为简单的一句话提供的简便写法。</p></div><div class="tip home"><p>为简单的一句话提供的简便写法。</p></div><div class="tip important"><p>为简单的一句话提供的简便写法。</p></div><div class="tip ref"><p>为简单的一句话提供的简便写法。</p><p></p></div><div class="tip ffa"><p>为简单的一句话提供的简便写法。</p><p></p></div><div class="tip key"><p>为简单的一句话提供的简便写法。</p><p></p></div><div class="tip socd"><p>为简单的一句话提供的简便写法。</p><p></p></div>***<div class="tip success faa-wrench animated"><p>摇摆</p>          </div><div class="tip success faa-horizontal animated"><p>垂直抖动</p>          </div><div class="tip success faa-flash animated"><p>若隐若现</p>          </div><div class="tip success faa-pulse animated"><p>变色</p>          </div><div class="tip success faa-shake animated"><p>摇摆</p>          </div><h2 id="beautiful-btns"><a href="#beautiful-btns" class="headerlink" title="beautiful btns"></a>beautiful btns</h2><div class="btns circle grid5">            <a href='https://xaoxuu.com' target="_blank" rel="noopener" title='xaoxuu'><img src= "/img/loading1.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a href='https://xaoxuu.com' target="_blank" rel="noopener" title='xaoxuu'><img src= "/img/loading1.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a href='https://xaoxuu.com' target="_blank" rel="noopener" title='xaoxuu'><img src= "/img/loading1.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a href='https://xaoxuu.com' target="_blank" rel="noopener" title='xaoxuu'><img src= "/img/loading1.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a href='https://xaoxuu.com' target="_blank" rel="noopener" title='xaoxuu'><img src= "/img/loading1.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div><div class="btns rounded grid5">            <a href='/' title='下载源码'><i class='fa fa-download'></i>下载源码</a><a href='/' title='查看文档'><i class='fa fa-download'></i>查看文档</a>          </div><div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1' target="_blank" rel="noopener">  <i class="fa fa-apple"></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src= "/img/loading1.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1' target="_blank" rel="noopener">  <i class="fa fa-apple"></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src= "/img/loading1.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><h2 id="metingjs"><a href="#metingjs" class="headerlink" title="metingjs"></a>metingjs</h2>    <div id="aplayer-MknJiomF" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="621465725" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="none" data-theme="#ad7a86" data-listfolded="true" data-fixed="true" data-mini="true"    ></div><p>如左下角所示</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
